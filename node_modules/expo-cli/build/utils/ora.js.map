{"version":3,"file":"ora.js","names":["logReal","console","log","infoReal","info","warnReal","warn","errorReal","error","ora","options","inputOptions","text","disabled","program","nonInteractive","Log","isDebug","spinner","oraReal","isEnabled","stream","process","stdout","stderr","oraStart","start","bind","oraStop","stop","oraStopAndPersist","stopAndPersist","logWrap","method","args","wrapNativeLogs","resetNativeLogs","result","setSpinner","logNewSection","title","chalk","bold"],"sources":["../../src/utils/ora.ts"],"sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport oraReal, { Ora } from 'ora';\n\nimport Log from '../log';\n\n// eslint-disable-next-line no-console\nconst logReal = console.log;\n// eslint-disable-next-line no-console\nconst infoReal = console.info;\n// eslint-disable-next-line no-console\nconst warnReal = console.warn;\n// eslint-disable-next-line no-console\nconst errorReal = console.error;\n\n/**\n * A custom ora spinner that sends the stream to stdout in CI, non-TTY, or expo's non-interactive flag instead of stderr (the default).\n *\n * @param options\n * @returns\n */\nexport function ora(options?: oraReal.Options | string): oraReal.Ora {\n  const inputOptions = typeof options === 'string' ? { text: options } : options || {};\n  const disabled = program.nonInteractive || Log.isDebug;\n  const spinner = oraReal({\n    // Ensure our non-interactive mode emulates CI mode.\n    isEnabled: !disabled,\n    // In non-interactive mode, send the stream to stdout so it prevents looking like an error.\n    stream: disabled ? process.stdout : process.stderr,\n    ...inputOptions,\n  });\n\n  const oraStart = spinner.start.bind(spinner);\n  const oraStop = spinner.stop.bind(spinner);\n  const oraStopAndPersist = spinner.stopAndPersist.bind(spinner);\n\n  const logWrap = (method: any, args: any[]): void => {\n    oraStop();\n    method(...args);\n    spinner.start();\n  };\n\n  const wrapNativeLogs = (): void => {\n    // eslint-disable-next-line no-console\n    console.log = (...args: any) => logWrap(logReal, args);\n    // eslint-disable-next-line no-console\n    console.info = (...args: any) => logWrap(infoReal, args);\n    // eslint-disable-next-line no-console\n    console.warn = (...args: any) => logWrap(warnReal, args);\n    // eslint-disable-next-line no-console\n    console.error = (...args: any) => logWrap(errorReal, args);\n  };\n\n  const resetNativeLogs = (): void => {\n    // eslint-disable-next-line no-console\n    console.log = logReal;\n    // eslint-disable-next-line no-console\n    console.info = logReal;\n    // eslint-disable-next-line no-console\n    console.warn = warnReal;\n    // eslint-disable-next-line no-console\n    console.error = errorReal;\n  };\n\n  spinner.start = (text): Ora => {\n    wrapNativeLogs();\n    return oraStart(text);\n  };\n\n  spinner.stopAndPersist = (options): Ora => {\n    const result = oraStopAndPersist(options);\n    resetNativeLogs();\n    return result;\n  };\n\n  spinner.stop = (): Ora => {\n    const result = oraStop();\n    resetNativeLogs();\n    return result;\n  };\n\n  // Always make the central logging module aware of the current spinner\n  Log.setSpinner(spinner);\n\n  return spinner;\n}\n\n/**\n * Create a unified section spinner.\n *\n * @param title\n * @returns\n */\nexport function logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  // Prevent the spinner from clashing with debug logs\n  spinner.start();\n  return spinner;\n}\n"],"mappings":"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"}