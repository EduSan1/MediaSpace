{"version":3,"file":"bundleId.js","names":["getProfilesForBundleIdDangerousAsync","context","bundleIdentifier","bundleId","BundleId","findAsync","identifier","getProfilesAsync","getProfilesForBundleIdAsync","profiles","validProfileIds","Set","Promise","all","map","profile","getBundleIdAsync","add","id","e","name","message","includes","filter","has","getBundleIdForIdentifierAsync","CommandError"],"sources":["../../src/appleApi/bundleId.ts"],"sourcesContent":["import { BundleId, Profile, RequestContext } from '@expo/apple-utils';\n\nimport CommandError from '../CommandError';\n\nasync function getProfilesForBundleIdDangerousAsync(\n  context: RequestContext,\n  bundleIdentifier: string\n): Promise<Profile[]> {\n  const bundleId = await BundleId.findAsync(context, { identifier: bundleIdentifier });\n  if (bundleId) {\n    return bundleId.getProfilesAsync();\n  }\n  return [];\n}\n\nexport async function getProfilesForBundleIdAsync(\n  context: RequestContext,\n  bundleIdentifier: string\n): Promise<Profile[]> {\n  const profiles = await getProfilesForBundleIdDangerousAsync(context, bundleIdentifier);\n  // users sometimes have a poisoned Apple cache and receive stale data from the API\n  // we call an arbitrary method, `getBundleIdAsync` on each profile\n  // if it errors, the profile was stale, so we remove it\n  const validProfileIds = new Set();\n  await Promise.all(\n    profiles.map(async profile => {\n      try {\n        await profile.getBundleIdAsync();\n        validProfileIds.add(profile.id);\n      } catch (e: any) {\n        if (\n          e.name === 'UnexpectedAppleResponse' &&\n          e.message.includes('The specified resource does not exist - There is no resource of type')\n        ) {\n          // TODO: add tracking analytics here\n          return;\n        }\n        throw e;\n      }\n    })\n  );\n  return profiles.filter(profile => validProfileIds.has(profile.id));\n}\n\nexport async function getBundleIdForIdentifierAsync(\n  context: RequestContext,\n  bundleIdentifier: string\n): Promise<BundleId> {\n  const bundleId = await BundleId.findAsync(context, { identifier: bundleIdentifier });\n  if (!bundleId) {\n    throw new CommandError(`Failed to find Bundle ID item with identifier \"${bundleIdentifier}\"`);\n  }\n  return bundleId;\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAEA,eAAeA,oCAAf,CACEC,OADF,EAEEC,gBAFF,EAGsB;EACpB,MAAMC,QAAQ,GAAG,MAAMC,sBAAA,CAASC,SAAT,CAAmBJ,OAAnB,EAA4B;IAAEK,UAAU,EAAEJ;EAAd,CAA5B,CAAvB;;EACA,IAAIC,QAAJ,EAAc;IACZ,OAAOA,QAAQ,CAACI,gBAAT,EAAP;EACD;;EACD,OAAO,EAAP;AACD;;AAEM,eAAeC,2BAAf,CACLP,OADK,EAELC,gBAFK,EAGe;EACpB,MAAMO,QAAQ,GAAG,MAAMT,oCAAoC,CAACC,OAAD,EAAUC,gBAAV,CAA3D,CADoB,CAEpB;EACA;EACA;;EACA,MAAMQ,eAAe,GAAG,IAAIC,GAAJ,EAAxB;EACA,MAAMC,OAAO,CAACC,GAAR,CACJJ,QAAQ,CAACK,GAAT,CAAa,MAAMC,OAAN,IAAiB;IAC5B,IAAI;MACF,MAAMA,OAAO,CAACC,gBAAR,EAAN;MACAN,eAAe,CAACO,GAAhB,CAAoBF,OAAO,CAACG,EAA5B;IACD,CAHD,CAGE,OAAOC,CAAP,EAAe;MACf,IACEA,CAAC,CAACC,IAAF,KAAW,yBAAX,IACAD,CAAC,CAACE,OAAF,CAAUC,QAAV,CAAmB,sEAAnB,CAFF,EAGE;QACA;QACA;MACD;;MACD,MAAMH,CAAN;IACD;EACF,CAdD,CADI,CAAN;EAiBA,OAAOV,QAAQ,CAACc,MAAT,CAAgBR,OAAO,IAAIL,eAAe,CAACc,GAAhB,CAAoBT,OAAO,CAACG,EAA5B,CAA3B,CAAP;AACD;;AAEM,eAAeO,6BAAf,CACLxB,OADK,EAELC,gBAFK,EAGc;EACnB,MAAMC,QAAQ,GAAG,MAAMC,sBAAA,CAASC,SAAT,CAAmBJ,OAAnB,EAA4B;IAAEK,UAAU,EAAEJ;EAAd,CAA5B,CAAvB;;EACA,IAAI,CAACC,QAAL,EAAe;IACb,MAAM,KAAIuB,uBAAJ,EAAkB,kDAAiDxB,gBAAiB,GAApF,CAAN;EACD;;EACD,OAAOC,QAAP;AACD"}