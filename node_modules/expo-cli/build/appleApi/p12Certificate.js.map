{"version":3,"file":"p12Certificate.js","names":["getP12CertFingerprint","p12Buffer","passwordRaw","certData","getRawCertData","certAsn1","forge","pki","certificateToAsn1","certDer","asn1","toDer","getBytes","md","sha1","create","update","digest","toHex","toUpperCase","findP12CertSerialNumber","serialNumber","getCertData","replace","Buffer","isBuffer","toString","Error","password","String","p12Der","util","decode64","p12Asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","certBagType","oids","certBag","getBags","bagType","cert"],"sources":["../../src/appleApi/p12Certificate.ts"],"sourcesContent":["import forge, { pki } from 'node-forge';\n\nexport function getP12CertFingerprint(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const certData = getRawCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1.create().update(certDer).digest().toHex().toUpperCase();\n}\n\nexport function findP12CertSerialNumber(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const { serialNumber } = getCertData(p12Buffer, passwordRaw);\n  return serialNumber;\n}\n\nexport function getCertData(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): pki.Certificate {\n  const certData = getRawCertData(p12Buffer, passwordRaw);\n  return {\n    ...certData,\n    serialNumber: certData.serialNumber.replace(/^0+/, '').toUpperCase(),\n  };\n}\n\nfunction getRawCertData(p12Buffer: Buffer | string, passwordRaw: string | null): pki.Certificate {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = p12.getBags({ bagType: certBagType })?.[certBagType]?.[0]?.cert;\n  if (!certData) {\n    throw new Error(\"getRawCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n"],"mappings":";;;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAEO,SAASA,qBAAT,CACLC,SADK,EAELC,WAFK,EAGG;EACR,MAAMC,QAAQ,GAAGC,cAAc,CAACH,SAAD,EAAYC,WAAZ,CAA/B;;EACA,MAAMG,QAAQ,GAAGC,oBAAA,CAAMC,GAAN,CAAUC,iBAAV,CAA4BL,QAA5B,CAAjB;;EACA,MAAMM,OAAO,GAAGH,oBAAA,CAAMI,IAAN,CAAWC,KAAX,CAAiBN,QAAjB,EAA2BO,QAA3B,EAAhB;;EACA,OAAON,oBAAA,CAAMO,EAAN,CAASC,IAAT,CAAcC,MAAd,GAAuBC,MAAvB,CAA8BP,OAA9B,EAAuCQ,MAAvC,GAAgDC,KAAhD,GAAwDC,WAAxD,EAAP;AACD;;AAEM,SAASC,uBAAT,CACLnB,SADK,EAELC,WAFK,EAGG;EACR,MAAM;IAAEmB;EAAF,IAAmBC,WAAW,CAACrB,SAAD,EAAYC,WAAZ,CAApC;EACA,OAAOmB,YAAP;AACD;;AAEM,SAASC,WAAT,CACLrB,SADK,EAELC,WAFK,EAGY;EACjB,MAAMC,QAAQ,GAAGC,cAAc,CAACH,SAAD,EAAYC,WAAZ,CAA/B;EACA,OAAO,EACL,GAAGC,QADE;IAELkB,YAAY,EAAElB,QAAQ,CAACkB,YAAT,CAAsBE,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,EAAyCJ,WAAzC;EAFT,CAAP;AAID;;AAED,SAASf,cAAT,CAAwBH,SAAxB,EAAoDC,WAApD,EAAiG;EAAA;;EAC/F,IAAIsB,MAAM,CAACC,QAAP,CAAgBxB,SAAhB,CAAJ,EAAgC;IAC9BA,SAAS,GAAGA,SAAS,CAACyB,QAAV,CAAmB,QAAnB,CAAZ;EACD,CAFD,MAEO,IAAI,OAAOzB,SAAP,KAAqB,QAAzB,EAAmC;IACxC,MAAM,IAAI0B,KAAJ,CAAU,6CAAV,CAAN;EACD;;EAED,MAAMC,QAAQ,GAAGC,MAAM,CAAC3B,WAAW,IAAI,EAAhB,CAAvB;;EACA,MAAM4B,MAAM,GAAGxB,oBAAA,CAAMyB,IAAN,CAAWC,QAAX,CAAoB/B,SAApB,CAAf;;EACA,MAAMgC,OAAO,GAAG3B,oBAAA,CAAMI,IAAN,CAAWwB,OAAX,CAAmBJ,MAAnB,CAAhB;;EACA,MAAMK,GAAG,GAAG7B,oBAAA,CAAM8B,MAAN,CAAaC,cAAb,CAA4BJ,OAA5B,EAAqCL,QAArC,CAAZ;;EACA,MAAMU,WAAW,GAAGhC,oBAAA,CAAMC,GAAN,CAAUgC,IAAV,CAAeC,OAAnC;;EACA,MAAMrC,QAAQ,mBAAGgC,GAAG,CAACM,OAAJ,CAAY;IAAEC,OAAO,EAAEJ;EAAX,CAAZ,CAAH,0EAAG,aAAwCA,WAAxC,CAAH,oFAAG,sBAAuD,CAAvD,CAAH,2DAAG,uBAA2DK,IAA5E;;EACA,IAAI,CAACxC,QAAL,EAAe;IACb,MAAM,IAAIwB,KAAJ,CAAU,wCAAV,CAAN;EACD;;EACD,OAAOxB,QAAP;AACD"}