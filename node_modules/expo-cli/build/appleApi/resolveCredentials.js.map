{"version":3,"file":"resolveCredentials.js","names":["resolveCredentialsAsync","options","credentials","getAppleIdFromEnvironmentOrOptions","username","promptUsernameAsync","password","userCredentials","passedAppleId","process","env","EXPO_APPLE_ID","passedAppleIdPassword","EXPO_APPLE_PASSWORD","EXPO_APPLE_ID_PASSWORD","undefined","Log","error","CommandError","log","lastAppleId","getCachedUsernameAsync","promptAsync","type","name","message","validate","val","initial","cacheUsernameAsync","Keychain","EXPO_NO_KEYCHAIN","cachedPath","JsonFileCache","usernameCachePath","cacheAsync","promptPasswordAsync","cachedPassword","getCachedPasswordAsync","learnMore","wrapAnsi","chalk","bold","stdout","columns","cachePasswordAsync","fs","remove","cached","getCacheAsync","getKeychainServiceName","appleId","deletePasswordAsync","serviceName","success","getPasswordAsync","setPasswordAsync"],"sources":["../../src/appleApi/resolveCredentials.ts"],"sourcesContent":["import { Auth, JsonFileCache } from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport wrapAnsi from 'wrap-ansi';\n\nimport CommandError from '../CommandError';\nimport { learnMore } from '../commands/utils/TerminalLink';\nimport Log from '../log';\nimport promptAsync from '../utils/prompts';\nimport * as Keychain from './keychain';\n\n/**\n * Get the username and possibly the password from the environment variables or the supplied options.\n * Password is optional because it's only needed for authentication, but not for re-authentication.\n *\n * @param options\n */\nexport async function resolveCredentialsAsync(\n  options: Partial<Auth.UserCredentials>\n): Promise<Partial<Auth.UserCredentials>> {\n  const credentials = getAppleIdFromEnvironmentOrOptions(options);\n\n  if (!credentials.username) {\n    credentials.username = await promptUsernameAsync();\n  }\n\n  return credentials;\n}\n\nfunction getAppleIdFromEnvironmentOrOptions({\n  username,\n  password,\n  ...userCredentials\n}: Partial<Auth.UserCredentials>): Partial<Auth.UserCredentials> {\n  const passedAppleId = username || process.env.EXPO_APPLE_ID;\n  const passedAppleIdPassword = passedAppleId\n    ? password || process.env.EXPO_APPLE_PASSWORD || process.env.EXPO_APPLE_ID_PASSWORD\n    : undefined;\n\n  if (process.env.EXPO_APPLE_ID_PASSWORD) {\n    Log.error('EXPO_APPLE_ID_PASSWORD is deprecated, please use EXPO_APPLE_PASSWORD instead!');\n  }\n\n  // partial apple id params were set, assume user has intention of passing it in\n  if (process.env.EXPO_APPLE_ID && !passedAppleIdPassword) {\n    throw new CommandError(\n      'In order to provide your Apple ID credentials, you must set the --apple-id flag and set the EXPO_APPLE_PASSWORD environment variable.'\n    );\n  }\n  return {\n    ...userCredentials,\n    username: passedAppleId,\n    password: passedAppleIdPassword,\n  };\n}\n\nasync function promptUsernameAsync(): Promise<string> {\n  Log.log('\\u203A Log in to your Apple Developer account to continue');\n\n  // Get the email address that was last used and set it as\n  // the default value for quicker authentication.\n  const lastAppleId = await getCachedUsernameAsync();\n\n  const { username } = await promptAsync({\n    type: 'text',\n    name: 'username',\n    message: `Apple ID:`,\n    validate: (val: string) => val !== '',\n    initial: lastAppleId ?? undefined,\n  });\n\n  if (username && username !== lastAppleId) {\n    await cacheUsernameAsync(username);\n  }\n\n  return username;\n}\n\nasync function cacheUsernameAsync(username: string): Promise<void> {\n  // If a new email was used then store it as a suggestion for next time.\n  // This functionality is disabled using the keychain mechanism.\n  if (!Keychain.EXPO_NO_KEYCHAIN && username) {\n    const cachedPath = JsonFileCache.usernameCachePath();\n    await JsonFileCache.cacheAsync(cachedPath, { username });\n  }\n}\n\nexport async function promptPasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<string> {\n  const cachedPassword = await getCachedPasswordAsync({ username });\n\n  if (cachedPassword) {\n    Log.log(`\\u203A Using password for ${username} from your local Keychain`);\n    Log.log(`  ${learnMore('https://docs.expo.dev/distribution/security#keychain')}`);\n    return cachedPassword;\n  }\n\n  // https://docs.expo.dev/distribution/security/#apple-developer-account-credentials\n  Log.log(\n    wrapAnsi(\n      chalk.bold(\n        `\\u203A The password is only used to authenticate with Apple and never stored on EAS servers`\n      ),\n      process.stdout.columns || 80\n    )\n  );\n  Log.log(`  ${learnMore('https://bit.ly/2VtGWhU')}`);\n\n  const { password } = await promptAsync({\n    type: 'password',\n    name: 'password',\n    message: () => `Password (for ${username}):`,\n    validate: (val: string) => val !== '',\n  });\n\n  // TODO: Save only after the auth completes successfully.\n  await cachePasswordAsync({ username, password });\n  return password;\n}\n\nasync function getCachedUsernameAsync(): Promise<string | null> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    // Clear last used apple ID.\n    await fs.remove(JsonFileCache.usernameCachePath());\n    return null;\n  }\n  const cached = await JsonFileCache.getCacheAsync(JsonFileCache.usernameCachePath());\n  const lastAppleId = cached?.username ?? null;\n  return typeof lastAppleId === 'string' ? lastAppleId : null;\n}\n\n/**\n * Returns the same prefix used by Fastlane in order to potentially share access between services.\n * [Cite. Fastlane](https://github.com/fastlane/fastlane/blob/f831062fa6f4b216b8ee38949adfe28fc11a0a8e/credentials_manager/lib/credentials_manager/account_manager.rb#L8).\n *\n * @param appleId email address\n */\nfunction getKeychainServiceName(appleId: string): string {\n  return `deliver.${appleId}`;\n}\n\nexport async function deletePasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<boolean> {\n  const serviceName = getKeychainServiceName(username);\n  const success = await Keychain.deletePasswordAsync({ username, serviceName });\n  if (success) {\n    Log.log('\\u203A Removed Apple ID password from the native Keychain');\n  }\n  return success;\n}\n\nasync function getCachedPasswordAsync({\n  username,\n}: Pick<Auth.UserCredentials, 'username'>): Promise<string | null> {\n  // If the user opts out, delete the password.\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    await deletePasswordAsync({ username });\n    return null;\n  }\n\n  const serviceName = getKeychainServiceName(username);\n  return Keychain.getPasswordAsync({ username, serviceName });\n}\n\nasync function cachePasswordAsync({ username, password }: Auth.UserCredentials): Promise<boolean> {\n  if (Keychain.EXPO_NO_KEYCHAIN) {\n    Log.log('\\u203A Skip storing Apple ID password in the local Keychain.');\n    return false;\n  }\n\n  Log.log(`\\u203A Saving Apple ID password to the local Keychain`);\n  Log.log(`  ${learnMore('https://docs.expo.dev/distribution/security#keychain')}`);\n  const serviceName = getKeychainServiceName(username);\n  return Keychain.setPasswordAsync({ username, password, serviceName });\n}\n"],"mappings":"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"}