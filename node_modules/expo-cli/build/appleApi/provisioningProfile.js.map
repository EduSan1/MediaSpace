{"version":3,"file":"provisioningProfile.js","names":["ProfileClass","resolveProfileType","profileClass","isEnterprise","Adhoc","ProfileType","IOS_APP_ADHOC","IOS_APP_INHOUSE","IOS_APP_STORE","transformProfileAsync","cert","authCtx","provisioningProfileId","id","name","attributes","status","profileState","expires","Date","expirationDate","getTime","distributionMethod","profileType","provisioningProfile","profileContent","certificates","getCertificatesAsync","map","transformCertificate","teamId","team","teamName","addCertificateToProfileAsync","context","serialNumber","profileId","bundleIdentifier","getCertificateBySerialNumberAsync","profiles","getProfilesForBundleIdAsync","profile","find","CommandError","regenerateAsync","useExistingProvisioningProfileAsync","distCert","certIdTag","certId","spinner","ora","start","distCertSerialNumber","findP12CertSerialNumber","certP12","certPassword","getRequestContext","content","result","succeed","error","fail","listProvisioningProfilesAsync","General","inHouse","filter","Promise","all","createProvisioningProfileAsync","profileName","certificate","bundleIdItem","getBundleIdForIdentifierAsync","Profile","createAsync","bundleId","devices","revokeProvisioningProfileAsync","deleteAsync","ProvisioningProfileManager","constructor","ctx","useExisting","list","create","revoke"],"sources":["../../src/appleApi/provisioningProfile.ts"],"sourcesContent":["import { Profile, ProfileType, RequestContext } from '@expo/apple-utils';\n\nimport CommandError from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\nimport { getBundleIdForIdentifierAsync, getProfilesForBundleIdAsync } from './bundleId';\nimport {\n  DistCert,\n  DistCertInfo,\n  getCertificateBySerialNumberAsync,\n  transformCertificate,\n} from './distributionCert';\nimport { findP12CertSerialNumber } from './p12Certificate';\n\nexport type ProvisioningProfileInfo = {\n  name: string;\n  status: string;\n  expires: number;\n  distributionMethod: string;\n  certificates: DistCertInfo[];\n} & ProvisioningProfile;\n\nexport type ProvisioningProfile = {\n  provisioningProfileId?: string;\n  provisioningProfile: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport enum ProfileClass {\n  Adhoc = 'ad_hoc',\n  General = 'general',\n}\n\nfunction resolveProfileType(profileClass: ProfileClass, isEnterprise?: boolean): ProfileType {\n  if (isEnterprise) {\n    return profileClass === ProfileClass.Adhoc\n      ? ProfileType.IOS_APP_ADHOC\n      : ProfileType.IOS_APP_INHOUSE;\n  } else {\n    return profileClass === ProfileClass.Adhoc\n      ? ProfileType.IOS_APP_ADHOC\n      : ProfileType.IOS_APP_STORE;\n  }\n}\n\nasync function transformProfileAsync(\n  cert: Profile,\n  authCtx: AppleCtx\n): Promise<ProvisioningProfileInfo> {\n  return {\n    provisioningProfileId: cert.id,\n    name: cert.attributes.name,\n    status: cert.attributes.profileState,\n    expires: new Date(cert.attributes.expirationDate).getTime() / 1000,\n    distributionMethod: cert.attributes.profileType,\n    // @ts-ignore -- this can be null when the profile has expired.\n    provisioningProfile: cert.attributes.profileContent,\n    certificates: (await cert.getCertificatesAsync()).map(transformCertificate),\n    teamId: authCtx.team.id,\n    teamName: authCtx.team.name,\n  };\n}\n\nasync function addCertificateToProfileAsync(\n  context: RequestContext,\n  {\n    serialNumber,\n    profileId,\n    bundleIdentifier,\n  }: {\n    serialNumber: string;\n    profileId: string;\n    bundleIdentifier: string;\n  }\n) {\n  const cert = await getCertificateBySerialNumberAsync(context, serialNumber);\n\n  const profiles = await getProfilesForBundleIdAsync(context, bundleIdentifier);\n  const profile = profiles.find(profile => profile.id === profileId);\n  if (!profile) {\n    throw new CommandError(\n      `Failed to find profile for bundle identifier \"${bundleIdentifier}\" with profile id \"${profileId}\"`\n    );\n  }\n\n  // Assign the new certificate\n  profile.attributes.certificates = [cert];\n  return await profile.regenerateAsync();\n}\n\nasync function useExistingProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  if (!provisioningProfile.provisioningProfileId) {\n    throw new CommandError('Provisioning profile: cannot use existing profile, insufficient id');\n  }\n  const certIdTag = distCert.certId ? ` (${distCert.certId})` : '';\n\n  const spinner = ora(\n    `Updating provisioning profile (${provisioningProfile.provisioningProfileId}) with distribution certificate${certIdTag}`\n  ).start();\n  try {\n    if (!distCert.distCertSerialNumber) {\n      distCert.distCertSerialNumber = findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n\n    const context = getRequestContext(authCtx);\n    const profile = await addCertificateToProfileAsync(context, {\n      serialNumber: distCert.distCertSerialNumber,\n      profileId: provisioningProfile.provisioningProfileId,\n      bundleIdentifier,\n    });\n    const content = profile.attributes.profileContent;\n    if (!content) {\n      // this should never happen because of the regen.\n      throw new CommandError(\n        `Provisioning profile \"${profile.attributes.name}\" (${profile.id}) is expired!`\n      );\n    }\n    const result = {\n      provisioningProfileId: profile.id,\n      provisioningProfile: content,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n    spinner.succeed(\n      `Updated provisioning profile (${profile.id}) with distribution certificate${certIdTag}`\n    );\n    return {\n      ...result,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error: any) {\n    spinner.fail(\n      `Failed to update provisioning profile (${provisioningProfile.provisioningProfileId}) with distribution certificate${certIdTag}`\n    );\n    throw error;\n  }\n}\n\nasync function listProvisioningProfilesAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<ProvisioningProfileInfo[]> {\n  const spinner = ora(`Fetching Apple provisioning profiles`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n    const profiles = (await getProfilesForBundleIdAsync(context, bundleIdentifier)).filter(\n      profile => profile.attributes.profileType === profileType\n    );\n\n    const result = await Promise.all(\n      profiles.map(profile => transformProfileAsync(profile, authCtx))\n    );\n\n    spinner.succeed(`Fetched Apple provisioning profiles`);\n    return result;\n  } catch (error: any) {\n    spinner.fail(`Failed to fetch Apple provisioning profiles`);\n    throw error;\n  }\n}\n\nasync function createProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  distCert: DistCert,\n  profileName: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<ProvisioningProfile> {\n  const spinner = ora(`Creating Apple provisioning profile`).start();\n  try {\n    if (!distCert.distCertSerialNumber) {\n      distCert.distCertSerialNumber = findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n\n    const context = getRequestContext(authCtx);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n\n    const certificate = await getCertificateBySerialNumberAsync(\n      context,\n      distCert.distCertSerialNumber\n    );\n\n    const bundleIdItem = await getBundleIdForIdentifierAsync(context, bundleIdentifier);\n\n    const profile = await Profile.createAsync(context, {\n      bundleId: bundleIdItem.id,\n      name: profileName,\n      certificates: [certificate.id],\n      devices: [],\n      profileType,\n    });\n\n    const result = await transformProfileAsync(profile, authCtx);\n\n    spinner.succeed('Created Apple provisioning profile');\n    return result;\n  } catch (error: any) {\n    spinner.fail('Failed to create Apple provisioning profile');\n    throw error;\n  }\n}\n\nasync function revokeProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  bundleIdentifier: string,\n  profileClass: ProfileClass = ProfileClass.General\n): Promise<void> {\n  const spinner = ora(`Revoking Apple provisioning profile`).start();\n  try {\n    const context = getRequestContext(authCtx);\n\n    const profiles = await getProfilesForBundleIdAsync(context, bundleIdentifier);\n    const profileType = resolveProfileType(profileClass, authCtx.team.inHouse);\n    await Promise.all(\n      profiles\n        .filter(profile => profile.attributes.profileType === profileType)\n        .map(profile => Profile.deleteAsync(context, { id: profile.id }))\n    );\n    spinner.succeed('Revoked Apple provisioning profile');\n  } catch (error: any) {\n    spinner.fail('Failed to revoke Apple provisioning profile');\n    throw error;\n  }\n}\n\nexport class ProvisioningProfileManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async useExisting<T extends DistCert>(\n    bundleIdentifier: string,\n    provisioningProfile: ProvisioningProfile,\n    distCert: T\n  ): Promise<ProvisioningProfile> {\n    return useExistingProvisioningProfileAsync(\n      this.ctx,\n      bundleIdentifier,\n      provisioningProfile,\n      distCert\n    );\n  }\n\n  async list(bundleIdentifier: string): Promise<ProvisioningProfileInfo[]> {\n    return listProvisioningProfilesAsync(this.ctx, bundleIdentifier);\n  }\n\n  async create<T extends DistCert>(\n    bundleIdentifier: string,\n    distCert: T,\n    profileName: string\n  ): Promise<ProvisioningProfile> {\n    return createProvisioningProfileAsync(this.ctx, bundleIdentifier, distCert, profileName);\n  }\n\n  async revoke(bundleIdentifier: string) {\n    return revokeProvisioningProfileAsync(this.ctx, bundleIdentifier);\n  }\n}\n"],"mappings":"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"}