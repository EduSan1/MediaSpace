{"version":3,"file":"provisioningProfileAdhoc.js","names":["uniqueItems","items","set","Set","registerMissingDevicesAsync","context","udids","allIosProfileDevices","Device","getAllIOSProfileDevicesAsync","alreadyAdded","filter","device","includes","attributes","udid","alreadyAddedUdids","map","i","Promise","all","createAsync","name","push","findProfileByBundleIdAsync","bundleId","certSerialNumber","expoProfiles","getProfilesForBundleIdAsync","profile","profileType","ProfileType","IOS_APP_ADHOC","startsWith","profileState","ProfileState","EXPIRED","expoProfilesWithCertificate","certificates","getCertificatesAsync","some","cert","serialNumber","sort","sortByExpiration","length","didUpdate","distributionCertificate","getDistributionCertificateAync","CommandError","regenerateAsync","a","b","Date","expirationDate","getTime","findProfileByIdAsync","profileId","profiles","find","id","manageAdHocProfilesAsync","devices","existingProfile","results","deviceUdidsInProfile","Boolean","allDeviceUdids","hasEqualUdids","every","isValid","result","profileName","provisioningProfileId","provisioningProfile","profileContent","updatedProfile","bundleIdItem","getBundleIdForIdentifierAsync","newProfile","Profile","now","didCreate","createOrReuseAdhocProvisioningProfileAsync","authCtx","bundleIdentifier","distCertSerialNumber","spinner","ora","start","getRequestContext","adhocProvisioningProfile","succeed","teamId","team","teamName","error","fail","ProvisioningProfileAdhocManager","constructor","ctx","createOrReuse"],"sources":["../../src/appleApi/provisioningProfileAdhoc.ts"],"sourcesContent":["import { Device, Profile, ProfileState, ProfileType, RequestContext } from '@expo/apple-utils';\n\nimport CommandError from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\nimport { getBundleIdForIdentifierAsync, getProfilesForBundleIdAsync } from './bundleId';\nimport { getDistributionCertificateAync } from './distributionCert';\nimport { ProvisioningProfile } from './provisioningProfile';\n\ninterface ProfileResults {\n  didUpdate?: boolean;\n  didCreate?: boolean;\n  profileName?: string;\n  provisioningProfileId: string;\n  provisioningProfile: any;\n}\n\nfunction uniqueItems<T = any>(items: T[]): T[] {\n  const set = new Set(items);\n  return [...set];\n}\n\nasync function registerMissingDevicesAsync(\n  context: RequestContext,\n  udids: string[]\n): Promise<Device[]> {\n  const allIosProfileDevices = await Device.getAllIOSProfileDevicesAsync(context);\n  const alreadyAdded = allIosProfileDevices.filter(device =>\n    udids.includes(device.attributes.udid)\n  );\n  const alreadyAddedUdids = alreadyAdded.map(i => i.attributes.udid);\n\n  await Promise.all(\n    udids.map(async udid => {\n      if (!alreadyAddedUdids.includes(udid)) {\n        const device = await Device.createAsync(context, {\n          name: 'iOS Device (added by Expo)',\n          udid,\n        });\n        alreadyAdded.push(device);\n      }\n    })\n  );\n\n  return alreadyAdded;\n}\n\nasync function findProfileByBundleIdAsync(\n  context: RequestContext,\n  bundleId: string,\n  certSerialNumber: string\n): Promise<{\n  profile: Profile | null;\n  didUpdate: boolean;\n}> {\n  const expoProfiles = (await getProfilesForBundleIdAsync(context, bundleId)).filter(profile => {\n    return (\n      profile.attributes.profileType === ProfileType.IOS_APP_ADHOC &&\n      profile.attributes.name.startsWith('*[expo]') &&\n      profile.attributes.profileState !== ProfileState.EXPIRED\n    );\n  });\n\n  const expoProfilesWithCertificate: Profile[] = [];\n  // find profiles associated with our development cert\n  for (const profile of expoProfiles) {\n    const certificates = await profile.getCertificatesAsync();\n    if (certificates.some(cert => cert.attributes.serialNumber === certSerialNumber)) {\n      expoProfilesWithCertificate.push(profile);\n    }\n  }\n\n  if (expoProfilesWithCertificate) {\n    // there is an expo managed profile with our desired certificate\n    // return the profile that will be valid for the longest duration\n    return {\n      profile: expoProfilesWithCertificate.sort(sortByExpiration)[\n        expoProfilesWithCertificate.length - 1\n      ],\n      didUpdate: false,\n    };\n  } else if (expoProfiles) {\n    // there is an expo managed profile, but it doesn't have our desired certificate\n    // append the certificate and update the profile\n    const distributionCertificate = await getDistributionCertificateAync(context, certSerialNumber);\n    if (!distributionCertificate) {\n      throw new CommandError(`Certificate for serial number \"${certSerialNumber}\" does not exist`);\n    }\n    const profile = expoProfiles.sort(sortByExpiration)[expoProfiles.length - 1];\n    profile.attributes.certificates = [distributionCertificate];\n    return { profile: await profile.regenerateAsync(), didUpdate: true };\n  }\n\n  // there is no valid provisioning profile available\n  return { profile: null, didUpdate: false };\n}\n\nfunction sortByExpiration(a: Profile, b: Profile): number {\n  return (\n    new Date(a.attributes.expirationDate).getTime() -\n    new Date(b.attributes.expirationDate).getTime()\n  );\n}\n\nasync function findProfileByIdAsync(\n  context: RequestContext,\n  profileId: string,\n  bundleId: string\n): Promise<Profile | null> {\n  let profiles = await getProfilesForBundleIdAsync(context, bundleId);\n  profiles = profiles.filter(\n    profile => profile.attributes.profileType === ProfileType.IOS_APP_ADHOC\n  );\n  return profiles.find(profile => profile.id === profileId) ?? null;\n}\n\nasync function manageAdHocProfilesAsync(\n  context: RequestContext,\n  {\n    udids,\n    bundleId,\n    certSerialNumber,\n    profileId,\n  }: {\n    udids: string[];\n    bundleId: string;\n    certSerialNumber: string;\n    profileId?: string;\n  }\n): Promise<ProfileResults> {\n  // We register all missing devices on the Apple Developer Portal. They are identified by UDIDs.\n  const devices = await registerMissingDevicesAsync(context, udids);\n\n  let existingProfile: Profile | null;\n  let didUpdate = false;\n\n  if (profileId) {\n    existingProfile = await findProfileByIdAsync(context, profileId, bundleId);\n    // Fail if we cannot find the profile that was specifically requested\n    if (!existingProfile)\n      throw new CommandError(\n        `Could not find profile with profile id \"${profileId}\" for bundle id \"${bundleId}\"`\n      );\n  } else {\n    // If no profile id is passed, try to find a suitable provisioning profile for the App ID.\n    const results = await findProfileByBundleIdAsync(context, bundleId, certSerialNumber);\n    existingProfile = results.profile;\n    didUpdate = results.didUpdate;\n  }\n\n  if (existingProfile) {\n    // We need to verify whether the existing profile includes all user's devices.\n    let deviceUdidsInProfile =\n      existingProfile?.attributes?.devices?.map?.(i => i.attributes.udid) ?? [];\n    deviceUdidsInProfile = uniqueItems(deviceUdidsInProfile.filter(Boolean));\n    const allDeviceUdids = uniqueItems(udids);\n    const hasEqualUdids =\n      deviceUdidsInProfile.length === allDeviceUdids.length &&\n      deviceUdidsInProfile.every(udid => allDeviceUdids.includes(udid));\n    if (hasEqualUdids && existingProfile.isValid()) {\n      const result: ProfileResults = {\n        profileName: existingProfile?.attributes?.name,\n        provisioningProfileId: existingProfile?.id,\n        provisioningProfile: existingProfile?.attributes.profileContent,\n      };\n      if (didUpdate) {\n        result.didUpdate = true;\n      }\n\n      return result;\n    }\n    // We need to add new devices to the list and create a new provisioning profile.\n    existingProfile.attributes.devices = devices;\n    await existingProfile.regenerateAsync();\n\n    const updatedProfile = (await findProfileByBundleIdAsync(context, bundleId, certSerialNumber))\n      .profile;\n    if (!updatedProfile) {\n      throw new CommandError(\n        `Failed to locate updated profile for bundle identifier \"${bundleId}\" and serial number \"${certSerialNumber}\"`\n      );\n    }\n    return {\n      didUpdate: true,\n      profileName: updatedProfile.attributes.name,\n      provisioningProfileId: updatedProfile.id,\n      provisioningProfile: updatedProfile.attributes.profileContent,\n    };\n  }\n\n  // No existing profile...\n\n  // We need to find user's distribution certificate to make a provisioning profile for it.\n  const distributionCertificate = await getDistributionCertificateAync(context, certSerialNumber);\n\n  if (!distributionCertificate) {\n    // If the distribution certificate doesn't exist, the user must have deleted it, we can't do anything here :(\n    throw new CommandError(\n      `No distribution certificate for serial number \"${certSerialNumber}\" is available to make a provisioning profile against`\n    );\n  }\n  const bundleIdItem = await getBundleIdForIdentifierAsync(context, bundleId);\n  // If the provisioning profile for the App ID doesn't exist, we just need to create a new one!\n  const newProfile = await Profile.createAsync(context, {\n    bundleId: bundleIdItem.id,\n    // apple drops [ if its the first char (!!),\n    name: `*[expo] ${bundleId} AdHoc ${Date.now()}`,\n    certificates: [distributionCertificate.id],\n    devices: devices.map(device => device.id),\n    profileType: ProfileType.IOS_APP_ADHOC,\n  });\n\n  return {\n    didUpdate: true,\n    didCreate: true,\n    profileName: newProfile.attributes.name,\n    provisioningProfileId: newProfile.id,\n    provisioningProfile: newProfile.attributes.profileContent,\n  };\n}\n\nasync function createOrReuseAdhocProvisioningProfileAsync(\n  authCtx: AppleCtx,\n  udids: string[],\n  bundleIdentifier: string,\n  distCertSerialNumber: string\n): Promise<ProvisioningProfile> {\n  const spinner = ora(`Handling Apple ad hoc provisioning profiles`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const {\n      didUpdate,\n      didCreate,\n      profileName,\n      ...adhocProvisioningProfile\n    } = await manageAdHocProfilesAsync(context, {\n      udids,\n      bundleId: bundleIdentifier,\n      certSerialNumber: distCertSerialNumber,\n    });\n\n    if (didCreate) {\n      spinner.succeed(`Created new profile: ${profileName}`);\n    } else if (didUpdate) {\n      spinner.succeed(`Updated existing profile: ${profileName}`);\n    } else {\n      spinner.succeed(`Used existing profile: ${profileName}`);\n    }\n\n    return {\n      ...adhocProvisioningProfile,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error: any) {\n    spinner.fail(`Failed to handle Apple profiles`);\n    throw error;\n  }\n}\n\nexport class ProvisioningProfileAdhocManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async createOrReuse(\n    udids: string[],\n    bundleIdentifier: string,\n    distCertSerialNumber: string\n  ): Promise<ProvisioningProfile> {\n    return createOrReuseAdhocProvisioningProfileAsync(\n      this.ctx,\n      udids,\n      bundleIdentifier,\n      distCertSerialNumber\n    );\n  }\n}\n"],"mappings":"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"}