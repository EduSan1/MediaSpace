{"version":3,"file":"distributionCert.js","names":["AppleTooManyCertsError","CommandError","getCertificateBySerialNumberAsync","context","serialNumber","cert","Certificate","getAsync","find","item","attributes","getDistributionCertificateAync","certificates","query","filter","certificateType","CertificateType","IOS_DISTRIBUTION","certificate","transformCertificate","id","name","status","created","Date","requestedDate","getTime","expires","expirationDate","ownerName","ownerId","listDistributionCertificatesAsync","authCtx","spinner","ora","start","getRequestContext","certs","DISTRIBUTION","MAC_APP_DISTRIBUTION","map","succeed","error","fail","createDistributionCertificateAsync","results","createCertificateAndP12Async","certId","certP12","certificateP12","certPassword","password","certPrivateSigningKey","privateSigningKey","distCertSerialNumber","teamId","team","teamName","test","message","ErrorCodes","APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","revokeDistributionCertificateAsync","ids","length","Promise","all","deleteAsync","isDistCert","obj","chalk","underline","DistCertManager","constructor","ctx","list","create","revoke","format","expiresDate","_formatTimestamp","createdDate","timestamp","dateformat"],"sources":["../../src/appleApi/distributionCert.ts"],"sourcesContent":["import {\n  Certificate,\n  CertificateType,\n  createCertificateAndP12Async,\n  RequestContext,\n} from '@expo/apple-utils';\nimport chalk from 'chalk';\nimport dateformat from 'dateformat';\n\nimport CommandError, { ErrorCodes } from '../CommandError';\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\n\nexport type DistCertInfo = {\n  id: string;\n  name: string;\n  status: string;\n  created: number;\n  expires: number;\n  ownerName: string;\n  ownerId: string;\n  serialNumber: string;\n};\n\nexport type DistCert = {\n  certId?: string;\n  certP12: string;\n  certPassword: string;\n  certPrivateSigningKey?: string;\n  distCertSerialNumber?: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport class AppleTooManyCertsError extends CommandError {}\n\nexport async function getCertificateBySerialNumberAsync(\n  context: RequestContext,\n  serialNumber: string\n): Promise<Certificate> {\n  const cert = (await Certificate.getAsync(context)).find(\n    item => item.attributes.serialNumber === serialNumber\n  );\n  if (!cert) {\n    throw new CommandError(`No certificate exists with serial number \"${serialNumber}\"`);\n  }\n  return cert;\n}\n\nexport async function getDistributionCertificateAync(\n  context: RequestContext,\n  serialNumber: string\n): Promise<Certificate | null> {\n  // At most, this returns 2 values.\n  const certificates = await Certificate.getAsync(context, {\n    query: {\n      filter: {\n        certificateType: CertificateType.IOS_DISTRIBUTION,\n      },\n    },\n  });\n  return (\n    certificates.find(certificate => certificate.attributes.serialNumber === serialNumber) ?? null\n  );\n}\n\nexport function transformCertificate(cert: Certificate): DistCertInfo {\n  return {\n    id: cert.id,\n    name: cert.attributes.name,\n    status: cert.attributes.status,\n    created: new Date(cert.attributes.requestedDate).getTime() / 1000,\n    expires: new Date(cert.attributes.expirationDate).getTime() / 1000,\n    ownerName: cert.attributes.ownerName,\n    ownerId: cert.attributes.ownerId,\n    serialNumber: cert.attributes.serialNumber,\n  };\n}\n\nexport async function listDistributionCertificatesAsync(\n  authCtx: AppleCtx\n): Promise<DistCertInfo[]> {\n  const spinner = ora(`Fetching Apple distribution certificates`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const certs = (\n      await Certificate.getAsync(context, {\n        query: {\n          filter: {\n            certificateType: [\n              CertificateType.DISTRIBUTION,\n              CertificateType.IOS_DISTRIBUTION,\n              CertificateType.MAC_APP_DISTRIBUTION,\n            ],\n          },\n        },\n      })\n    ).map(transformCertificate);\n    spinner.succeed(`Fetched Apple distribution certificates`);\n    return certs;\n  } catch (error: any) {\n    spinner.fail(`Failed to fetch Apple distribution certificates`);\n    throw error;\n  }\n}\n\n/**\n * Run from `eas credentials` -> iOS -> Add new Distribution Certificate\n */\nexport async function createDistributionCertificateAsync(authCtx: AppleCtx): Promise<DistCert> {\n  const spinner = ora(`Creating Apple distribution certificate`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    const results = await createCertificateAndP12Async(context, {\n      certificateType: CertificateType.IOS_DISTRIBUTION,\n    });\n    spinner.succeed(`Created Apple distribution certificate`);\n    return {\n      certId: results.certificate.id,\n      certP12: results.certificateP12,\n      certPassword: results.password,\n      certPrivateSigningKey: results.privateSigningKey,\n      distCertSerialNumber: results.certificate.attributes.serialNumber,\n      teamId: authCtx.team.id,\n      teamName: authCtx.team.name,\n    };\n  } catch (error: any) {\n    spinner.fail('Failed to create Apple distribution certificate');\n    // TODO: Move check into apple-utils\n    if (\n      /You already have a current .* certificate or a pending certificate request/.test(\n        error.message\n      )\n    ) {\n      throw new AppleTooManyCertsError(\n        ErrorCodes.APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR,\n        APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR\n      );\n    }\n    throw error;\n  }\n}\n\nexport async function revokeDistributionCertificateAsync(\n  authCtx: AppleCtx,\n  ids: string[]\n): Promise<void> {\n  const name = `Apple distribution certificate${ids?.length === 1 ? '' : 's'}`;\n  const spinner = ora(`Revoking ${name}`).start();\n  try {\n    const context = getRequestContext(authCtx);\n    await Promise.all(ids.map(id => Certificate.deleteAsync(context, { id })));\n\n    spinner.succeed(`Revoked ${name}`);\n  } catch (error: any) {\n    spinner.fail(`Failed to revoke ${name}`);\n    throw error;\n  }\n}\n\nexport function isDistCert(obj: { [key: string]: any }): obj is DistCert {\n  return (\n    obj.certP12 &&\n    typeof obj.certP12 === 'string' &&\n    obj.certPassword &&\n    typeof obj.certPassword === 'string' &&\n    obj.teamId &&\n    typeof obj.teamId === 'string'\n  );\n}\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class DistCertManager {\n  constructor(public ctx: AppleCtx) {}\n\n  async list(): Promise<DistCertInfo[]> {\n    return listDistributionCertificatesAsync(this.ctx);\n  }\n  async create(): Promise<DistCert> {\n    return createDistributionCertificateAsync(this.ctx);\n  }\n  async revoke(ids: string[]) {\n    return revokeDistributionCertificateAsync(this.ctx, ids);\n  }\n\n  format({ name, id, status, expires, created, ownerName }: DistCertInfo): string {\n    const expiresDate = _formatTimestamp(expires);\n    const createdDate = _formatTimestamp(created);\n    return `${name} (${status}) - ID: ${id} - expires: ${expiresDate} (created: ${createdDate}) - owner: ${ownerName}`;\n  }\n}\n\nfunction _formatTimestamp(timestamp: number): string {\n  return dateformat(new Date(timestamp * 1000));\n}\n"],"mappings":"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"}