{"version":3,"file":"ensureAppExists.js","names":["ensureBundleIdExistsAsync","authCtx","accountName","projectName","bundleIdentifier","options","ensureBundleIdExistsWithNameAsync","name","context","getRequestContext","spinner","ora","chalk","dim","start","bundleId","BundleId","findAsync","identifier","text","createAsync","succeed","err","message","match","fail","bold","team","id","assertContractMessagesAsync","updateBundleIdCapabilityAsync","capabilityType","CapabilityType","PUSH_NOTIFICATIONS","option","enablePushNotifications","CapabilityTypeOption","ON","OFF"],"sources":["../../src/appleApi/ensureAppExists.ts"],"sourcesContent":["import { BundleId, CapabilityType, CapabilityTypeOption } from '@expo/apple-utils';\nimport chalk from 'chalk';\n\nimport { ora } from '../utils/ora';\nimport { AppleCtx, getRequestContext } from './authenticate';\nimport { assertContractMessagesAsync } from './contractMessages';\n\nexport interface EnsureAppExistsOptions {\n  enablePushNotifications?: boolean;\n}\n\nexport interface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nexport async function ensureBundleIdExistsAsync(\n  authCtx: AppleCtx,\n  { accountName, projectName, bundleIdentifier }: AppLookupParams,\n  options?: EnsureAppExistsOptions\n) {\n  return ensureBundleIdExistsWithNameAsync(\n    authCtx,\n    {\n      name: `@${accountName}/${projectName}`,\n      bundleIdentifier,\n    },\n    options\n  );\n}\n\nexport async function ensureBundleIdExistsWithNameAsync(\n  authCtx: AppleCtx,\n  { name, bundleIdentifier }: { name: string; bundleIdentifier: string },\n  options?: EnsureAppExistsOptions\n) {\n  const context = getRequestContext(authCtx);\n  let spinner = ora(`Linking bundle identifier ${chalk.dim(bundleIdentifier)}`).start();\n\n  let bundleId: BundleId | null;\n  try {\n    // Get the bundle id\n    bundleId = await BundleId.findAsync(context, { identifier: bundleIdentifier });\n\n    if (!bundleId) {\n      spinner.text = `Registering bundle identifier ${chalk.dim(bundleIdentifier)}`;\n      // If it doesn't exist, create it\n      bundleId = await BundleId.createAsync(context, {\n        name,\n        identifier: bundleIdentifier,\n      });\n    }\n    spinner.succeed(`Bundle identifier registered ${chalk.dim(bundleIdentifier)}`);\n  } catch (err: any) {\n    if (err.message.match(/An App ID with Identifier '(.*)' is not available/)) {\n      spinner.fail(\n        `The bundle identifier ${chalk.bold(bundleIdentifier)} is not available to team \"${\n          authCtx.team.name\n        }\" (${authCtx.team.id}), please change it in your app config and try again.`\n      );\n    } else {\n      spinner.fail(`Failed to register bundle identifier ${chalk.dim(bundleIdentifier)}`);\n\n      // Assert contract errors for easier resolution when the user has an expired developer account.\n      if (err.message.match(/forbidden for security reasons/)) {\n        await assertContractMessagesAsync(context);\n      }\n    }\n\n    throw err;\n  }\n\n  if (options) {\n    try {\n      spinner = ora(`Syncing capabilities`).start();\n\n      // Update the capabilities\n      await bundleId.updateBundleIdCapabilityAsync({\n        capabilityType: CapabilityType.PUSH_NOTIFICATIONS,\n        option: options.enablePushNotifications\n          ? CapabilityTypeOption.ON\n          : CapabilityTypeOption.OFF,\n        // TODO: Add more capabilities\n      });\n      spinner.succeed(`Synced capabilities`);\n    } catch (err: any) {\n      spinner.fail(`Failed to sync capabilities ${chalk.dim(bundleIdentifier)}`);\n\n      throw err;\n    }\n  }\n}\n"],"mappings":"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"}