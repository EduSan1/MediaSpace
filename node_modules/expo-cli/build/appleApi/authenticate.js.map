{"version":3,"file":"authenticate.js","names":["APPLE_IN_HOUSE_TEAM_TYPE","getRequestContext","authCtx","assert","authState","context","loginAsync","userCredentials","options","cookies","session","Auth","loginWithCookiesAsync","username","password","resolveCredentialsAsync","resetInMemoryData","restoredSession","tryRestoringAuthStateFromUserCredentialsAsync","providerId","teamId","loginWithUserCredentialsAsync","error","InvalidUserCredentialsError","Log","message","deletePasswordAsync","toggleConfirmAsync","AbortCommandError","newSession","promptPasswordAsync","authenticateAsync","addNewLineIfNone","appleId","autoResolveProvider","teams","Teams","getTeamsAsync","team","find","fastlaneSession","Session","getSessionAsYAML","appleIdPassword","formatTeam","process","exit","log","chalk","red","name","type","id","inHouse","toLowerCase"],"sources":["../../src/appleApi/authenticate.ts"],"sourcesContent":["import {\n  Auth,\n  InvalidUserCredentialsError,\n  RequestContext,\n  Session,\n  Teams,\n} from '@expo/apple-utils';\nimport assert from 'assert';\nimport chalk from 'chalk';\n\nimport { AbortCommandError } from '../CommandError';\nimport Log from '../log';\nimport { toggleConfirmAsync } from '../utils/prompts';\nimport {\n  deletePasswordAsync,\n  promptPasswordAsync,\n  resolveCredentialsAsync,\n} from './resolveCredentials';\n\nconst APPLE_IN_HOUSE_TEAM_TYPE = 'in-house';\n\nexport type Options = {\n  appleId?: string;\n  teamId?: string;\n  /**\n   * Can be used to restore the Apple auth state via apple-utils.\n   */\n  cookies?: Session.AuthState['cookies'];\n};\n\nexport type Team = {\n  id: string;\n  name?: string;\n  inHouse?: boolean;\n};\n\nexport type AppleCtx = {\n  appleId: string;\n  appleIdPassword?: string;\n  team: Team;\n  /**\n   * Defined when using Fastlane\n   */\n  fastlaneSession?: string;\n  /**\n   * Can be used to restore the Apple auth state via apple-utils.\n   */\n  authState?: Session.AuthState;\n};\n\nexport function getRequestContext(authCtx: AppleCtx): RequestContext {\n  assert(authCtx.authState?.context, 'Apple request context must be defined');\n  return authCtx.authState.context;\n}\n\nasync function loginAsync(\n  userCredentials: Partial<Auth.UserCredentials> = {},\n  options: Auth.LoginOptions\n): Promise<Session.AuthState> {\n  // First try login with cookies JSON\n  if (userCredentials.cookies) {\n    const session = await Auth.loginWithCookiesAsync(userCredentials);\n    // If the session isn't valid, continue to the other authentication methods.\n    // Use `loginWithCookiesAsync` for a less resilient flow.\n    if (session) {\n      return session;\n    }\n  }\n\n  // Resolve the user credentials, optimizing for password-less login.\n  const { username, password } = await resolveCredentialsAsync(userCredentials);\n  assert(username);\n\n  // Clear data\n  Auth.resetInMemoryData();\n\n  try {\n    // Attempt to rehydrate the session.\n    const restoredSession = await Auth.tryRestoringAuthStateFromUserCredentialsAsync(\n      {\n        username,\n        providerId: userCredentials.providerId,\n        teamId: userCredentials.teamId,\n      },\n      options\n    );\n    if (restoredSession) {\n      // Completed authentication!\n      return { password, ...restoredSession };\n    }\n\n    return await loginWithUserCredentialsAsync({\n      username,\n      password,\n      providerId: userCredentials.providerId,\n      teamId: userCredentials.teamId,\n    });\n  } catch (error: any) {\n    if (error instanceof InvalidUserCredentialsError) {\n      Log.error(error.message);\n      // Remove the invalid password so it isn't automatically used...\n      await deletePasswordAsync({ username });\n\n      if (await toggleConfirmAsync({ message: 'Would you like to try again?' })) {\n        // Don't pass credentials back or the method will throw\n        return loginAsync(\n          {\n            teamId: userCredentials.teamId,\n            providerId: userCredentials.providerId,\n          },\n          options\n        );\n      } else {\n        throw new AbortCommandError();\n      }\n    }\n    throw error;\n  }\n}\n\nasync function loginWithUserCredentialsAsync({\n  username,\n  password,\n  teamId,\n  providerId,\n}: {\n  username: string;\n  password?: string;\n  teamId?: string;\n  providerId?: number;\n}) {\n  // Start a new login flow\n  const newSession = await Auth.loginWithUserCredentialsAsync({\n    username,\n    // If the session couldn't be restored, then prompt for the password (also check if it's stored in the keychain).\n    password: password || (await promptPasswordAsync({ username })),\n    providerId,\n    teamId,\n  });\n  // User cancelled or something.\n  assert(newSession, 'An unexpected error occurred while completing authentication');\n\n  // Success!\n  return newSession;\n}\n\nexport async function authenticateAsync(options: Options = {}): Promise<AppleCtx> {\n  // help keep apple login visually apart from the other operations.\n  Log.addNewLineIfNone();\n\n  try {\n    const authState = await loginAsync(\n      {\n        username: options.appleId,\n        cookies: options.cookies,\n        teamId: options.teamId,\n      },\n      {\n        // TODO: Provide a way to disable this for users who want to mix and match teams / providers.\n        autoResolveProvider: true,\n      }\n    );\n\n    // Currently, this is resolved once, inside the apple-utils package.\n    const teamId = authState.context.teamId!;\n    // Get all of the teams to resolve the rest of the user data.\n    // TODO: optimize this step.\n    const teams = await Teams.getTeamsAsync();\n    const team = teams.find(team => team.teamId === teamId);\n    assert(team, `Your account is not associated with Apple Team with ID: ${teamId}`);\n\n    // Get the JSON cookies in the custom YAML format used by Fastlane\n    const fastlaneSession = Session.getSessionAsYAML();\n    return {\n      appleId: authState.username,\n      appleIdPassword: authState.password,\n      team: formatTeam(team),\n      // Can be used to restore the auth state using apple-utils.\n      authState,\n      // Defined for legacy usage in Turtle V1 or any other places where Fastlane is used in the servers.\n      fastlaneSession,\n    };\n  } catch (error: any) {\n    if (error.message === 'ABORTED') {\n      process.exit(1);\n    }\n    Log.log(chalk.red('Authentication with Apple Developer Portal failed!'));\n    throw error;\n  }\n}\n\nfunction formatTeam({ teamId, name, type }: Teams.AppStoreTeam): Team {\n  return {\n    id: teamId,\n    name: `${name} (${type})`,\n    inHouse: type.toLowerCase() === APPLE_IN_HOUSE_TEAM_TYPE,\n  };\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAOA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAMA,MAAMA,wBAAwB,GAAG,UAAjC;;AA+BO,SAASC,iBAAT,CAA2BC,OAA3B,EAA8D;EAAA;;EACnE,IAAAC,iBAAA,wBAAOD,OAAO,CAACE,SAAf,uDAAO,mBAAmBC,OAA1B,EAAmC,uCAAnC;EACA,OAAOH,OAAO,CAACE,SAAR,CAAkBC,OAAzB;AACD;;AAED,eAAeC,UAAf,CACEC,eAA8C,GAAG,EADnD,EAEEC,OAFF,EAG8B;EAC5B;EACA,IAAID,eAAe,CAACE,OAApB,EAA6B;IAC3B,MAAMC,OAAO,GAAG,MAAMC,kBAAA,CAAKC,qBAAL,CAA2BL,eAA3B,CAAtB,CAD2B,CAE3B;IACA;;IACA,IAAIG,OAAJ,EAAa;MACX,OAAOA,OAAP;IACD;EACF,CAT2B,CAW5B;;;EACA,MAAM;IAAEG,QAAF;IAAYC;EAAZ,IAAyB,MAAM,IAAAC,6CAAA,EAAwBR,eAAxB,CAArC;EACA,IAAAJ,iBAAA,EAAOU,QAAP,EAb4B,CAe5B;;EACAF,kBAAA,CAAKK,iBAAL;;EAEA,IAAI;IACF;IACA,MAAMC,eAAe,GAAG,MAAMN,kBAAA,CAAKO,6CAAL,CAC5B;MACEL,QADF;MAEEM,UAAU,EAAEZ,eAAe,CAACY,UAF9B;MAGEC,MAAM,EAAEb,eAAe,CAACa;IAH1B,CAD4B,EAM5BZ,OAN4B,CAA9B;;IAQA,IAAIS,eAAJ,EAAqB;MACnB;MACA,OAAO;QAAEH,QAAF;QAAY,GAAGG;MAAf,CAAP;IACD;;IAED,OAAO,MAAMI,6BAA6B,CAAC;MACzCR,QADyC;MAEzCC,QAFyC;MAGzCK,UAAU,EAAEZ,eAAe,CAACY,UAHa;MAIzCC,MAAM,EAAEb,eAAe,CAACa;IAJiB,CAAD,CAA1C;EAMD,CArBD,CAqBE,OAAOE,KAAP,EAAmB;IACnB,IAAIA,KAAK,YAAYC,yCAArB,EAAkD;MAChDC,cAAA,CAAIF,KAAJ,CAAUA,KAAK,CAACG,OAAhB,EADgD,CAEhD;;;MACA,MAAM,IAAAC,yCAAA,EAAoB;QAAEb;MAAF,CAApB,CAAN;;MAEA,IAAI,MAAM,IAAAc,6BAAA,EAAmB;QAAEF,OAAO,EAAE;MAAX,CAAnB,CAAV,EAA2E;QACzE;QACA,OAAOnB,UAAU,CACf;UACEc,MAAM,EAAEb,eAAe,CAACa,MAD1B;UAEED,UAAU,EAAEZ,eAAe,CAACY;QAF9B,CADe,EAKfX,OALe,CAAjB;MAOD,CATD,MASO;QACL,MAAM,KAAIoB,iCAAJ,GAAN;MACD;IACF;;IACD,MAAMN,KAAN;EACD;AACF;;AAED,eAAeD,6BAAf,CAA6C;EAC3CR,QAD2C;EAE3CC,QAF2C;EAG3CM,MAH2C;EAI3CD;AAJ2C,CAA7C,EAUG;EACD;EACA,MAAMU,UAAU,GAAG,MAAMlB,kBAAA,CAAKU,6BAAL,CAAmC;IAC1DR,QAD0D;IAE1D;IACAC,QAAQ,EAAEA,QAAQ,KAAK,MAAM,IAAAgB,yCAAA,EAAoB;MAAEjB;IAAF,CAApB,CAAX,CAHwC;IAI1DM,UAJ0D;IAK1DC;EAL0D,CAAnC,CAAzB,CAFC,CASD;;EACA,IAAAjB,iBAAA,EAAO0B,UAAP,EAAmB,8DAAnB,EAVC,CAYD;;EACA,OAAOA,UAAP;AACD;;AAEM,eAAeE,iBAAf,CAAiCvB,OAAgB,GAAG,EAApD,EAA2E;EAChF;EACAgB,cAAA,CAAIQ,gBAAJ;;EAEA,IAAI;IACF,MAAM5B,SAAS,GAAG,MAAME,UAAU,CAChC;MACEO,QAAQ,EAAEL,OAAO,CAACyB,OADpB;MAEExB,OAAO,EAAED,OAAO,CAACC,OAFnB;MAGEW,MAAM,EAAEZ,OAAO,CAACY;IAHlB,CADgC,EAMhC;MACE;MACAc,mBAAmB,EAAE;IAFvB,CANgC,CAAlC,CADE,CAaF;;IACA,MAAMd,MAAM,GAAGhB,SAAS,CAACC,OAAV,CAAkBe,MAAjC,CAdE,CAeF;IACA;;IACA,MAAMe,KAAK,GAAG,MAAMC,mBAAA,CAAMC,aAAN,EAApB;IACA,MAAMC,IAAI,GAAGH,KAAK,CAACI,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAAClB,MAAL,KAAgBA,MAAnC,CAAb;IACA,IAAAjB,iBAAA,EAAOmC,IAAP,EAAc,2DAA0DlB,MAAO,EAA/E,EAnBE,CAqBF;;IACA,MAAMoB,eAAe,GAAGC,qBAAA,CAAQC,gBAAR,EAAxB;;IACA,OAAO;MACLT,OAAO,EAAE7B,SAAS,CAACS,QADd;MAEL8B,eAAe,EAAEvC,SAAS,CAACU,QAFtB;MAGLwB,IAAI,EAAEM,UAAU,CAACN,IAAD,CAHX;MAIL;MACAlC,SALK;MAML;MACAoC;IAPK,CAAP;EASD,CAhCD,CAgCE,OAAOlB,KAAP,EAAmB;IACnB,IAAIA,KAAK,CAACG,OAAN,KAAkB,SAAtB,EAAiC;MAC/BoB,OAAO,CAACC,IAAR,CAAa,CAAb;IACD;;IACDtB,cAAA,CAAIuB,GAAJ,CAAQC,gBAAA,CAAMC,GAAN,CAAU,oDAAV,CAAR;;IACA,MAAM3B,KAAN;EACD;AACF;;AAED,SAASsB,UAAT,CAAoB;EAAExB,MAAF;EAAU8B,IAAV;EAAgBC;AAAhB,CAApB,EAAsE;EACpE,OAAO;IACLC,EAAE,EAAEhC,MADC;IAEL8B,IAAI,EAAG,GAAEA,IAAK,KAAIC,IAAK,GAFlB;IAGLE,OAAO,EAAEF,IAAI,CAACG,WAAL,OAAuBtD;EAH3B,CAAP;AAKD"}