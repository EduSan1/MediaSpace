{"version":3,"file":"accounts.js","names":["UserManager","initialize","UserSecondFactorDeviceMethod","loginOrRegisterAsync","Log","warn","process","env","EXPO_CLI_USERNAME","EXPO_CLI_PASSWORD","login","username","password","program","nonInteractive","CommandError","name","question","type","message","choices","title","value","action","promptNew","openRegistrationInBrowser","newLine","log","chalk","bold","SilentError","loginOrRegisterIfLoggedOutAsync","user","getCurrentUserOnlyAsync","options","getCurrentUserAsync","silent","accessToken","parent","confirmAsync","green","_usernamePasswordAuth","otp","_promptForOTPAsync","cancelBehavior","enterMessage","otpQuestion","_promptForBackupOTPAsync","secondFactorDevices","nonPrimarySecondFactorDevices","filter","device","is_primary","length","hasAuthenticatorSecondFactorDevice","find","method","AUTHENTICATOR","smsNonPrimarySecondFactorDevices","SMS","authenticatorChoiceSentinel","cancelChoiceSentinel","deviceChoices","map","idx","sms_phone_number","push","selectedValue","selectAsync","apiAnonymous","ApiV2","clientForUser","postAsync","secondFactorDeviceID","id","_retryUsernamePasswordAuthWithOTPAsync","metadata","smsAutomaticallySent","assert","undefined","primaryDevice","nested","loginAsync","questions","format","val","trim","validate","nonEmptyInput","answers","data","e","ApiV2Error","code","Error","REGISTRATION_URL","spinner","ora","start","opened","openBrowserAsync","succeed","fail"],"sources":["../../../src/commands/auth/accounts.ts"],"sourcesContent":["import assert from 'assert';\nimport openBrowserAsync from 'better-opn';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport { ApiV2, User, UserManager } from 'xdl';\nimport { ApiV2Error } from 'xdl/build/ApiV2';\n\nimport CommandError, { SilentError } from '../../CommandError';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport promptNew, { confirmAsync, Question as NewQuestion, selectAsync } from '../../utils/prompts';\nimport { nonEmptyInput } from '../../utils/validators';\n\nUserManager.initialize();\n\nexport type CommandOptions = {\n  username?: string;\n  password?: string;\n  otp?: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport enum UserSecondFactorDeviceMethod {\n  AUTHENTICATOR = 'authenticator',\n  SMS = 'sms',\n}\n\nexport type SecondFactorDevice = {\n  id: string;\n  method: UserSecondFactorDeviceMethod;\n  sms_phone_number: string | null;\n  is_primary: boolean;\n};\n\nexport async function loginOrRegisterAsync(): Promise<User> {\n  Log.warn('An Expo user account is required to proceed.');\n\n  // Always try to auto-login when these variables are set, even in non-interactive mode\n  if (process.env.EXPO_CLI_USERNAME && process.env.EXPO_CLI_PASSWORD) {\n    return login({\n      username: process.env.EXPO_CLI_USERNAME,\n      password: process.env.EXPO_CLI_PASSWORD,\n    });\n  }\n\n  if (program.nonInteractive) {\n    throw new CommandError(\n      'NOT_LOGGED_IN',\n      `Not logged in. Use \\`${program.name()} login -u username -p password\\` to log in.`\n    );\n  }\n\n  const question: NewQuestion = {\n    type: 'select',\n    name: 'action',\n    message: 'How would you like to authenticate?',\n    choices: [\n      {\n        title: 'Make a new Expo account',\n        value: 'register',\n      },\n      {\n        title: 'Log in with an existing Expo account',\n        value: 'existingUser',\n      },\n      {\n        title: 'Cancel',\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const { action } = await promptNew(question);\n\n  if (action === 'register') {\n    openRegistrationInBrowser();\n    Log.newLine();\n    Log.log(\n      `Log in with ${chalk.bold(\n        'expo login'\n      )} after you have created your account through the website.`\n    );\n    throw new SilentError();\n  } else if (action === 'existingUser') {\n    return login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function loginOrRegisterIfLoggedOutAsync(): Promise<User> {\n  const user = await UserManager.getCurrentUserOnlyAsync();\n  if (user) {\n    return user;\n  }\n  return await loginOrRegisterAsync();\n}\n\nexport async function login(options: CommandOptions): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync({ silent: true });\n  if (user?.accessToken) {\n    throw new CommandError(\n      'ACCESS_TOKEN_ERROR',\n      'Please remove the EXPO_TOKEN environment var to login with a different user.'\n    );\n  }\n\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive) {\n    if (user) {\n      const action = await confirmAsync({\n        message: `You are already logged in as ${chalk.green(user.username)}. Log in as new user?`,\n      });\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return user as User;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && process.env.EXPO_CLI_PASSWORD) {\n    return _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD, options.otp);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\"\n    );\n  }\n}\n\n/**\n * Prompt for an OTP with the option to cancel the question by answering empty (pressing return key).\n */\nasync function _promptForOTPAsync(cancelBehavior: 'cancel' | 'menu'): Promise<string | null> {\n  const enterMessage =\n    cancelBehavior === 'cancel'\n      ? `press ${chalk.bold('Enter')} to cancel`\n      : `press ${chalk.bold('Enter')} for more options`;\n  const otpQuestion: NewQuestion = {\n    type: 'text',\n    name: 'otp',\n    message: `One-time password or backup code (${enterMessage}):`,\n  };\n\n  const { otp } = await promptNew(otpQuestion);\n  if (!otp) {\n    return null;\n  }\n\n  return otp;\n}\n\n/**\n * Prompt for user to choose a backup OTP method. If selected method is SMS, a request\n * for a new OTP will be sent to that method. Then, prompt for the OTP, and retry the user login.\n */\nasync function _promptForBackupOTPAsync(\n  username: string,\n  password: string,\n  secondFactorDevices: SecondFactorDevice[]\n): Promise<string | null> {\n  const nonPrimarySecondFactorDevices = secondFactorDevices.filter(device => !device.is_primary);\n\n  if (nonPrimarySecondFactorDevices.length === 0) {\n    throw new CommandError(\n      'LOGIN_CANCELLED',\n      'No other second-factor devices set up. Ensure you have set up and certified a backup device.'\n    );\n  }\n\n  const hasAuthenticatorSecondFactorDevice = nonPrimarySecondFactorDevices.find(\n    device => device.method === UserSecondFactorDeviceMethod.AUTHENTICATOR\n  );\n\n  const smsNonPrimarySecondFactorDevices = nonPrimarySecondFactorDevices.filter(\n    device => device.method === UserSecondFactorDeviceMethod.SMS\n  );\n\n  const authenticatorChoiceSentinel = -1;\n  const cancelChoiceSentinel = -2;\n\n  const deviceChoices = smsNonPrimarySecondFactorDevices.map((device, idx) => ({\n    title: device.sms_phone_number!,\n    value: idx,\n  }));\n\n  if (hasAuthenticatorSecondFactorDevice) {\n    deviceChoices.push({\n      title: 'Authenticator',\n      value: authenticatorChoiceSentinel,\n    });\n  }\n\n  deviceChoices.push({\n    title: 'Cancel',\n    value: cancelChoiceSentinel,\n  });\n\n  const question = {\n    message: 'Select a second-factor device:',\n    choices: deviceChoices,\n  };\n\n  const selectedValue = await selectAsync(question);\n  if (selectedValue === cancelChoiceSentinel) {\n    return null;\n  } else if (selectedValue === authenticatorChoiceSentinel) {\n    return await _promptForOTPAsync('cancel');\n  }\n\n  const device = smsNonPrimarySecondFactorDevices[selectedValue];\n\n  const apiAnonymous = ApiV2.clientForUser();\n  await apiAnonymous.postAsync('auth/send-sms-otp', {\n    username,\n    password,\n    secondFactorDeviceID: device.id,\n  });\n\n  return await _promptForOTPAsync('cancel');\n}\n\n/**\n * Handle the special case error indicating that a second-factor is required for\n * authentication.\n *\n * There are three cases we need to handle:\n * 1. User's primary second-factor device was SMS, OTP was automatically sent by the server to that\n *    device already. In this case we should just prompt for the SMS OTP (or backup code), which the\n *    user should be receiving shortly. We should give the user a way to cancel and the prompt and move\n *    to case 3 below.\n * 2. User's primary second-factor device is authenticator. In this case we should prompt for authenticator\n *    OTP (or backup code) and also give the user a way to cancel and move to case 3 below.\n * 3. User doesn't have a primary device or doesn't have access to their primary device. In this case\n *    we should show a picker of the SMS devices that they can have an OTP code sent to, and when\n *    the user picks one we show a prompt() for the sent OTP.\n */\nexport async function _retryUsernamePasswordAuthWithOTPAsync(\n  username: string,\n  password: string,\n  metadata: {\n    secondFactorDevices?: SecondFactorDevice[];\n    smsAutomaticallySent?: boolean;\n  }\n): Promise<User> {\n  const { secondFactorDevices, smsAutomaticallySent } = metadata;\n  assert(\n    secondFactorDevices !== undefined && smsAutomaticallySent !== undefined,\n    `Malformed OTP error metadata: ${metadata}`\n  );\n\n  const primaryDevice = secondFactorDevices.find(device => device.is_primary);\n  let otp: string | null = null;\n\n  if (smsAutomaticallySent) {\n    assert(primaryDevice, 'OTP should only automatically be sent when there is a primary device');\n    Log.nested(\n      `One-time password was sent to the phone number ending in ${primaryDevice.sms_phone_number}.`\n    );\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  if (primaryDevice?.method === UserSecondFactorDeviceMethod.AUTHENTICATOR) {\n    Log.nested('One-time password from authenticator required.');\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  // user bailed on case 1 or 2, wants to move to case 3\n  if (!otp) {\n    otp = await _promptForBackupOTPAsync(username, password, secondFactorDevices);\n  }\n\n  if (!otp) {\n    throw new CommandError('LOGIN_CANCELLED', 'Cancelled login');\n  }\n\n  return await UserManager.loginAsync('user-pass', {\n    username,\n    password,\n    otp,\n  });\n}\n\nasync function _usernamePasswordAuth(\n  username?: string,\n  password?: string,\n  otp?: string\n): Promise<User> {\n  const questions: NewQuestion[] = [];\n  if (!username) {\n    questions.push({\n      type: 'text',\n      name: 'username',\n      message: 'Username/Email Address:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  const answers = await promptNew(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n    otp: otp || answers.otp,\n  };\n\n  let user: User;\n  try {\n    user = await UserManager.loginAsync('user-pass', data);\n  } catch (e: any) {\n    if (e instanceof ApiV2Error && e.code === 'ONE_TIME_PASSWORD_REQUIRED') {\n      user = await _retryUsernamePasswordAuthWithOTPAsync(\n        data.username,\n        data.password,\n        e.metadata as any\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  if (user) {\n    Log.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport const REGISTRATION_URL = `https://expo.dev/signup`;\n\nexport async function openRegistrationInBrowser() {\n  const spinner = ora(`Opening ${REGISTRATION_URL}...`).start();\n  const opened = await openBrowserAsync(REGISTRATION_URL);\n\n  if (opened) {\n    spinner.succeed(`Opened ${REGISTRATION_URL} in your web browser.`);\n  } else {\n    spinner.fail(\n      `Unable to open a web browser. Please open your browser and navigate to ${REGISTRATION_URL}.`\n    );\n  }\n}\n"],"mappings":"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"}