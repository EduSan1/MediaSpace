{"version":3,"file":"validateDependenciesVersions.js","names":["validateDependenciesVersionsAsync","projectRoot","exp","pkg","fixDependencies","Versions","gteSdkVersion","bundledNativeModules","assert","sdkVersion","getBundledNativeModulesAsync","Log","warn","chalk","bold","packagesToCheck","getPackagesToCheck","dependencies","packageVersions","resolvePackageVersionsAsync","incorrectDeps","findIncorrectDependencies","length","forEach","packageName","expectedVersionOrRange","actualVersion","underline","actionAsync","map","dep","inverse","dependencyNames","Object","keys","result","dependencyName","push","packages","packageVersionsFromPackageJSON","Promise","all","getPackageVersionAsync","reduce","acc","idx","packageJsonPath","resolveFrom","error","code","message","match","CommandError","packageJson","JsonFile","readAsync","version","semver","intersects"],"sources":["../../../src/commands/utils/validateDependenciesVersions.ts"],"sourcesContent":["import { ExpoConfig, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\nimport { Versions } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { actionAsync } from '../installAsync';\nimport { BundledNativeModules, getBundledNativeModulesAsync } from './bundledNativeModules';\n\nexport async function validateDependenciesVersionsAsync(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'sdkVersion'>,\n  pkg: PackageJSONConfig,\n  fixDependencies: boolean = false\n): Promise<boolean> {\n  // expo package for SDK < 33.0.0 does not have bundledNativeModules.json\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return false;\n  }\n\n  let bundledNativeModules: BundledNativeModules | null = null;\n  try {\n    assert(exp.sdkVersion);\n    bundledNativeModules = await getBundledNativeModulesAsync(\n      projectRoot,\n      // sdkVersion is defined here because we ran the >= 33.0.0 check before\n      exp.sdkVersion\n    );\n  } catch {\n    Log.warn(\n      `Your project uses Expo SDK version >= 33.0.0, but the ${chalk.bold(\n        'expo'\n      )} package version seems to be older.`\n    );\n    return false;\n  }\n\n  // intersection of packages from package.json and bundled native modules\n  const packagesToCheck = getPackagesToCheck(pkg.dependencies, bundledNativeModules);\n  // read package versions from the file system (node_modules)\n  const packageVersions = await resolvePackageVersionsAsync(projectRoot, packagesToCheck);\n  // find incorrect dependencies by comparing the actual package versions with the bundled native module version ranges\n  const incorrectDeps = findIncorrectDependencies(packageVersions, bundledNativeModules);\n\n  if (incorrectDeps.length > 0) {\n    Log.warn('Some dependencies are incompatible with the installed expo package version:');\n    incorrectDeps.forEach(({ packageName, expectedVersionOrRange, actualVersion }) => {\n      Log.warn(\n        ` - ${chalk.underline(packageName)} - expected version: ${chalk.underline(\n          expectedVersionOrRange\n        )} - actual version installed: ${chalk.underline(actualVersion)}`\n      );\n    });\n    if (fixDependencies) {\n      await actionAsync(\n        incorrectDeps.map(dep => dep.packageName),\n        {}\n      );\n    } else {\n      Log.warn(\n        'Your project may not work correctly until you install the correct versions of the packages.\\n' +\n          `To install the correct versions of these packages, please run: ${chalk.inverse(\n            'expo doctor --fix-dependencies'\n          )},\\n` +\n          `or install individual packages by running ${chalk.inverse(\n            'expo install [package-name ...]'\n          )}`\n      );\n    }\n\n    return false;\n  }\n  return true;\n}\n\nfunction getPackagesToCheck(\n  dependencies: Record<string, string> | null | undefined,\n  bundledNativeModules: BundledNativeModules\n): string[] {\n  const dependencyNames = Object.keys(dependencies ?? {});\n  const result: string[] = [];\n  for (const dependencyName of dependencyNames) {\n    if (dependencyName in bundledNativeModules) {\n      result.push(dependencyName);\n    }\n  }\n  return result;\n}\n\nasync function resolvePackageVersionsAsync(\n  projectRoot: string,\n  packages: string[]\n): Promise<Record<string, string>> {\n  const packageVersionsFromPackageJSON = await Promise.all(\n    packages.map(packageName => getPackageVersionAsync(projectRoot, packageName))\n  );\n  return packages.reduce((acc, packageName, idx) => {\n    acc[packageName] = packageVersionsFromPackageJSON[idx];\n    return acc;\n  }, {} as Record<string, string>);\n}\n\nasync function getPackageVersionAsync(projectRoot: string, packageName: string): Promise<string> {\n  let packageJsonPath: string | undefined;\n  try {\n    packageJsonPath = resolveFrom(projectRoot, `${packageName}/package.json`);\n  } catch (error: any) {\n    // This is a workaround for packages using `exports`. If this doesn't\n    // include `package.json`, we have to use the error message to get the location.\n    if (error.code === 'ERR_PACKAGE_PATH_NOT_EXPORTED') {\n      packageJsonPath = error.message.match(/(\"exports\"|defined) in (.*)$/i)?.[2];\n    }\n  }\n  if (!packageJsonPath) {\n    throw new CommandError(\n      `\"${packageName}\" is added as a dependency in your project's package.json but it doesn't seem to be installed. Please run \"yarn\" or \"npm install\" to fix this issue.`\n    );\n  }\n  const packageJson = await JsonFile.readAsync<BundledNativeModules>(packageJsonPath);\n  return packageJson.version;\n}\n\ninterface IncorrectDependency {\n  packageName: string;\n  expectedVersionOrRange: string;\n  actualVersion: string;\n}\n\nfunction findIncorrectDependencies(\n  packageVersions: Record<string, string>,\n  bundledNativeModules: BundledNativeModules\n): IncorrectDependency[] {\n  const packages = Object.keys(packageVersions);\n  const incorrectDeps: IncorrectDependency[] = [];\n  for (const packageName of packages) {\n    const expectedVersionOrRange = bundledNativeModules[packageName];\n    const actualVersion = packageVersions[packageName];\n    if (\n      typeof expectedVersionOrRange === 'string' &&\n      !semver.intersects(expectedVersionOrRange, actualVersion)\n    ) {\n      incorrectDeps.push({\n        packageName,\n        expectedVersionOrRange,\n        actualVersion,\n      });\n    }\n  }\n  return incorrectDeps;\n}\n"],"mappings":"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"}