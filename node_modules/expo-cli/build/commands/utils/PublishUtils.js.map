{"version":3,"file":"PublishUtils.js","names":["VERSION","getPublishHistoryAsync","projectRoot","options","count","isNaN","Error","user","UserManager","ensureLoggedInAsync","exp","getConfig","skipSDKVersionRequirement","api","ApiV2","clientForUser","postAsync","owner","getProjectOwner","slug","version","releaseChannel","platform","sdkVersion","runtimeVersion","setPublishToChannelAsync","publishId","_rollbackPublicationFromChannelForPlatformAsync","historyQueryResult","history","queryResult","length","secondMostRecent","nonInteractiveOptions","parent","_printAndConfirm","publicationId","revertProgress","ora","start","succeed","rollbackPublicationFromChannelAsync","restOfTheOptions","platforms","completedPlatforms","push","e","Log","error","filter","includes","channel","partialOptions","detailOptions","detail","getPublicationDetailAsync","printPublicationDetailAsync","nonInteractive","confirm","confirmAsync","message","result","raw","log","JSON","stringify","manifest","generalTableString","table","printTableJson","manifestTableString"],"sources":["../../../src/commands/utils/PublishUtils.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport { ApiV2, UserManager } from 'xdl';\n\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport * as table from './cli-table';\n\nexport type HistoryOptions = {\n  releaseChannel?: string;\n  count?: number;\n  platform?: 'android' | 'ios';\n  raw?: boolean;\n  sdkVersion?: string;\n  runtimeVersion?: string;\n};\n\nexport type DetailOptions = {\n  publishId?: string;\n  raw?: boolean;\n};\n\nexport type SetOptions = { releaseChannel: string; publishId: string };\n\nexport type RollbackOptions = {\n  releaseChannel: string;\n  sdkVersion: string;\n  runtimeVersion?: string;\n  platform?: 'android' | 'ios';\n  parent?: { nonInteractive?: boolean };\n};\n\nexport type Publication = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  runtimeVersion?: string;\n  publishedTime: string;\n  platform: 'android' | 'ios';\n};\n\nexport type PublicationDetail = {\n  manifest?: {\n    [key: string]: string;\n  };\n  publishedTime: string;\n  publishingUsername: string;\n  packageUsername: string;\n  packageName: string;\n  fullName: string;\n  hash: string;\n  sdkVersion: string;\n  runtimeVersion?: string;\n  s3Key: string;\n  s3Url: string;\n  abiVersion: string | null;\n  bundleUrl: string | null;\n  platform: string;\n  version: string;\n  revisionId: string;\n  channels: { [key: string]: string }[];\n  publicationId: string;\n};\n\nconst VERSION = 2;\n\nexport async function getPublishHistoryAsync(\n  projectRoot: string,\n  options: HistoryOptions\n): Promise<any> {\n  if (options.count && (isNaN(options.count) || options.count < 1 || options.count > 100)) {\n    throw new Error('-n must be a number between 1 and 100 inclusive');\n  }\n\n  // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.postAsync('publish/history', {\n    owner: UserManager.getProjectOwner(user, exp),\n    slug: exp.slug,\n    version: VERSION,\n    releaseChannel: options.releaseChannel,\n    count: options.count,\n    platform: options.platform,\n    sdkVersion: options.sdkVersion,\n    runtimeVersion: options.runtimeVersion,\n  });\n}\n\nexport async function setPublishToChannelAsync(\n  projectRoot: string,\n  options: SetOptions\n): Promise<any> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n  return await api.postAsync('publish/set', {\n    releaseChannel: options.releaseChannel,\n    publishId: options.publishId,\n    slug: exp.slug,\n  });\n}\n\nasync function _rollbackPublicationFromChannelForPlatformAsync(\n  projectRoot: string,\n  platform: 'android' | 'ios',\n  options: Omit<RollbackOptions, 'platform'>\n) {\n  const { releaseChannel, sdkVersion, runtimeVersion } = options;\n  // get the 2 most recent things in the channel history\n  const historyQueryResult = await getPublishHistoryAsync(projectRoot, {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    runtimeVersion,\n    count: 2,\n  });\n\n  const history = historyQueryResult.queryResult as Publication[];\n  if (history.length === 0) {\n    throw new Error(\n      `There isn't anything published for release channel: ${releaseChannel}, sdk version: ${sdkVersion}, platform: ${platform}`\n    );\n  } else if (history.length === 1) {\n    throw new Error(\n      `There is only 1 publication for release channel: ${releaseChannel}, sdk version: ${sdkVersion}, platform: ${platform}. There won't be anything for users to receive if we rollback.`\n    );\n  }\n\n  // The second most recent publication in the history\n  const secondMostRecent = history[history.length - 1];\n\n  const nonInteractiveOptions = options.parent ? { parent: options.parent } : {};\n  // confirm that users will be receiving the secondMostRecent item in the Publish history\n  await _printAndConfirm(\n    projectRoot,\n    secondMostRecent.publicationId,\n    releaseChannel,\n    platform,\n    nonInteractiveOptions\n  );\n\n  // apply the revert publication to channel\n  const revertProgress = ora(\n    `${platform}: Applying a revert publication to channel ${releaseChannel}`\n  ).start();\n  await setPublishToChannelAsync(projectRoot, {\n    releaseChannel,\n    publishId: secondMostRecent.publicationId,\n  });\n  revertProgress.succeed(\n    `${platform}: Successfully applied revert publication. You can view it with \\`publish:history\\``\n  );\n}\n\nexport async function rollbackPublicationFromChannelAsync(\n  projectRoot: string,\n  options: RollbackOptions\n) {\n  const { platform, ...restOfTheOptions } = options;\n\n  if (platform) {\n    return await _rollbackPublicationFromChannelForPlatformAsync(\n      projectRoot,\n      platform,\n      restOfTheOptions\n    );\n  }\n\n  const platforms = ['android', 'ios'] as ('android' | 'ios')[];\n  const completedPlatforms = [] as ('android' | 'ios')[];\n  try {\n    for (const platform of platforms) {\n      await _rollbackPublicationFromChannelForPlatformAsync(\n        projectRoot,\n        platform,\n        restOfTheOptions\n      );\n      completedPlatforms.push(platform);\n    }\n  } catch (e: any) {\n    if (completedPlatforms.length > 0) {\n      Log.error(\n        `The platforms ${platforms.filter(\n          platform => !completedPlatforms.includes(platform)\n        )} have not been rolled back. You can complete the missing platforms by running \\`expo publish:rollback\\` with the --platform flag`\n      );\n    }\n    throw e;\n  }\n}\n\nasync function _printAndConfirm(\n  projectRoot: string,\n  publicationId: string,\n  channel: string,\n  platform: string,\n  partialOptions: { parent?: { nonInteractive?: boolean } }\n): Promise<void> {\n  const detailOptions = {\n    publishId: publicationId,\n  };\n  const detail = await getPublicationDetailAsync(projectRoot, detailOptions);\n  await printPublicationDetailAsync(detail, detailOptions);\n\n  if (partialOptions.parent && partialOptions.parent.nonInteractive) {\n    return;\n  }\n  const confirm = await confirmAsync({\n    message: `${platform}: Users on the '${channel}' channel will receive the above publication as a result of the rollback.`,\n  });\n\n  if (!confirm) {\n    throw new Error(`You can run 'publish:set' to send the desired publication to users`);\n  }\n}\n\nexport async function getPublicationDetailAsync(\n  projectRoot: string,\n  options: DetailOptions\n): Promise<PublicationDetail> {\n  // TODO(ville): handle the API result for not authenticated user instead of checking upfront\n  const user = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('publish/details', {\n    owner: UserManager.getProjectOwner(user, exp),\n    publishId: options.publishId,\n    slug: exp.slug,\n  });\n\n  if (!result.queryResult) {\n    throw new Error('No records found matching your query.');\n  }\n\n  return result.queryResult;\n}\n\nexport async function printPublicationDetailAsync(\n  detail: PublicationDetail,\n  options: DetailOptions\n) {\n  if (options.raw) {\n    Log.log(JSON.stringify(detail));\n    return;\n  }\n\n  const manifest = detail.manifest;\n  delete detail.manifest;\n\n  // Print general release info\n  const generalTableString = table.printTableJson(detail, 'Release Description');\n  Log.log(generalTableString);\n\n  if (manifest) {\n    // Print manifest info\n    const manifestTableString = table.printTableJson(manifest, 'Manifest Details');\n    Log.log(manifestTableString);\n  }\n}\n"],"mappings":"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"}