{"version":3,"file":"ProjectUtils.js","names":["findProjectRootAsync","base","previous","dir","pkg","JsonFile","readAsync","path","join","hasReactNativeUnimodules","dependencies","hasOwnProperty","hasExpo","isManaged","workflow","projectRoot","dirname","CommandError","hasExpoUpdatesInstalledAsync","pkgPath","pkgExists","fs","existsSync","getAsync","usesOldExpoUpdatesAsync","version","coercedVersion","semver","coerce","satisfies","validateGitStatusAsync","workingTreeStatus","result","spawnAsync","stdout","Log","nested","chalk","green","bold","red"],"sources":["../../../src/commands/utils/ProjectUtils.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\n\nexport async function findProjectRootAsync(\n  base: string\n): Promise<{ projectRoot: string; workflow: 'managed' | 'bare' }> {\n  let previous = null;\n  let dir = base;\n\n  do {\n    try {\n      // This will throw if there is no package.json in the directory\n      const pkg = await JsonFile.readAsync(path.join(dir, 'package.json'));\n      const hasReactNativeUnimodules = pkg.dependencies?.hasOwnProperty('react-native-unimodules');\n      const hasExpo = pkg.dependencies?.hasOwnProperty('expo');\n      const isManaged = hasExpo && !hasReactNativeUnimodules;\n      const workflow = isManaged ? 'managed' : 'bare';\n\n      return { projectRoot: dir, workflow };\n    } catch {\n      // Expected to throw if no package.json is present\n    } finally {\n      previous = dir;\n      dir = path.dirname(dir);\n    }\n  } while (dir !== previous);\n\n  throw new CommandError(\n    'NO_PROJECT',\n    'No managed or bare projects found. Please make sure you are inside a project folder.'\n  );\n}\n\n/** Returns true if `expo-updates` is in the `package.json` dependencies. */\nexport async function hasExpoUpdatesInstalledAsync(projectRoot: string): Promise<boolean> {\n  const pkgPath = path.join(projectRoot, 'package.json');\n  const pkgExists = fs.existsSync(pkgPath);\n\n  if (!pkgExists) {\n    return false;\n  }\n\n  const dependencies = await JsonFile.getAsync(pkgPath, 'dependencies', {});\n  return !!dependencies['expo-updates'];\n}\n\n// If we get here and can't find expo-updates or package.json we just assume\n// that we are not using the old expo-updates\nexport async function usesOldExpoUpdatesAsync(projectRoot: string): Promise<boolean> {\n  const pkgPath = path.join(projectRoot, 'package.json');\n  const pkgExists = fs.existsSync(pkgPath);\n\n  if (!pkgExists) {\n    return false;\n  }\n\n  const dependencies = await JsonFile.getAsync(pkgPath, 'dependencies', {});\n  if (!dependencies['expo-updates']) {\n    return false;\n  }\n\n  const version = dependencies['expo-updates'] as string;\n  const coercedVersion = semver.coerce(version);\n  if (coercedVersion && semver.satisfies(coercedVersion, '~0.1.0')) {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    Log.nested(`Your git working tree is ${chalk.green('clean')}`);\n    Log.nested('To revert the changes after this command completes, you can run the following:');\n    Log.nested('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    Log.nested(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    Log.nested(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    Log.nested(\"We couldn't find a git repository in your project directory.\");\n    Log.nested(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"mappings":"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"}