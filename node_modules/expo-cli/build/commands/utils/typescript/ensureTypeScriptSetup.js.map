{"version":3,"file":"ensureTypeScriptSetup.js","names":["ensureTypeScriptSetupAsync","projectRoot","isTypeScriptSetupDisabled","Log","log","chalk","dim","tsConfigPath","path","join","intent","shouldSetupTypeScriptAsync","ensureRequiredDependenciesAsync","program","nonInteractive","updateTSConfigAsync","isBootstrapping","hasTSConfig","content","fs","readFile","encoding","then","txt","trim","isBlankConfig","typescriptFile","profileMethod","queryFirstProjectTypeScriptFileAsync","getSDKVersionsAsync","exp","getConfig","skipSDKVersionRequirement","sdkVersion","sdkVersions","Versions","releasedSdkVersionsAsync","skipPrompt","resolutions","missing","collectMissingPackages","length","typescript","versions","relatedPackages","pkg","version","readableMissingPackages","map","p","isYarn","PackageManager","isUsingYarn","title","confirmAsync","message","wrapAnsi","cyan","process","stdout","columns","initial","installPackagesAsync","devPackages","col","installCommand","disableMessage","solution","bold","reset","CommandError","packageManager","createForProject","yarn","silent","isDebug","packagesStr","newLine","installingPackageStep","logNewSection","addDevAsync","e","fail","succeed"],"sources":["../../../../src/commands/utils/typescript/ensureTypeScriptSetup.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport wrapAnsi from 'wrap-ansi';\nimport { Versions } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { logNewSection } from '../../../utils/ora';\nimport { confirmAsync } from '../../../utils/prompts';\nimport { profileMethod } from '../profileMethod';\nimport {\n  collectMissingPackages,\n  hasTSConfig,\n  queryFirstProjectTypeScriptFileAsync,\n} from './resolveModules';\nimport { isTypeScriptSetupDisabled, updateTSConfigAsync } from './updateTSConfig';\n\nexport async function ensureTypeScriptSetupAsync(projectRoot: string): Promise<void> {\n  if (isTypeScriptSetupDisabled) {\n    Log.log(chalk.dim('\\u203A Skipping TypeScript verification'));\n    return;\n  }\n\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n\n  // Ensure the project is TypeScript before continuing.\n  const intent = await shouldSetupTypeScriptAsync(projectRoot);\n  if (!intent) {\n    return;\n  }\n\n  // Ensure TypeScript packages are installed\n  await ensureRequiredDependenciesAsync(\n    projectRoot,\n    // Don't prompt in CI\n    program.nonInteractive\n  );\n\n  // Update the config\n  await updateTSConfigAsync({ projectRoot, tsConfigPath, isBootstrapping: intent.isBootstrapping });\n}\n\nexport async function shouldSetupTypeScriptAsync(\n  projectRoot: string\n): Promise<{ isBootstrapping: boolean } | null> {\n  const tsConfigPath = await hasTSConfig(projectRoot);\n\n  // Enable TS setup if the project has a `tsconfig.json`\n  if (tsConfigPath) {\n    const content = await fs.readFile(tsConfigPath, { encoding: 'utf8' }).then(\n      txt => txt.trim(),\n      () => null\n    );\n    const isBlankConfig = content === '' || content === '{}';\n    return { isBootstrapping: isBlankConfig };\n  }\n  // This is a somewhat heavy check in larger projects.\n  // Test that this is reasonably paced by running expo start in `expo/apps/native-component-list`\n  const typescriptFile = await profileMethod(queryFirstProjectTypeScriptFileAsync)(projectRoot);\n  if (typescriptFile) {\n    return { isBootstrapping: true };\n  }\n\n  return null;\n}\n\nasync function getSDKVersionsAsync(projectRoot: string): Promise<Versions.SDKVersion | null> {\n  try {\n    const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n    if (exp.sdkVersion) {\n      const sdkVersions = await Versions.releasedSdkVersionsAsync();\n      return sdkVersions[exp.sdkVersion] ?? null;\n    }\n  } catch {\n    // This is a convenience method and we should avoid making this halt the process.\n  }\n  return null;\n}\n\nasync function ensureRequiredDependenciesAsync(\n  projectRoot: string,\n  skipPrompt: boolean = false\n): Promise<string> {\n  const { resolutions, missing } = collectMissingPackages(projectRoot);\n  if (!missing.length) {\n    return resolutions.typescript!;\n  }\n\n  // Ensure the versions are right for the SDK that the project is currently using.\n  const versions = await getSDKVersionsAsync(projectRoot);\n  if (versions?.relatedPackages) {\n    for (const pkg of missing) {\n      if (pkg.pkg in versions.relatedPackages) {\n        pkg.version = versions.relatedPackages[pkg.pkg];\n      }\n    }\n  }\n\n  // Prompt to install or bail out...\n  const readableMissingPackages = missing.map(p => p.pkg).join(', ');\n\n  const isYarn = PackageManager.isUsingYarn(projectRoot);\n\n  let title = `It looks like you're trying to use TypeScript but don't have the required dependencies installed.`;\n\n  if (!skipPrompt) {\n    if (\n      await confirmAsync({\n        message: wrapAnsi(\n          title + ` Would you like to install ${chalk.cyan(readableMissingPackages)}?`,\n          // This message is a bit too long, so wrap it to fit smaller terminals\n          process.stdout.columns || 80\n        ),\n        initial: true,\n      })\n    ) {\n      await installPackagesAsync(projectRoot, {\n        isYarn,\n        devPackages: missing.map(({ pkg, version }) => {\n          if (version) {\n            return [pkg, version].join('@');\n          }\n          return pkg;\n        }),\n      });\n      // Try again but skip prompting twice.\n      return await ensureRequiredDependenciesAsync(projectRoot, true);\n    }\n\n    // Reset the title so it doesn't print twice in interactive mode.\n    title = '';\n  } else {\n    title += '\\n\\n';\n  }\n\n  const col = process.stdout.columns || 80;\n\n  const installCommand =\n    (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n    ' ' +\n    missing\n      .map(({ pkg, version }) => {\n        if (version) {\n          return [pkg, version].join('@');\n        }\n        return pkg;\n      })\n      .join(' ');\n\n  let disableMessage =\n    \"If you're not using TypeScript, please remove the TypeScript files from your project\";\n\n  if (await hasTSConfig(projectRoot)) {\n    disableMessage += ` and delete the tsconfig.json.`;\n  } else {\n    disableMessage += '.';\n  }\n\n  const solution = `Please install ${chalk.bold(\n    readableMissingPackages\n  )} by running:\\n\\n  ${chalk.reset.bold(installCommand)}\\n\\n`;\n\n  // This prevents users from starting a misconfigured JS or TS project by default.\n  throw new CommandError(wrapAnsi(title + solution + disableMessage + '\\n', col));\n}\n\nasync function installPackagesAsync(\n  projectRoot: string,\n  { isYarn, devPackages }: { isYarn: boolean; devPackages: string[] }\n) {\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    yarn: isYarn,\n    log: Log.log,\n    silent: !Log.isDebug,\n  });\n\n  const packagesStr = chalk.bold(devPackages.join(', '));\n  Log.newLine();\n  const installingPackageStep = logNewSection(`Installing ${packagesStr}`);\n  try {\n    await packageManager.addDevAsync(...devPackages);\n  } catch (e: any) {\n    installingPackageStep.fail(`Failed to install ${packagesStr} with error: ${e.message}`);\n    throw e;\n  }\n  installingPackageStep.succeed(`Installed ${packagesStr}`);\n}\n"],"mappings":"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"}