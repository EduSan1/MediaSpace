{"version":3,"file":"bundledNativeModules.js","names":["getBundledNativeModulesAsync","projectRoot","sdkVersion","getBundledNativeModulesFromExpoPackageAsync","getBundledNativeModulesFromApiAsync","Log","warn","chalk","bold","client","ApiV2","clientForUser","list","getAsync","length","Error","fromBundledNativeModuleList","bundledNativeModulesPath","resolveFrom","silent","addNewLineIfNone","CommandError","JsonFile","readAsync","reduce","acc","i","npmPackage","versionRange"],"sources":["../../../src/commands/utils/bundledNativeModules.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport resolveFrom from 'resolve-from';\nimport { ApiV2 } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\n\ninterface NativeModule {\n  npmPackage: string;\n  versionRange: string;\n}\ntype BundledNativeModuleList = NativeModule[];\nexport type BundledNativeModules = Record<string, string>;\n\n/**\n * Gets the bundledNativeModules.json for a given SDK version:\n * - Tries to fetch the data from the /sdks/:sdkVersion/native-modules API endpoint.\n * - If the data is missing on the server (it can happen for SDKs that are yet fully released)\n *    or there's a downtime, reads the local .json file from the \"expo\" package.\n * - For UNVERSIONED, returns the local .json file contents.\n */\nexport async function getBundledNativeModulesAsync(\n  projectRoot: string,\n  sdkVersion: string\n): Promise<BundledNativeModules> {\n  if (sdkVersion === 'UNVERSIONED') {\n    return await getBundledNativeModulesFromExpoPackageAsync(projectRoot);\n  } else {\n    try {\n      return await getBundledNativeModulesFromApiAsync(sdkVersion);\n    } catch {\n      Log.warn(\n        `Unable to reach Expo servers. Falling back to using the cached dependency map (${chalk.bold(\n          'bundledNativeModules.json'\n        )}) from the package \"${chalk.bold`expo`}\" installed in your project.`\n      );\n      return await getBundledNativeModulesFromExpoPackageAsync(projectRoot);\n    }\n  }\n}\n\nasync function getBundledNativeModulesFromApiAsync(\n  sdkVersion: string\n): Promise<BundledNativeModules> {\n  const client = ApiV2.clientForUser();\n  /**\n   * The endpoint returns the list of bundled native modules for a given SDK version.\n   * The data is populated by the `et sync-bundled-native-modules` script from expo/expo repo.\n   * See the code for more details:\n   * https://github.com/expo/expo/blob/master/tools/src/commands/SyncBundledNativeModules.ts\n   *\n   * Example result:\n   * [\n   *   {\n   *     id: \"79285187-e5c4-47f7-b6a9-664f5d16f0db\",\n   *     sdkVersion: \"41.0.0\",\n   *     npmPackage: \"expo-analytics-amplitude\",\n   *     versionRange: \"~10.1.0\",\n   *     createdAt: \"2021-04-29T09:34:32.825Z\",\n   *     updatedAt: \"2021-04-29T09:34:32.825Z\"\n   *   },\n   *   ...\n   * ]\n   */\n  const list = await client.getAsync(`sdks/${sdkVersion}/native-modules`);\n  if (list.length === 0) {\n    throw new Error('The bundled native module list from www is empty');\n  }\n  return fromBundledNativeModuleList(list);\n}\n\n/**\n * Get the legacy static `bundledNativeModules.json` file\n * that's shipped with the version of `expo` that the project has installed.\n */\nasync function getBundledNativeModulesFromExpoPackageAsync(\n  projectRoot: string\n): Promise<BundledNativeModules> {\n  const bundledNativeModulesPath = resolveFrom.silent(\n    projectRoot,\n    'expo/bundledNativeModules.json'\n  );\n  if (!bundledNativeModulesPath) {\n    Log.addNewLineIfNone();\n    throw new CommandError(\n      `The dependency map ${chalk.bold(\n        `expo/bundledNativeModules.json`\n      )} cannot be found, please ensure you have the package \"${chalk.bold`expo`}\" installed in your project.\\n`\n    );\n  }\n  return await JsonFile.readAsync<BundledNativeModules>(bundledNativeModulesPath);\n}\n\nfunction fromBundledNativeModuleList(list: BundledNativeModuleList): BundledNativeModules {\n  return list.reduce((acc, i) => {\n    acc[i.npmPackage] = i.versionRange;\n    return acc;\n  }, {} as BundledNativeModules);\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,4BAAf,CACLC,WADK,EAELC,UAFK,EAG0B;EAC/B,IAAIA,UAAU,KAAK,aAAnB,EAAkC;IAChC,OAAO,MAAMC,2CAA2C,CAACF,WAAD,CAAxD;EACD,CAFD,MAEO;IACL,IAAI;MACF,OAAO,MAAMG,mCAAmC,CAACF,UAAD,CAAhD;IACD,CAFD,CAEE,MAAM;MACNG,cAAA,CAAIC,IAAJ,CACG,kFAAiFC,gBAAA,CAAMC,IAAN,CAChF,2BADgF,CAEhF,uBAAsBD,gBAAA,CAAMC,IAAK,MAAM,8BAH3C;;MAKA,OAAO,MAAML,2CAA2C,CAACF,WAAD,CAAxD;IACD;EACF;AACF;;AAED,eAAeG,mCAAf,CACEF,UADF,EAEiC;EAC/B,MAAMO,MAAM,GAAGC,YAAA,CAAMC,aAAN,EAAf;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,MAAMC,IAAI,GAAG,MAAMH,MAAM,CAACI,QAAP,CAAiB,QAAOX,UAAW,iBAAnC,CAAnB;;EACA,IAAIU,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;IACrB,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;EACD;;EACD,OAAOC,2BAA2B,CAACJ,IAAD,CAAlC;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAeT,2CAAf,CACEF,WADF,EAEiC;EAC/B,MAAMgB,wBAAwB,GAAGC,sBAAA,CAAYC,MAAZ,CAC/BlB,WAD+B,EAE/B,gCAF+B,CAAjC;;EAIA,IAAI,CAACgB,wBAAL,EAA+B;IAC7BZ,cAAA,CAAIe,gBAAJ;;IACA,MAAM,KAAIC,uBAAJ,EACH,sBAAqBd,gBAAA,CAAMC,IAAN,CACnB,gCADmB,CAEpB,yDAAwDD,gBAAA,CAAMC,IAAK,MAAM,gCAHvE,CAAN;EAKD;;EACD,OAAO,MAAMc,mBAAA,CAASC,SAAT,CAAyCN,wBAAzC,CAAb;AACD;;AAED,SAASD,2BAAT,CAAqCJ,IAArC,EAA0F;EACxF,OAAOA,IAAI,CAACY,MAAL,CAAY,CAACC,GAAD,EAAMC,CAAN,KAAY;IAC7BD,GAAG,CAACC,CAAC,CAACC,UAAH,CAAH,GAAoBD,CAAC,CAACE,YAAtB;IACA,OAAOH,GAAP;EACD,CAHM,EAGJ,EAHI,CAAP;AAID"}