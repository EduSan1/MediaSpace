{"version":3,"file":"GitIgnore.js","names":["mergeGitIgnorePaths","targetGitIgnorePath","sourceGitIgnorePath","fs","existsSync","targetGitIgnore","readFileSync","toString","sourceGitIgnore","merged","mergeGitIgnoreContents","contents","writeFileSync","generatedHeaderPrefix","generatedFooterComment","getGeneratedSectionIndexes","gitIgnore","split","start","findIndex","line","startsWith","end","removeGeneratedGitIgnoreContents","splice","join","header","createGeneratedHeaderComment","includes","sanitizedTarget","didMerge","didClear","hashKey","createGitIgnoreHash","getSanitizedGitIgnoreLines","filter","v","trim","sort","hash","crypto","createHash","update","digest"],"sources":["../../../src/commands/utils/GitIgnore.ts"],"sourcesContent":["import crypto from 'crypto';\nimport fs from 'fs-extra';\n\ntype MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n/**\n * Merge two gitignore files together and add a generated header.\n *\n * @param targetGitIgnorePath\n * @param sourceGitIgnorePath\n */\nexport function mergeGitIgnorePaths(\n  targetGitIgnorePath: string,\n  sourceGitIgnorePath: string\n): null | MergeResults {\n  if (!fs.existsSync(targetGitIgnorePath)) {\n    // No gitignore in the project already, no need to merge anything into anything. I guess they\n    // are not using git :O\n    return null;\n  }\n\n  if (!fs.existsSync(sourceGitIgnorePath)) {\n    // Maybe we don't have a gitignore in the template project\n    return null;\n  }\n\n  const targetGitIgnore = fs.readFileSync(targetGitIgnorePath).toString();\n  const sourceGitIgnore = fs.readFileSync(sourceGitIgnorePath).toString();\n  const merged = mergeGitIgnoreContents(targetGitIgnore, sourceGitIgnore);\n  // Only rewrite the file if it was modified.\n  if (merged.contents) {\n    fs.writeFileSync(targetGitIgnorePath, merged.contents);\n  }\n\n  return merged;\n}\n\nconst generatedHeaderPrefix = `# @generated expo-cli`;\nexport const generatedFooterComment = `# @end expo-cli`;\n\n/**\n * Get line indexes for the generated section of a gitignore.\n *\n * @param gitIgnore\n */\nfunction getGeneratedSectionIndexes(\n  gitIgnore: string\n): { contents: string[]; start: number; end: number } {\n  const contents = gitIgnore.split('\\n');\n  const start = contents.findIndex(line => line.startsWith(generatedHeaderPrefix));\n  const end = contents.findIndex(line => line.startsWith(generatedFooterComment));\n\n  return { contents, start, end };\n}\n\n/**\n * Removes the generated section from a gitignore, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made to the gitignore manually.\n *\n * @param gitIgnore\n */\nexport function removeGeneratedGitIgnoreContents(gitIgnore: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(gitIgnore);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\n/**\n * Merge the contents of two gitignores together and add a generated header.\n *\n * @param targetGitIgnore contents of the existing gitignore\n * @param sourceGitIgnore contents of the extra gitignore\n */\nexport function mergeGitIgnoreContents(\n  targetGitIgnore: string,\n  sourceGitIgnore: string\n): MergeResults {\n  const header = createGeneratedHeaderComment(sourceGitIgnore);\n  if (!targetGitIgnore.includes(header)) {\n    // Ensure the old generated gitignore contents are removed.\n    const sanitizedTarget = removeGeneratedGitIgnoreContents(targetGitIgnore);\n    return {\n      contents: [\n        sanitizedTarget ?? targetGitIgnore,\n        header,\n        `# The following patterns were generated by expo-cli`,\n        ``,\n        sourceGitIgnore,\n        generatedFooterComment,\n      ].join('\\n'),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: targetGitIgnore, didClear: false, didMerge: false };\n}\n\nexport function createGeneratedHeaderComment(gitIgnore: string): string {\n  const hashKey = createGitIgnoreHash(getSanitizedGitIgnoreLines(gitIgnore).join('\\n'));\n\n  return `${generatedHeaderPrefix} ${hashKey}`;\n}\n\n/**\n * Normalize the contents of a gitignore to ensure that minor changes like new lines or sort order don't cause a regeneration.\n */\nexport function getSanitizedGitIgnoreLines(gitIgnore: string): string[] {\n  // filter, trim, and sort the lines.\n  return gitIgnore\n    .split('\\n')\n    .filter(v => {\n      const line = v.trim();\n      // Strip comments\n      if (line.startsWith('#')) {\n        return false;\n      }\n      return !!line;\n    })\n    .sort();\n}\n\nexport function createGitIgnoreHash(gitIgnore: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(gitIgnore).digest('hex');\n  return `sync-${hash}`;\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CACLC,mBADK,EAELC,mBAFK,EAGgB;EACrB,IAAI,CAACC,kBAAA,CAAGC,UAAH,CAAcH,mBAAd,CAAL,EAAyC;IACvC;IACA;IACA,OAAO,IAAP;EACD;;EAED,IAAI,CAACE,kBAAA,CAAGC,UAAH,CAAcF,mBAAd,CAAL,EAAyC;IACvC;IACA,OAAO,IAAP;EACD;;EAED,MAAMG,eAAe,GAAGF,kBAAA,CAAGG,YAAH,CAAgBL,mBAAhB,EAAqCM,QAArC,EAAxB;;EACA,MAAMC,eAAe,GAAGL,kBAAA,CAAGG,YAAH,CAAgBJ,mBAAhB,EAAqCK,QAArC,EAAxB;;EACA,MAAME,MAAM,GAAGC,sBAAsB,CAACL,eAAD,EAAkBG,eAAlB,CAArC,CAdqB,CAerB;;EACA,IAAIC,MAAM,CAACE,QAAX,EAAqB;IACnBR,kBAAA,CAAGS,aAAH,CAAiBX,mBAAjB,EAAsCQ,MAAM,CAACE,QAA7C;EACD;;EAED,OAAOF,MAAP;AACD;;AAED,MAAMI,qBAAqB,GAAI,uBAA/B;AACO,MAAMC,sBAAsB,GAAI,iBAAhC;AAEP;AACA;AACA;AACA;AACA;;;;AACA,SAASC,0BAAT,CACEC,SADF,EAEsD;EACpD,MAAML,QAAQ,GAAGK,SAAS,CAACC,KAAV,CAAgB,IAAhB,CAAjB;EACA,MAAMC,KAAK,GAAGP,QAAQ,CAACQ,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACC,UAAL,CAAgBR,qBAAhB,CAA3B,CAAd;EACA,MAAMS,GAAG,GAAGX,QAAQ,CAACQ,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACC,UAAL,CAAgBP,sBAAhB,CAA3B,CAAZ;EAEA,OAAO;IAAEH,QAAF;IAAYO,KAAZ;IAAmBI;EAAnB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,gCAAT,CAA0CP,SAA1C,EAA4E;EACjF,MAAM;IAAEL,QAAF;IAAYO,KAAZ;IAAmBI;EAAnB,IAA2BP,0BAA0B,CAACC,SAAD,CAA3D;;EACA,IAAIE,KAAK,GAAG,CAAC,CAAT,IAAcI,GAAG,GAAG,CAAC,CAArB,IAA0BJ,KAAK,GAAGI,GAAtC,EAA2C;IACzCX,QAAQ,CAACa,MAAT,CAAgBN,KAAhB,EAAuBI,GAAG,GAAGJ,KAAN,GAAc,CAArC,EADyC,CAEzC;IACA;;IACA,OAAOP,QAAQ,CAACc,IAAT,CAAc,IAAd,CAAP;EACD;;EACD,OAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASf,sBAAT,CACLL,eADK,EAELG,eAFK,EAGS;EACd,MAAMkB,MAAM,GAAGC,4BAA4B,CAACnB,eAAD,CAA3C;;EACA,IAAI,CAACH,eAAe,CAACuB,QAAhB,CAAyBF,MAAzB,CAAL,EAAuC;IACrC;IACA,MAAMG,eAAe,GAAGN,gCAAgC,CAAClB,eAAD,CAAxD;IACA,OAAO;MACLM,QAAQ,EAAE,CACRkB,eADQ,aACRA,eADQ,cACRA,eADQ,GACWxB,eADX,EAERqB,MAFQ,EAGP,qDAHO,EAIP,EAJO,EAKRlB,eALQ,EAMRM,sBANQ,EAORW,IAPQ,CAOH,IAPG,CADL;MASLK,QAAQ,EAAE,IATL;MAULC,QAAQ,EAAE,CAAC,CAACF;IAVP,CAAP;EAYD;;EACD,OAAO;IAAElB,QAAQ,EAAEN,eAAZ;IAA6B0B,QAAQ,EAAE,KAAvC;IAA8CD,QAAQ,EAAE;EAAxD,CAAP;AACD;;AAEM,SAASH,4BAAT,CAAsCX,SAAtC,EAAiE;EACtE,MAAMgB,OAAO,GAAGC,mBAAmB,CAACC,0BAA0B,CAAClB,SAAD,CAA1B,CAAsCS,IAAtC,CAA2C,IAA3C,CAAD,CAAnC;EAEA,OAAQ,GAAEZ,qBAAsB,IAAGmB,OAAQ,EAA3C;AACD;AAED;AACA;AACA;;;AACO,SAASE,0BAAT,CAAoClB,SAApC,EAAiE;EACtE;EACA,OAAOA,SAAS,CACbC,KADI,CACE,IADF,EAEJkB,MAFI,CAEGC,CAAC,IAAI;IACX,MAAMhB,IAAI,GAAGgB,CAAC,CAACC,IAAF,EAAb,CADW,CAEX;;IACA,IAAIjB,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;MACxB,OAAO,KAAP;IACD;;IACD,OAAO,CAAC,CAACD,IAAT;EACD,CATI,EAUJkB,IAVI,EAAP;AAWD;;AAEM,SAASL,mBAAT,CAA6BjB,SAA7B,EAAwD;EAC7D;EACA,MAAMuB,IAAI,GAAGC,iBAAA,CAAOC,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiC1B,SAAjC,EAA4C2B,MAA5C,CAAmD,KAAnD,CAAb;;EACA,OAAQ,QAAOJ,IAAK,EAApB;AACD"}