{"version":3,"file":"doctorAsync.js","names":["validateSupportPackagesAsync","sdkVersion","versionsForSdk","getRemoteVersionsForSdk","supportPackagesToValidate","allPackagesValid","pkg","version","isVersionValid","warnAboutDeepDependenciesAsync","name","validateIllegalPackagesAsync","illegalPackages","allPackagesLegal","isPackageAbsent","actionAsync","projectRoot","options","warnUponCmdExe","exp","profileMethod","getConfig","foundSomeIssues","Versions","gteSdkVersion","validateDependenciesVersionsAsync","fixDependencies","Doctor","validateExpoServersAsync","validateWithNetworkAsync","NO_ISSUES","process","exitCode","Log","log","chalk","green"],"sources":["../../../../src/commands/info/doctor/doctorAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { Doctor, Versions } from 'xdl';\n\nimport Log from '../../../log';\nimport { getRemoteVersionsForSdk } from '../../../utils/getRemoteVersionsForSdk';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { validateDependenciesVersionsAsync } from '../../utils/validateDependenciesVersions';\nimport { warnAboutDeepDependenciesAsync } from './depedencies/explain';\nimport { warnUponCmdExe } from './windows';\n\ntype Options = {\n  fixDependencies?: boolean;\n};\n\nasync function validateSupportPackagesAsync(sdkVersion: string): Promise<boolean> {\n  const versionsForSdk = await getRemoteVersionsForSdk(sdkVersion);\n\n  const supportPackagesToValidate = [\n    'expo-modules-autolinking',\n    '@expo/config-plugins',\n    '@expo/prebuild-config',\n  ];\n\n  let allPackagesValid = true;\n  for (const pkg of supportPackagesToValidate) {\n    const version = versionsForSdk[pkg];\n    if (version) {\n      const isVersionValid = await warnAboutDeepDependenciesAsync({ name: pkg, version });\n      if (!isVersionValid) {\n        allPackagesValid = false;\n      }\n    }\n  }\n  return allPackagesValid;\n}\n\n// Ensures that a set of packages\nasync function validateIllegalPackagesAsync(): Promise<boolean> {\n  const illegalPackages = [\n    '@unimodules/core',\n    '@unimodules/react-native-adapter',\n    'react-native-unimodules',\n  ];\n\n  let allPackagesLegal = true;\n\n  for (const pkg of illegalPackages) {\n    const isPackageAbsent = await warnAboutDeepDependenciesAsync({ name: pkg });\n    if (!isPackageAbsent) {\n      allPackagesLegal = false;\n    }\n  }\n\n  return allPackagesLegal;\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  await warnUponCmdExe();\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot);\n  let foundSomeIssues = false;\n\n  // Only use the new validation on SDK +45.\n  if (Versions.gteSdkVersion(exp, '45.0.0')) {\n    if (!(await validateSupportPackagesAsync(exp.sdkVersion!))) {\n      foundSomeIssues = true;\n    }\n  }\n\n  if (Versions.gteSdkVersion(exp, '44.0.0')) {\n    if (!(await validateIllegalPackagesAsync())) {\n      foundSomeIssues = true;\n    }\n  }\n\n  if (\n    !(await profileMethod(validateDependenciesVersionsAsync)(\n      projectRoot,\n      exp,\n      pkg,\n      options.fixDependencies\n    ))\n  ) {\n    foundSomeIssues = true;\n  }\n\n  // note: this currently only warns when something isn't right, it doesn't fail\n  await Doctor.validateExpoServersAsync(projectRoot);\n\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) !== Doctor.NO_ISSUES) {\n    foundSomeIssues = true;\n  }\n\n  if (foundSomeIssues) {\n    process.exitCode = 1;\n  } else {\n    Log.log(chalk.green(`ðŸŽ‰ Didn't find any issues with the project!`));\n  }\n}\n"],"mappings":"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"}