{"version":3,"file":"urlAsync.js","names":["actionAsync","projectRoot","options","urlOpts","optsAsync","assertProjectRunningAsync","url","web","getWebAppUrlAsync","UrlUtils","constructDeepLinkAsync","logUrl","printRunInstructionsAsync","handleMobileOptsAsync","ProjectSettings","getCurrentStatusAsync","CommandError","constructWebAppUrlAsync","Log","newLine","printQRCode","log","chalk","underline"],"sources":["../../../src/commands/url/urlAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport type { Command } from 'commander';\nimport { ProjectSettings, UrlUtils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport urlOpts, { URLOptions } from '../utils/urlOpts';\nimport printRunInstructionsAsync from './printRunInstructionsAsync';\n\ntype ProjectUrlOptions = Command & {\n  web?: boolean;\n};\n\nexport async function actionAsync(projectRoot: string, options: ProjectUrlOptions & URLOptions) {\n  await urlOpts.optsAsync(projectRoot, options);\n\n  await assertProjectRunningAsync(projectRoot);\n\n  const url = options.web\n    ? await getWebAppUrlAsync(projectRoot)\n    : await UrlUtils.constructDeepLinkAsync(projectRoot);\n\n  logUrl(url);\n\n  if (!options.web) {\n    await printRunInstructionsAsync();\n    await urlOpts.handleMobileOptsAsync(projectRoot, options);\n  }\n}\n\nasync function assertProjectRunningAsync(projectRoot: string) {\n  if ((await ProjectSettings.getCurrentStatusAsync(projectRoot)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`expo start\\`.`\n    );\n  }\n}\n\nasync function getWebAppUrlAsync(projectRoot: string): Promise<string> {\n  const url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n  if (!url) {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Webpack dev server is not running. Please start it with \\`expo start:web\\`.`\n    );\n  }\n  return url;\n}\n\nfunction logUrl(url: string) {\n  Log.newLine();\n\n  urlOpts.printQRCode(url);\n\n  Log.log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAMO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAyF;EAC9F,MAAMC,kBAAA,CAAQC,SAAR,CAAkBH,WAAlB,EAA+BC,OAA/B,CAAN;EAEA,MAAMG,yBAAyB,CAACJ,WAAD,CAA/B;EAEA,MAAMK,GAAG,GAAGJ,OAAO,CAACK,GAAR,GACR,MAAMC,iBAAiB,CAACP,WAAD,CADf,GAER,MAAMQ,eAAA,CAASC,sBAAT,CAAgCT,WAAhC,CAFV;EAIAU,MAAM,CAACL,GAAD,CAAN;;EAEA,IAAI,CAACJ,OAAO,CAACK,GAAb,EAAkB;IAChB,MAAM,IAAAK,oCAAA,GAAN;IACA,MAAMT,kBAAA,CAAQU,qBAAR,CAA8BZ,WAA9B,EAA2CC,OAA3C,CAAN;EACD;AACF;;AAED,eAAeG,yBAAf,CAAyCJ,WAAzC,EAA8D;EAC5D,IAAI,CAAC,MAAMa,sBAAA,CAAgBC,qBAAhB,CAAsCd,WAAtC,CAAP,MAA+D,SAAnE,EAA8E;IAC5E,MAAM,KAAIe,uBAAJ,EACJ,aADI,EAEH,8DAFG,CAAN;EAID;AACF;;AAED,eAAeR,iBAAf,CAAiCP,WAAjC,EAAuE;EACrE,MAAMK,GAAG,GAAG,MAAMG,eAAA,CAASQ,uBAAT,CAAiChB,WAAjC,CAAlB;;EACA,IAAI,CAACK,GAAL,EAAU;IACR,MAAM,KAAIU,uBAAJ,EACJ,aADI,EAEH,6EAFG,CAAN;EAID;;EACD,OAAOV,GAAP;AACD;;AAED,SAASK,MAAT,CAAgBL,GAAhB,EAA6B;EAC3BY,cAAA,CAAIC,OAAJ;;EAEAhB,kBAAA,CAAQiB,WAAR,CAAoBd,GAApB;;EAEAY,cAAA,CAAIG,GAAJ,CAAQ,oBAAoBC,gBAAA,CAAMC,SAAN,CAAgBjB,GAAhB,CAApB,GAA2C,IAAnD;AACD"}