{"version":3,"file":"webhooksAsync.js","names":["actionAsync","projectRoot","experienceName","project","client","setupAsync","webhooks","getAsync","id","length","table","CliTable","head","push","map","hook","url","event","Log","log","toString","chalk","bold"],"sources":["../../../src/commands/webhooks/webhooksAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport CliTable from 'cli-table3';\n\nimport Log from '../../log';\nimport { setupAsync, WebhookEvent } from './utils';\n\ntype Webhook = {\n  id: string;\n  url: string;\n  event: WebhookEvent;\n  secret?: string;\n};\n\nexport async function actionAsync(projectRoot: string) {\n  const { experienceName, project, client } = await setupAsync(projectRoot);\n\n  const webhooks = await client.getAsync(`projects/${project.id}/webhooks`);\n  if (webhooks.length) {\n    const table = new CliTable({ head: ['Webhook ID', 'URL', 'Event'] });\n    table.push(...webhooks.map((hook: Webhook) => [hook.id, hook.url, hook.event]));\n    Log.log(table.toString());\n  } else {\n    Log.log(`${chalk.bold(experienceName)} has no webhooks.`);\n    Log.log('Use `expo webhooks:add` to add one.');\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AASO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgD;EACrD,MAAM;IAAEC,cAAF;IAAkBC,OAAlB;IAA2BC;EAA3B,IAAsC,MAAM,IAAAC,mBAAA,EAAWJ,WAAX,CAAlD;EAEA,MAAMK,QAAQ,GAAG,MAAMF,MAAM,CAACG,QAAP,CAAiB,YAAWJ,OAAO,CAACK,EAAG,WAAvC,CAAvB;;EACA,IAAIF,QAAQ,CAACG,MAAb,EAAqB;IACnB,MAAMC,KAAK,GAAG,KAAIC,mBAAJ,EAAa;MAAEC,IAAI,EAAE,CAAC,YAAD,EAAe,KAAf,EAAsB,OAAtB;IAAR,CAAb,CAAd;IACAF,KAAK,CAACG,IAAN,CAAW,GAAGP,QAAQ,CAACQ,GAAT,CAAcC,IAAD,IAAmB,CAACA,IAAI,CAACP,EAAN,EAAUO,IAAI,CAACC,GAAf,EAAoBD,IAAI,CAACE,KAAzB,CAAhC,CAAd;;IACAC,cAAA,CAAIC,GAAJ,CAAQT,KAAK,CAACU,QAAN,EAAR;EACD,CAJD,MAIO;IACLF,cAAA,CAAIC,GAAJ,CAAS,GAAEE,gBAAA,CAAMC,IAAN,CAAWpB,cAAX,CAA2B,mBAAtC;;IACAgB,cAAA,CAAIC,GAAJ,CAAQ,qCAAR;EACD;AACF"}