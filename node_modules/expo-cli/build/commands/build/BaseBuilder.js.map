{"version":3,"file":"BaseBuilder.js","names":["secondsToMilliseconds","seconds","BaseBuilder","getUserAsync","UserManager","ensureLoggedInAsync","constructor","projectDir","options","projectConfig","getConfig","manifest","exp","updateProjectConfig","command","prepareProjectInfo","run","e","BuildError","Log","error","message","process","exit","Error","commandCheckStatus","checkStatus","checkProjectConfig","getProjectOwner","isDetached","platform","oldestSupportedMajorVersion","Versions","oldestSupportedMajorVersionAsync","semver","major","sdkVersion","version","newestReleasedSdkVersionAsync","warn","chalk","bold","checkForBuildInProgress","log","buildStatus","getBuildStatusAsync","current","releaseChannel","publicUrl","jobs","length","err","logBuildStatuses","canPurchasePriorityBuilds","numberOfRemainingPriorityBuilds","hasUnlimitedPriorityBuilds","checkStatusBeforeBuild","reuseStatus","findReusableBuildAsync","slug","owner","canReuse","underline","downloadUrl","newLine","username","getCurrentUsernameAsync","forEach","job","i","packageExtension","UrlUtils","constructBuildLogsUrl","buildId","id","projectSlug","undefined","hasPriorityBuilds","shouldShowUpgradeInfo","priority","status","constructTurtleStatusUrl","artifacts","url","ensureReleaseExists","publish","ids","publishAction","duringBuild","release","getLatestReleaseAsync","channel","publicationId","publishedTime","wait","interval","spinner","ora","start","result","filter","succeed","text","fail","sleep","build","expIds","bundleIdentifier","ios","opts","PLATFORMS","IOS","type","ANDROID","startBuildAsync","user","getCurrentUserAsync","kind","waitOpts","completedJob","artifactUrl","artifactId","constructArtifactUrl","addNewLineIfNone","green","ALL"],"sources":["../../../src/commands/build/BaseBuilder.ts"],"sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport semver from 'semver';\nimport { RobotUser, User, UserManager, Versions } from 'xdl';\n\nimport Log from '../../log';\nimport { actionAsync as publishAction } from '../publish/publishAsync';\nimport { sleep } from '../utils/promise';\nimport * as UrlUtils from '../utils/url';\nimport { BuilderOptions } from './BaseBuilder.types';\nimport BuildError from './BuildError';\nimport { Platform, PLATFORMS } from './constants';\nimport { findReusableBuildAsync } from './findReusableBuildAsync';\nimport { BuildJobFields, getBuildStatusAsync } from './getBuildStatusAsync';\nimport { getLatestReleaseAsync } from './getLatestReleaseAsync';\nimport { startBuildAsync } from './startBuildAsync';\n\nconst secondsToMilliseconds = (seconds: number): number => seconds * 1000;\nexport default class BaseBuilder {\n  protected projectConfig: ProjectConfig;\n  manifest: ExpoConfig;\n\n  async getUserAsync(): Promise<User | RobotUser> {\n    return await UserManager.ensureLoggedInAsync();\n  }\n\n  constructor(public projectDir: string, public options: BuilderOptions = {}) {\n    this.projectConfig = getConfig(this.projectDir);\n    this.manifest = this.projectConfig.exp;\n  }\n\n  protected updateProjectConfig() {\n    // Update the project config\n    this.projectConfig = getConfig(this.projectDir);\n    this.manifest = this.projectConfig.exp;\n  }\n\n  async command() {\n    try {\n      await this.prepareProjectInfo();\n      await this.run();\n    } catch (e: any) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        Log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    throw new Error('`run()` should be overridden');\n  }\n\n  async commandCheckStatus() {\n    try {\n      await this.prepareProjectInfo();\n      await this.checkStatus();\n    } catch (e: any) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        Log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async prepareProjectInfo(): Promise<void> {\n    await this.checkProjectConfig();\n    // note: this validates if a robot user is used without \"owner\" in the manifest\n    // without this check, build/status returns \"robots not allowed\".\n    UserManager.getProjectOwner(\n      // TODO: Move this since it can add delay\n      await this.getUserAsync(),\n      this.projectConfig.exp\n    );\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    if (this.manifest.isDetached) {\n      Log.error(`'expo build:${this.platform()}' is not supported for detached projects.`);\n      process.exit(1);\n    }\n\n    // Warn user if building a project using the next deprecated SDK version\n    const oldestSupportedMajorVersion = await Versions.oldestSupportedMajorVersionAsync();\n    if (semver.major(this.manifest.sdkVersion!) === oldestSupportedMajorVersion) {\n      const { version } = await Versions.newestReleasedSdkVersionAsync();\n      Log.warn(\n        `\\nSDK${oldestSupportedMajorVersion} will be ${chalk.bold(\n          'deprecated'\n        )} next! We recommend upgrading versions, ideally to the latest (SDK${semver.major(\n          version\n        )}), so you can continue to build new binaries of your app and develop in Expo Go.\\n`\n      );\n    }\n  }\n\n  async checkForBuildInProgress() {\n    Log.log('Checking if there is a build in progress...\\n');\n    const buildStatus = await getBuildStatusAsync(this.projectDir, {\n      platform: this.platform(),\n      current: true,\n      releaseChannel: this.options.releaseChannel,\n      publicUrl: this.options.publicUrl,\n      sdkVersion: this.manifest.sdkVersion,\n    } as any);\n\n    if (buildStatus.jobs && buildStatus.jobs.length > 0) {\n      throw new BuildError('Cannot start a new build, as there is already an in-progress build.');\n    }\n  }\n\n  async checkStatus(platform: 'all' | 'ios' | 'android' = 'all'): Promise<void> {\n    Log.log('Fetching build history...\\n');\n\n    const buildStatus = await getBuildStatusAsync(this.projectDir, {\n      platform,\n      current: false,\n      releaseChannel: this.options.releaseChannel,\n    });\n\n    if ('err' in buildStatus && buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (!(buildStatus.jobs && buildStatus.jobs.length)) {\n      Log.log('No currently active or previous builds for this project.');\n      return;\n    }\n\n    await this.logBuildStatuses({\n      jobs: buildStatus.jobs,\n      canPurchasePriorityBuilds: buildStatus.canPurchasePriorityBuilds,\n      numberOfRemainingPriorityBuilds: buildStatus.numberOfRemainingPriorityBuilds,\n      hasUnlimitedPriorityBuilds: buildStatus.hasUnlimitedPriorityBuilds,\n    });\n  }\n\n  async checkStatusBeforeBuild(): Promise<void> {\n    Log.log('Checking if this build already exists...\\n');\n\n    const reuseStatus = await findReusableBuildAsync(\n      this.options.releaseChannel!,\n      this.platform(),\n      this.manifest.sdkVersion!,\n      this.manifest.slug!,\n      this.manifest.owner\n    );\n    if (reuseStatus.canReuse) {\n      Log.warn(`Did you know that Expo provides over-the-air updates?\nPlease see the docs (${chalk.underline(\n        'https://docs.expo.dev/guides/configuring-ota-updates/'\n      )}) and check if you can use them instead of building your app binaries again.`);\n\n      Log.warn(\n        `There were no new changes from the last build, you can download that build from here: ${chalk.underline(\n          reuseStatus.downloadUrl!\n        )}`\n      );\n      Log.newLine();\n    }\n  }\n\n  async logBuildStatuses(buildStatus: {\n    jobs: BuildJobFields[];\n    canPurchasePriorityBuilds?: boolean;\n    numberOfRemainingPriorityBuilds?: number;\n    hasUnlimitedPriorityBuilds?: boolean;\n  }) {\n    Log.log('=================');\n    Log.log(' Builds Statuses ');\n    Log.log('=================\\n');\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    buildStatus.jobs.forEach((job, i) => {\n      let platform, packageExtension;\n      if (job.platform === 'ios') {\n        platform = 'iOS';\n        packageExtension = 'IPA';\n      } else {\n        platform = 'Android';\n        packageExtension = 'APK';\n      }\n\n      Log.log(\n        `### ${i} | ${platform} | ${UrlUtils.constructBuildLogsUrl({\n          buildId: job.id,\n          projectSlug: this.manifest.slug,\n          username: username ?? undefined,\n        })} ###`\n      );\n\n      const hasPriorityBuilds =\n        (buildStatus.numberOfRemainingPriorityBuilds ?? 0) > 0 ||\n        buildStatus.hasUnlimitedPriorityBuilds;\n      const shouldShowUpgradeInfo =\n        !hasPriorityBuilds &&\n        i === 0 &&\n        job.priority === 'normal' &&\n        buildStatus.canPurchasePriorityBuilds;\n      let status;\n      switch (job.status) {\n        case 'pending':\n        case 'sent-to-queue':\n          status = `Build waiting in queue...\\nQueue length: ${chalk.underline(\n            UrlUtils.constructTurtleStatusUrl()\n          )}`;\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.dev/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'started':\n          status = 'Build started...';\n          break;\n        case 'in-progress':\n          status = 'Build in progress...';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.dev/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'finished':\n          status = 'Build finished.';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nLooks like this build could have been faster.\\nRead more about priority builds at ${chalk.underline(\n              'https://expo.dev/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'errored':\n          status = 'There was an error with this build.';\n          if (job.id) {\n            status += `\n\nWhen requesting support, please provide this build ID:\n\n${job.id}\n`;\n          }\n          break;\n        default:\n          status = '';\n          break;\n      }\n\n      Log.log(status);\n      if (job.status === 'finished') {\n        if (job.artifacts) {\n          Log.log(`${packageExtension}: ${job.artifacts.url}`);\n        } else {\n          Log.log(`Problem getting ${packageExtension} URL. Please try to build again.`);\n        }\n      }\n      Log.log();\n    });\n  }\n\n  async ensureReleaseExists() {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        duringBuild: true,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      Log.log('Looking for releases...');\n      const release = await getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel!,\n        platform: this.platform(),\n        owner: this.manifest.owner,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `expo publish` first.');\n      }\n      Log.log(\n        `Using existing release on channel \"${release.channel}\":\\n` +\n          `publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(\n    buildId: string,\n    { interval = 30, publicUrl }: { interval?: number; publicUrl?: string } = {}\n  ): Promise<any> {\n    Log.log(\n      `Waiting for build to complete.\\nYou can press Ctrl+C to exit. It won't cancel the build, you'll be able to monitor it at the printed URL.`\n    );\n    const spinner = ora().start();\n    let i = 0;\n    while (true) {\n      i++;\n      const result = await getBuildStatusAsync(this.projectDir, {\n        current: false,\n        ...(publicUrl ? { publicUrl } : {}),\n      });\n\n      const jobs = result.jobs?.filter((job: BuildJobFields) => job.id === buildId);\n      const job = jobs ? jobs[0] : null;\n      if (job) {\n        switch (job.status) {\n          case 'finished':\n            spinner.succeed('Build finished.');\n            return job;\n          case 'pending':\n          case 'sent-to-queue':\n            spinner.text = 'Build queued...';\n            break;\n          case 'started':\n          case 'in-progress':\n            spinner.text = 'Build in progress...';\n            break;\n          case 'errored':\n            spinner.fail('Build failed.');\n            throw new BuildError(`Standalone build failed!`);\n          default:\n            spinner.warn('Unknown status.');\n            throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n        }\n      } else if (i > 5) {\n        spinner.warn('Unknown status.');\n        throw new BuildError(`Failed to locate build job for id \"${buildId}\"`);\n      }\n      await sleep(secondsToMilliseconds(interval));\n    }\n  }\n\n  async build(expIds?: string[]) {\n    const { publicUrl } = this.options;\n    const platform = this.platform();\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n\n    let opts: Record<string, any> = {\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n      ...(publicUrl ? { publicUrl } : {}),\n    };\n\n    if (platform === PLATFORMS.IOS) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n        bundleIdentifier,\n      };\n    } else if (platform === PLATFORMS.ANDROID) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n      };\n    }\n\n    // call out to build api here with url\n    const result = await startBuildAsync(this.projectDir, opts);\n\n    const { id: buildId, priority, canPurchasePriorityBuilds } = result;\n\n    Log.log('Build started, it may take a few minutes to complete.');\n    Log.log(\n      `You can check the queue length at ${chalk.underline(UrlUtils.constructTurtleStatusUrl())}\\n`\n    );\n    if (priority === 'normal' && canPurchasePriorityBuilds) {\n      Log.log(\n        'You can make this faster. 🐢\\nGet priority builds at: https://expo.dev/settings/billing\\n'\n      );\n    }\n\n    const user = await UserManager.getCurrentUserAsync();\n\n    if (buildId) {\n      const url = UrlUtils.constructBuildLogsUrl({\n        buildId,\n        projectSlug: this.manifest.slug,\n        username: this.manifest.owner || (user?.kind === 'user' ? user.username : undefined),\n      });\n\n      Log.log(`You can monitor the build at\\n\\n ${chalk.underline(url)}\\n`);\n    }\n\n    if (this.options.wait) {\n      const waitOpts = publicUrl ? { publicUrl } : {};\n      const completedJob = await this.wait(buildId, waitOpts);\n      const artifactUrl = completedJob.artifactId\n        ? UrlUtils.constructArtifactUrl(completedJob.artifactId)\n        : completedJob.artifacts.url;\n      Log.addNewLineIfNone();\n      Log.log(\n        `${chalk.green('Successfully built standalone app:')} ${chalk.underline(artifactUrl)}`\n      );\n    } else {\n      Log.log('Alternatively, run `expo build:status` to monitor it from the command line.');\n    }\n  }\n\n  platform(): Platform {\n    return PLATFORMS.ALL;\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;;;AAEA,MAAMA,qBAAqB,GAAIC,OAAD,IAA6BA,OAAO,GAAG,IAArE;;AACe,MAAMC,WAAN,CAAkB;EAIb,MAAZC,YAAY,GAA8B;IAC9C,OAAO,MAAMC,kBAAA,CAAYC,mBAAZ,EAAb;EACD;;EAEDC,WAAW,CAAQC,UAAR,EAAmCC,OAAuB,GAAG,EAA7D,EAAiE;IAAA,KAAzDD,UAAyD,GAAzDA,UAAyD;IAAA,KAA9BC,OAA8B,GAA9BA,OAA8B;;IAAA;;IAAA;;IAC1E,KAAKC,aAAL,GAAqB,IAAAC,mBAAA,EAAU,KAAKH,UAAf,CAArB;IACA,KAAKI,QAAL,GAAgB,KAAKF,aAAL,CAAmBG,GAAnC;EACD;;EAESC,mBAAmB,GAAG;IAC9B;IACA,KAAKJ,aAAL,GAAqB,IAAAC,mBAAA,EAAU,KAAKH,UAAf,CAArB;IACA,KAAKI,QAAL,GAAgB,KAAKF,aAAL,CAAmBG,GAAnC;EACD;;EAEY,MAAPE,OAAO,GAAG;IACd,IAAI;MACF,MAAM,KAAKC,kBAAL,EAAN;MACA,MAAM,KAAKC,GAAL,EAAN;IACD,CAHD,CAGE,OAAOC,CAAP,EAAe;MACf,IAAI,EAAEA,CAAC,YAAYC,qBAAf,CAAJ,EAAgC;QAC9B,MAAMD,CAAN;MACD,CAFD,MAEO;QACLE,cAAA,CAAIC,KAAJ,CAAUH,CAAC,CAACI,OAAZ;;QACAC,OAAO,CAACC,IAAR,CAAa,CAAb;MACD;IACF;EACF;;EAEQ,MAAHP,GAAG,GAAkB;IACzB,MAAM,IAAIQ,KAAJ,CAAU,8BAAV,CAAN;EACD;;EAEuB,MAAlBC,kBAAkB,GAAG;IACzB,IAAI;MACF,MAAM,KAAKV,kBAAL,EAAN;MACA,MAAM,KAAKW,WAAL,EAAN;IACD,CAHD,CAGE,OAAOT,CAAP,EAAe;MACf,IAAI,EAAEA,CAAC,YAAYC,qBAAf,CAAJ,EAAgC;QAC9B,MAAMD,CAAN;MACD,CAFD,MAEO;QACLE,cAAA,CAAIC,KAAJ,CAAUH,CAAC,CAACI,OAAZ;;QACAC,OAAO,CAACC,IAAR,CAAa,CAAb;MACD;IACF;EACF;;EAEuB,MAAlBR,kBAAkB,GAAkB;IACxC,MAAM,KAAKY,kBAAL,EAAN,CADwC,CAExC;IACA;;IACAvB,kBAAA,CAAYwB,eAAZ,EACE;IACA,MAAM,KAAKzB,YAAL,EAFR,EAGE,KAAKM,aAAL,CAAmBG,GAHrB;EAKD;;EAEuB,MAAlBe,kBAAkB,GAAkB;IACxC,IAAI,KAAKhB,QAAL,CAAckB,UAAlB,EAA8B;MAC5BV,cAAA,CAAIC,KAAJ,CAAW,eAAc,KAAKU,QAAL,EAAgB,2CAAzC;;MACAR,OAAO,CAACC,IAAR,CAAa,CAAb;IACD,CAJuC,CAMxC;;;IACA,MAAMQ,2BAA2B,GAAG,MAAMC,eAAA,CAASC,gCAAT,EAA1C;;IACA,IAAIC,iBAAA,CAAOC,KAAP,CAAa,KAAKxB,QAAL,CAAcyB,UAA3B,MAA4CL,2BAAhD,EAA6E;MAC3E,MAAM;QAAEM;MAAF,IAAc,MAAML,eAAA,CAASM,6BAAT,EAA1B;;MACAnB,cAAA,CAAIoB,IAAJ,CACG,QAAOR,2BAA4B,YAAWS,gBAAA,CAAMC,IAAN,CAC7C,YAD6C,CAE7C,qEAAoEP,iBAAA,CAAOC,KAAP,CACpEE,OADoE,CAEpE,oFALJ;IAOD;EACF;;EAE4B,MAAvBK,uBAAuB,GAAG;IAC9BvB,cAAA,CAAIwB,GAAJ,CAAQ,+CAAR;;IACA,MAAMC,WAAW,GAAG,MAAM,IAAAC,0CAAA,EAAoB,KAAKtC,UAAzB,EAAqC;MAC7DuB,QAAQ,EAAE,KAAKA,QAAL,EADmD;MAE7DgB,OAAO,EAAE,IAFoD;MAG7DC,cAAc,EAAE,KAAKvC,OAAL,CAAauC,cAHgC;MAI7DC,SAAS,EAAE,KAAKxC,OAAL,CAAawC,SAJqC;MAK7DZ,UAAU,EAAE,KAAKzB,QAAL,CAAcyB;IALmC,CAArC,CAA1B;;IAQA,IAAIQ,WAAW,CAACK,IAAZ,IAAoBL,WAAW,CAACK,IAAZ,CAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;MACnD,MAAM,KAAIhC,qBAAJ,EAAe,qEAAf,CAAN;IACD;EACF;;EAEgB,MAAXQ,WAAW,CAACI,QAAmC,GAAG,KAAvC,EAA6D;IAC5EX,cAAA,CAAIwB,GAAJ,CAAQ,6BAAR;;IAEA,MAAMC,WAAW,GAAG,MAAM,IAAAC,0CAAA,EAAoB,KAAKtC,UAAzB,EAAqC;MAC7DuB,QAD6D;MAE7DgB,OAAO,EAAE,KAFoD;MAG7DC,cAAc,EAAE,KAAKvC,OAAL,CAAauC;IAHgC,CAArC,CAA1B;;IAMA,IAAI,SAASH,WAAT,IAAwBA,WAAW,CAACO,GAAxC,EAA6C;MAC3C,MAAM,IAAI3B,KAAJ,CAAU,sDAAV,CAAN;IACD;;IAED,IAAI,EAAEoB,WAAW,CAACK,IAAZ,IAAoBL,WAAW,CAACK,IAAZ,CAAiBC,MAAvC,CAAJ,EAAoD;MAClD/B,cAAA,CAAIwB,GAAJ,CAAQ,0DAAR;;MACA;IACD;;IAED,MAAM,KAAKS,gBAAL,CAAsB;MAC1BH,IAAI,EAAEL,WAAW,CAACK,IADQ;MAE1BI,yBAAyB,EAAET,WAAW,CAACS,yBAFb;MAG1BC,+BAA+B,EAAEV,WAAW,CAACU,+BAHnB;MAI1BC,0BAA0B,EAAEX,WAAW,CAACW;IAJd,CAAtB,CAAN;EAMD;;EAE2B,MAAtBC,sBAAsB,GAAkB;IAC5CrC,cAAA,CAAIwB,GAAJ,CAAQ,4CAAR;;IAEA,MAAMc,WAAW,GAAG,MAAM,IAAAC,gDAAA,EACxB,KAAKlD,OAAL,CAAauC,cADW,EAExB,KAAKjB,QAAL,EAFwB,EAGxB,KAAKnB,QAAL,CAAcyB,UAHU,EAIxB,KAAKzB,QAAL,CAAcgD,IAJU,EAKxB,KAAKhD,QAAL,CAAciD,KALU,CAA1B;;IAOA,IAAIH,WAAW,CAACI,QAAhB,EAA0B;MACxB1C,cAAA,CAAIoB,IAAJ,CAAU;AAChB,uBAAuBC,gBAAA,CAAMsB,SAAN,CACf,uDADe,CAEf,8EAHF;;MAKA3C,cAAA,CAAIoB,IAAJ,CACG,yFAAwFC,gBAAA,CAAMsB,SAAN,CACvFL,WAAW,CAACM,WAD2E,CAEvF,EAHJ;;MAKA5C,cAAA,CAAI6C,OAAJ;IACD;EACF;;EAEqB,MAAhBZ,gBAAgB,CAACR,WAAD,EAKnB;IACDzB,cAAA,CAAIwB,GAAJ,CAAQ,mBAAR;;IACAxB,cAAA,CAAIwB,GAAJ,CAAQ,mBAAR;;IACAxB,cAAA,CAAIwB,GAAJ,CAAQ,qBAAR;;IAEA,MAAMsB,QAAQ,GAAG,KAAKtD,QAAL,CAAciD,KAAd,GACb,KAAKjD,QAAL,CAAciD,KADD,GAEb,MAAMxD,kBAAA,CAAY8D,uBAAZ,EAFV;IAIAtB,WAAW,CAACK,IAAZ,CAAiBkB,OAAjB,CAAyB,CAACC,GAAD,EAAMC,CAAN,KAAY;MAAA;;MACnC,IAAIvC,QAAJ,EAAcwC,gBAAd;;MACA,IAAIF,GAAG,CAACtC,QAAJ,KAAiB,KAArB,EAA4B;QAC1BA,QAAQ,GAAG,KAAX;QACAwC,gBAAgB,GAAG,KAAnB;MACD,CAHD,MAGO;QACLxC,QAAQ,GAAG,SAAX;QACAwC,gBAAgB,GAAG,KAAnB;MACD;;MAEDnD,cAAA,CAAIwB,GAAJ,CACG,OAAM0B,CAAE,MAAKvC,QAAS,MAAKyC,QAAQ,GAACC,qBAAT,CAA+B;QACzDC,OAAO,EAAEL,GAAG,CAACM,EAD4C;QAEzDC,WAAW,EAAE,KAAKhE,QAAL,CAAcgD,IAF8B;QAGzDM,QAAQ,EAAEA,QAAF,aAAEA,QAAF,cAAEA,QAAF,GAAcW;MAHmC,CAA/B,CAIzB,MALL;;MAQA,MAAMC,iBAAiB,GACrB,0BAACjC,WAAW,CAACU,+BAAb,yEAAgD,CAAhD,IAAqD,CAArD,IACAV,WAAW,CAACW,0BAFd;MAGA,MAAMuB,qBAAqB,GACzB,CAACD,iBAAD,IACAR,CAAC,KAAK,CADN,IAEAD,GAAG,CAACW,QAAJ,KAAiB,QAFjB,IAGAnC,WAAW,CAACS,yBAJd;MAKA,IAAI2B,MAAJ;;MACA,QAAQZ,GAAG,CAACY,MAAZ;QACE,KAAK,SAAL;QACA,KAAK,eAAL;UACEA,MAAM,GAAI,4CAA2CxC,gBAAA,CAAMsB,SAAN,CACnDS,QAAQ,GAACU,wBAAT,EADmD,CAEnD,EAFF;;UAGA,IAAIH,qBAAJ,EAA2B;YACzBE,MAAM,IAAK,+CAA8CxC,gBAAA,CAAMsB,SAAN,CACvD,mCADuD,CAEvD,GAFF;UAGD;;UACD;;QACF,KAAK,SAAL;UACEkB,MAAM,GAAG,kBAAT;UACA;;QACF,KAAK,aAAL;UACEA,MAAM,GAAG,sBAAT;;UACA,IAAIF,qBAAJ,EAA2B;YACzBE,MAAM,IAAK,+CAA8CxC,gBAAA,CAAMsB,SAAN,CACvD,mCADuD,CAEvD,GAFF;UAGD;;UACD;;QACF,KAAK,UAAL;UACEkB,MAAM,GAAG,iBAAT;;UACA,IAAIF,qBAAJ,EAA2B;YACzBE,MAAM,IAAK,uFAAsFxC,gBAAA,CAAMsB,SAAN,CAC/F,mCAD+F,CAE/F,GAFF;UAGD;;UACD;;QACF,KAAK,SAAL;UACEkB,MAAM,GAAG,qCAAT;;UACA,IAAIZ,GAAG,CAACM,EAAR,EAAY;YACVM,MAAM,IAAK;AACvB;AACA;AACA;AACA,EAAEZ,GAAG,CAACM,EAAG;AACT,CALY;UAMD;;UACD;;QACF;UACEM,MAAM,GAAG,EAAT;UACA;MA5CJ;;MA+CA7D,cAAA,CAAIwB,GAAJ,CAAQqC,MAAR;;MACA,IAAIZ,GAAG,CAACY,MAAJ,KAAe,UAAnB,EAA+B;QAC7B,IAAIZ,GAAG,CAACc,SAAR,EAAmB;UACjB/D,cAAA,CAAIwB,GAAJ,CAAS,GAAE2B,gBAAiB,KAAIF,GAAG,CAACc,SAAJ,CAAcC,GAAI,EAAlD;QACD,CAFD,MAEO;UACLhE,cAAA,CAAIwB,GAAJ,CAAS,mBAAkB2B,gBAAiB,kCAA5C;QACD;MACF;;MACDnD,cAAA,CAAIwB,GAAJ;IACD,CAnFD;EAoFD;;EAEwB,MAAnByC,mBAAmB,GAAG;IAC1B,IAAI,KAAK5E,OAAL,CAAa6E,OAAjB,EAA0B;MACxB,MAAM;QAAEC,GAAF;QAAOH,GAAP;QAAYhC;MAAZ,IAAoB,MAAM,IAAAoC,2BAAA,EAAc,KAAKhF,UAAnB,EAA+B,EAC7D,GAAG,KAAKC,OADqD;QAE7DgF,WAAW,EAAE;MAFgD,CAA/B,CAAhC;;MAIA,IAAIrC,GAAJ,EAAS;QACP,MAAM,KAAIjC,qBAAJ,EAAgB,wDAAuDiC,GAAI,EAA3E,CAAN;MACD,CAFD,MAEO,IAAI,CAACgC,GAAD,IAAQA,GAAG,KAAK,EAApB,EAAwB;QAC7B,MAAM,KAAIjE,qBAAJ,EAAe,qDAAf,CAAN;MACD;;MACD,OAAOoE,GAAP;IACD,CAXD,MAWO;MACLnE,cAAA,CAAIwB,GAAJ,CAAQ,yBAAR;;MACA,MAAM8C,OAAO,GAAG,MAAM,IAAAC,8CAAA,EAAsB,KAAKnF,UAA3B,EAAuC;QAC3DwC,cAAc,EAAE,KAAKvC,OAAL,CAAauC,cAD8B;QAE3DjB,QAAQ,EAAE,KAAKA,QAAL,EAFiD;QAG3D8B,KAAK,EAAE,KAAKjD,QAAL,CAAciD;MAHsC,CAAvC,CAAtB;;MAKA,IAAI,CAAC6B,OAAL,EAAc;QACZ,MAAM,KAAIvE,qBAAJ,EAAe,kEAAf,CAAN;MACD;;MACDC,cAAA,CAAIwB,GAAJ,CACG,sCAAqC8C,OAAO,CAACE,OAAQ,MAAtD,GACG,kBAAiBF,OAAO,CAACG,aAAc,sBAAqBH,OAAO,CAACI,aAAc,EAFvF;;MAIA,OAAO,CAACJ,OAAO,CAACG,aAAT,CAAP;IACD;EACF;;EAES,MAAJE,IAAI,CACRrB,OADQ,EAER;IAAEsB,QAAQ,GAAG,EAAb;IAAiB/C;EAAjB,IAA0E,EAFlE,EAGM;IACd7B,cAAA,CAAIwB,GAAJ,CACG,2IADH;;IAGA,MAAMqD,OAAO,GAAG,IAAAC,cAAA,IAAMC,KAAN,EAAhB;IACA,IAAI7B,CAAC,GAAG,CAAR;;IACA,OAAO,IAAP,EAAa;MAAA;;MACXA,CAAC;MACD,MAAM8B,MAAM,GAAG,MAAM,IAAAtD,0CAAA,EAAoB,KAAKtC,UAAzB,EAAqC;QACxDuC,OAAO,EAAE,KAD+C;QAExD,IAAIE,SAAS,GAAG;UAAEA;QAAF,CAAH,GAAmB,EAAhC;MAFwD,CAArC,CAArB;MAKA,MAAMC,IAAI,mBAAGkD,MAAM,CAAClD,IAAV,iDAAG,aAAamD,MAAb,CAAqBhC,GAAD,IAAyBA,GAAG,CAACM,EAAJ,KAAWD,OAAxD,CAAb;MACA,MAAML,GAAG,GAAGnB,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAa,IAA7B;;MACA,IAAImB,GAAJ,EAAS;QACP,QAAQA,GAAG,CAACY,MAAZ;UACE,KAAK,UAAL;YACEgB,OAAO,CAACK,OAAR,CAAgB,iBAAhB;YACA,OAAOjC,GAAP;;UACF,KAAK,SAAL;UACA,KAAK,eAAL;YACE4B,OAAO,CAACM,IAAR,GAAe,iBAAf;YACA;;UACF,KAAK,SAAL;UACA,KAAK,aAAL;YACEN,OAAO,CAACM,IAAR,GAAe,sBAAf;YACA;;UACF,KAAK,SAAL;YACEN,OAAO,CAACO,IAAR,CAAa,eAAb;YACA,MAAM,KAAIrF,qBAAJ,EAAgB,0BAAhB,CAAN;;UACF;YACE8E,OAAO,CAACzD,IAAR,CAAa,iBAAb;YACA,MAAM,KAAIrB,qBAAJ,EAAgB,mBAAkBkD,GAAG,CAACY,MAAO,cAA7C,CAAN;QAjBJ;MAmBD,CApBD,MAoBO,IAAIX,CAAC,GAAG,CAAR,EAAW;QAChB2B,OAAO,CAACzD,IAAR,CAAa,iBAAb;QACA,MAAM,KAAIrB,qBAAJ,EAAgB,sCAAqCuD,OAAQ,GAA7D,CAAN;MACD;;MACD,MAAM,IAAA+B,gBAAA,EAAMxG,qBAAqB,CAAC+F,QAAD,CAA3B,CAAN;IACD;EACF;;EAEU,MAALU,KAAK,CAACC,MAAD,EAAoB;IAAA;;IAC7B,MAAM;MAAE1D;IAAF,IAAgB,KAAKxC,OAA3B;IACA,MAAMsB,QAAQ,GAAG,KAAKA,QAAL,EAAjB;IACA,MAAM6E,gBAAgB,yBAAG,KAAKhG,QAAL,CAAciG,GAAjB,uDAAG,mBAAmBD,gBAA5C;IAEA,IAAIE,IAAyB,GAAG;MAC9BH,MAD8B;MAE9B5E,QAF8B;MAG9BiB,cAAc,EAAE,KAAKvC,OAAL,CAAauC,cAHC;MAI9B,IAAIC,SAAS,GAAG;QAAEA;MAAF,CAAH,GAAmB,EAAhC;IAJ8B,CAAhC;;IAOA,IAAIlB,QAAQ,KAAKgF,sBAAA,CAAUC,GAA3B,EAAgC;MAC9BF,IAAI,GAAG,EACL,GAAGA,IADE;QAELG,IAAI,EAAE,KAAKxG,OAAL,CAAawG,IAFd;QAGLL;MAHK,CAAP;IAKD,CAND,MAMO,IAAI7E,QAAQ,KAAKgF,sBAAA,CAAUG,OAA3B,EAAoC;MACzCJ,IAAI,GAAG,EACL,GAAGA,IADE;QAELG,IAAI,EAAE,KAAKxG,OAAL,CAAawG;MAFd,CAAP;IAID,CAvB4B,CAyB7B;;;IACA,MAAMb,MAAM,GAAG,MAAM,IAAAe,kCAAA,EAAgB,KAAK3G,UAArB,EAAiCsG,IAAjC,CAArB;IAEA,MAAM;MAAEnC,EAAE,EAAED,OAAN;MAAeM,QAAf;MAAyB1B;IAAzB,IAAuD8C,MAA7D;;IAEAhF,cAAA,CAAIwB,GAAJ,CAAQ,uDAAR;;IACAxB,cAAA,CAAIwB,GAAJ,CACG,qCAAoCH,gBAAA,CAAMsB,SAAN,CAAgBS,QAAQ,GAACU,wBAAT,EAAhB,CAAqD,IAD5F;;IAGA,IAAIF,QAAQ,KAAK,QAAb,IAAyB1B,yBAA7B,EAAwD;MACtDlC,cAAA,CAAIwB,GAAJ,CACE,2FADF;IAGD;;IAED,MAAMwE,IAAI,GAAG,MAAM/G,kBAAA,CAAYgH,mBAAZ,EAAnB;;IAEA,IAAI3C,OAAJ,EAAa;MACX,MAAMU,GAAG,GAAGZ,QAAQ,GAACC,qBAAT,CAA+B;QACzCC,OADyC;QAEzCE,WAAW,EAAE,KAAKhE,QAAL,CAAcgD,IAFc;QAGzCM,QAAQ,EAAE,KAAKtD,QAAL,CAAciD,KAAd,KAAwB,CAAAuD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,IAAN,MAAe,MAAf,GAAwBF,IAAI,CAAClD,QAA7B,GAAwCW,SAAhE;MAH+B,CAA/B,CAAZ;;MAMAzD,cAAA,CAAIwB,GAAJ,CAAS,oCAAmCH,gBAAA,CAAMsB,SAAN,CAAgBqB,GAAhB,CAAqB,IAAjE;IACD;;IAED,IAAI,KAAK3E,OAAL,CAAasF,IAAjB,EAAuB;MACrB,MAAMwB,QAAQ,GAAGtE,SAAS,GAAG;QAAEA;MAAF,CAAH,GAAmB,EAA7C;MACA,MAAMuE,YAAY,GAAG,MAAM,KAAKzB,IAAL,CAAUrB,OAAV,EAAmB6C,QAAnB,CAA3B;MACA,MAAME,WAAW,GAAGD,YAAY,CAACE,UAAb,GAChBlD,QAAQ,GAACmD,oBAAT,CAA8BH,YAAY,CAACE,UAA3C,CADgB,GAEhBF,YAAY,CAACrC,SAAb,CAAuBC,GAF3B;;MAGAhE,cAAA,CAAIwG,gBAAJ;;MACAxG,cAAA,CAAIwB,GAAJ,CACG,GAAEH,gBAAA,CAAMoF,KAAN,CAAY,oCAAZ,CAAkD,IAAGpF,gBAAA,CAAMsB,SAAN,CAAgB0D,WAAhB,CAA6B,EADvF;IAGD,CAVD,MAUO;MACLrG,cAAA,CAAIwB,GAAJ,CAAQ,6EAAR;IACD;EACF;;EAEDb,QAAQ,GAAa;IACnB,OAAOgF,sBAAA,CAAUe,GAAjB;EACD;;AAzY8B"}