{"version":3,"file":"fetchAndroidHashesAsync.js","names":["actionAsync","projectRoot","options","ctx","Context","init","nonInteractive","parent","outputPath","path","resolve","manifest","slug","assertSlug","experienceName","projectOwner","view","DownloadKeystore","quiet","runCredentialsManager","keystore","android","fetchKeystore","AndroidCredentials","logKeystoreHashes","keystorePath","keystorePassword","keyAlias","keyPassword","Log","log","warn","fs","remove"],"sources":["../../../src/commands/fetch/fetchAndroidHashesAsync.ts"],"sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { AndroidCredentials } from 'xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport Log from '../../log';\nimport { assertSlug, Options } from './utils';\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n  const outputPath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      await AndroidCredentials.logKeystoreHashes({\n        keystorePath: outputPath,\n        keystorePassword: keystore.keystorePassword,\n        keyAlias: keystore.keyAlias,\n        keyPassword: keystore.keyPassword,\n      });\n      Log.log(\n        `\\nNote: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.`\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(outputPath);\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;AAEO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAiF;EAAA;;EACtF,MAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;EACA,MAAMD,GAAG,CAACE,IAAJ,CAASJ,WAAT,EAAsB;IAC1BK,cAAc,qBAAEJ,OAAO,CAACK,MAAV,oDAAE,gBAAgBD;EADN,CAAtB,CAAN;EAGA,MAAME,UAAU,GAAGC,IAAI,GAACC,OAAL,CAAaT,WAAb,EAA2B,GAAEE,GAAG,CAACQ,QAAJ,CAAaC,IAAK,UAA/C,CAAnB;;EACA,IAAI;IACF,IAAAC,mBAAA,EAAWV,GAAG,CAACQ,QAAJ,CAAaC,IAAxB;IACA,MAAME,cAAc,GAAI,IAAGX,GAAG,CAACY,YAAa,IAAGZ,GAAG,CAACQ,QAAJ,CAAaC,IAAK,EAAjE;IACA,MAAMI,IAAI,GAAG,KAAIC,mCAAJ,EAAqBH,cAArB,EAAqC;MAChDN,UADgD;MAEhDU,KAAK,EAAE;IAFyC,CAArC,CAAb;IAIA,MAAM,IAAAC,8BAAA,EAAsBhB,GAAtB,EAA2Ba,IAA3B,CAAN;IACA,MAAMI,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,OAAJ,CAAYC,aAAZ,CAA0BR,cAA1B,CAAvB;;IAEA,IAAIM,QAAJ,EAAc;MACZ,MAAMG,yBAAA,CAAmBC,iBAAnB,CAAqC;QACzCC,YAAY,EAAEjB,UAD2B;QAEzCkB,gBAAgB,EAAEN,QAAQ,CAACM,gBAFc;QAGzCC,QAAQ,EAAEP,QAAQ,CAACO,QAHsB;QAIzCC,WAAW,EAAER,QAAQ,CAACQ;MAJmB,CAArC,CAAN;;MAMAC,cAAA,CAAIC,GAAJ,CACG,mMADH;IAGD,CAVD,MAUO;MACLD,cAAA,CAAIE,IAAJ,CAAS,iDAAT;IACD;EACF,CAvBD,SAuBU;IACR,MAAMC,EAAE,GAACC,MAAH,CAAUzB,UAAV,CAAN;EACD;AACF"}