{"version":3,"file":"fetchAndroidUploadCertAsync.js","names":["actionAsync","projectRoot","options","ctx","Context","init","nonInteractive","parent","keystorePath","path","resolve","manifest","slug","uploadKeyFilename","maybeRenameExistingFileAsync","uploadKeyPath","assertSlug","experienceName","projectOwner","view","DownloadKeystore","outputPath","quiet","runCredentialsManager","keystore","android","fetchKeystore","Log","log","AndroidCredentials","exportCertBase64","keystorePassword","keyAlias","warn","fs","remove"],"sources":["../../../src/commands/fetch/fetchAndroidUploadCertAsync.ts"],"sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { AndroidCredentials } from 'xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport Log from '../../log';\nimport { assertSlug, maybeRenameExistingFileAsync, Options } from './utils';\n\nexport async function actionAsync(projectRoot: string, options: Options): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectRoot, {\n    nonInteractive: options.parent?.nonInteractive,\n  });\n\n  const keystorePath = path.resolve(projectRoot, `${ctx.manifest.slug}.tmp.jks`);\n\n  const uploadKeyFilename = `${ctx.manifest.slug}_upload_cert.pem`;\n  await maybeRenameExistingFileAsync(projectRoot, uploadKeyFilename);\n  const uploadKeyPath = path.resolve(projectRoot, uploadKeyFilename);\n\n  try {\n    assertSlug(ctx.manifest.slug);\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath: keystorePath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      Log.log(`Writing upload key to ${uploadKeyPath}`);\n      await AndroidCredentials.exportCertBase64(\n        {\n          keystorePath,\n          keystorePassword: keystore.keystorePassword,\n          keyAlias: keystore.keyAlias,\n        },\n        uploadKeyPath\n      );\n    } else {\n      Log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(keystorePath);\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;AAEO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAiF;EAAA;;EACtF,MAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;EACA,MAAMD,GAAG,CAACE,IAAJ,CAASJ,WAAT,EAAsB;IAC1BK,cAAc,qBAAEJ,OAAO,CAACK,MAAV,oDAAE,gBAAgBD;EADN,CAAtB,CAAN;EAIA,MAAME,YAAY,GAAGC,IAAI,GAACC,OAAL,CAAaT,WAAb,EAA2B,GAAEE,GAAG,CAACQ,QAAJ,CAAaC,IAAK,UAA/C,CAArB;EAEA,MAAMC,iBAAiB,GAAI,GAAEV,GAAG,CAACQ,QAAJ,CAAaC,IAAK,kBAA/C;EACA,MAAM,IAAAE,qCAAA,EAA6Bb,WAA7B,EAA0CY,iBAA1C,CAAN;EACA,MAAME,aAAa,GAAGN,IAAI,GAACC,OAAL,CAAaT,WAAb,EAA0BY,iBAA1B,CAAtB;;EAEA,IAAI;IACF,IAAAG,mBAAA,EAAWb,GAAG,CAACQ,QAAJ,CAAaC,IAAxB;IACA,MAAMK,cAAc,GAAI,IAAGd,GAAG,CAACe,YAAa,IAAGf,GAAG,CAACQ,QAAJ,CAAaC,IAAK,EAAjE;IACA,MAAMO,IAAI,GAAG,KAAIC,mCAAJ,EAAqBH,cAArB,EAAqC;MAChDI,UAAU,EAAEb,YADoC;MAEhDc,KAAK,EAAE;IAFyC,CAArC,CAAb;IAIA,MAAM,IAAAC,8BAAA,EAAsBpB,GAAtB,EAA2BgB,IAA3B,CAAN;IACA,MAAMK,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,OAAJ,CAAYC,aAAZ,CAA0BT,cAA1B,CAAvB;;IAEA,IAAIO,QAAJ,EAAc;MACZG,cAAA,CAAIC,GAAJ,CAAS,yBAAwBb,aAAc,EAA/C;;MACA,MAAMc,yBAAA,CAAmBC,gBAAnB,CACJ;QACEtB,YADF;QAEEuB,gBAAgB,EAAEP,QAAQ,CAACO,gBAF7B;QAGEC,QAAQ,EAAER,QAAQ,CAACQ;MAHrB,CADI,EAMJjB,aANI,CAAN;IAQD,CAVD,MAUO;MACLY,cAAA,CAAIM,IAAJ,CAAS,iDAAT;IACD;EACF,CAvBD,SAuBU;IACR,MAAMC,EAAE,GAACC,MAAH,CAAU3B,YAAV,CAAN;EACD;AACF"}