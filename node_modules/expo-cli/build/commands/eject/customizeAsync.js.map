{"version":3,"file":"customizeAsync.js","names":["maybeWarnToCommitAsync","projectRoot","workingTreeStatus","result","spawnAsync","stdout","Log","log","chalk","yellow","dependencyMap","resolveFromLocalOrGlobal","moduleId","resolved","resolveFrom","silent","require","resolve","generateFilesAsync","staticPath","options","answer","templateFolder","promises","file","Object","keys","includes","projectFilePath","path","push","fs","copy","join","overwrite","recursive","packageManager","PackageManager","createForProject","dependency","addDevAsync","fileName","basename","src","dest","pathExists","Error","Promise","all","actionAsync","force","warnAboutLocalCLI","localCmd","exp","getConfig","skipSDKVersionRequirement","dirname","files","readdir","filter","item","web","allFiles","map","values","localProjectFile","exists","existsSync","title","value","disabled","description","red","length","bold","prompts","type","name","message","hint","warn","limit","instructions","choices"],"sources":["../../../src/commands/eject/customizeAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport prompts from 'prompts';\nimport resolveFrom from 'resolve-from';\n\nimport Log from '../../log';\nimport { warnAboutLocalCLI } from '../../utils/migration';\n\ntype Options = { force: boolean };\n\nasync function maybeWarnToCommitAsync(projectRoot: string) {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'dirty') {\n    Log.log(\n      chalk.yellow(\n        'You should commit your changes before generating code into the root of your project.'\n      )\n    );\n  }\n}\n\nconst dependencyMap: { [key: string]: string[] } = {\n  'babel.config.js': ['babel-preset-expo'],\n  'webpack.config.js': ['@expo/webpack-config'],\n};\n\nfunction resolveFromLocalOrGlobal(projectRoot: string, moduleId: string) {\n  const resolved = resolveFrom.silent(projectRoot, moduleId);\n  if (resolved) {\n    return resolved;\n  }\n  return require.resolve(moduleId);\n}\n\nasync function generateFilesAsync({\n  projectRoot,\n  staticPath,\n  options,\n  answer,\n  templateFolder,\n}: {\n  projectRoot: string;\n  staticPath: string;\n  options: Options;\n  answer: string[];\n  templateFolder: string;\n}) {\n  const promises = [];\n\n  for (const file of answer) {\n    if (Object.keys(dependencyMap).includes(file)) {\n      const projectFilePath = path.resolve(projectRoot, file);\n      // copy the file from template\n      promises.push(\n        fs.copy(\n          resolveFromLocalOrGlobal(projectRoot, path.join('@expo/webpack-config/template', file)),\n          projectFilePath,\n          { overwrite: true, recursive: true }\n        )\n      );\n\n      if (file in dependencyMap) {\n        const packageManager = PackageManager.createForProject(projectRoot, { log: Log.log });\n        for (const dependency of dependencyMap[file]) {\n          promises.push(packageManager.addDevAsync(dependency));\n        }\n      }\n    } else {\n      const fileName = path.basename(file);\n      const src = path.resolve(templateFolder, fileName);\n      const dest = path.resolve(projectRoot, staticPath, fileName);\n      if (await fs.pathExists(src)) {\n        promises.push(fs.copy(src, dest, { overwrite: true, recursive: true }));\n      } else {\n        throw new Error(`Expected template file for ${fileName} doesn't exist at path: ${src}`);\n      }\n    }\n  }\n  await Promise.all(promises);\n}\n\nexport async function actionAsync(projectRoot: string = './', options: Options = { force: false }) {\n  warnAboutLocalCLI(projectRoot, { localCmd: 'customize' });\n  // Get the static path (defaults to 'web/')\n  // Doesn't matter if expo is installed or which mode is used.\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const templateFolder = path.dirname(\n    resolveFromLocalOrGlobal(projectRoot, '@expo/webpack-config/web-default/index.html')\n  );\n\n  const files = (await fs.readdir(templateFolder)).filter(item => item !== 'icon.png');\n  const { web: { staticPath = 'web' } = {} } = exp;\n\n  const allFiles = [\n    ...Object.keys(dependencyMap),\n    ...files.map(file => path.join(staticPath, file)),\n  ];\n  const values = [];\n\n  for (const file of allFiles) {\n    const localProjectFile = path.resolve(projectRoot, file);\n    const exists = fs.existsSync(localProjectFile);\n\n    values.push({\n      title: file,\n      value: file,\n      // @ts-ignore: broken types\n      disabled: !options.force && exists,\n      description:\n        options.force && exists ? chalk.red('This will overwrite the existing file') : '',\n    });\n  }\n\n  if (!values.filter(({ disabled }) => !disabled).length) {\n    Log.log(\n      chalk.yellow('\\nAll of the custom web files already exist.') +\n        '\\nTo regenerate the files run:' +\n        chalk.bold(' expo customize:web --force\\n')\n    );\n    return;\n  }\n\n  await maybeWarnToCommitAsync(projectRoot);\n\n  const { answer } = await prompts({\n    type: 'multiselect',\n    name: 'answer',\n    message: 'Which files would you like to generate?',\n    hint: '- Space to select. Return to submit',\n    // @ts-ignore: broken types\n    warn: 'File exists, use --force to overwrite it.',\n    limit: values.length,\n    instructions: '',\n    choices: values,\n  });\n  if (!answer || answer.length === 0) {\n    Log.log('\\n\\u203A Exiting with no change...\\n');\n    return;\n  }\n  await generateFilesAsync({\n    projectRoot,\n    staticPath,\n    options,\n    answer,\n    templateFolder,\n  });\n}\n"],"mappings":"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"}