{"version":3,"file":"clearNativeFolder.js","names":["directoryExistsAsync","file","fs","stat","catch","isDirectory","clearNativeFolder","projectRoot","folders","step","logNewSection","join","Promise","all","map","folderName","remove","path","succeed","error","fail","message","hasRequiredAndroidFilesAsync","AndroidConfig","Paths","getAppBuildGradleAsync","getProjectBuildGradleAsync","getAndroidManifestAsync","getMainApplicationAsync","isAndroidProjectValidAsync","hasRequiredIOSFilesAsync","IOSConfig","getAppDelegate","getAllXcodeProjectPaths","getAllInfoPlistPaths","getAllPBXProjectPaths","isIOSProjectValidAsync","promptToClearMalformedNativeProjectsAsync","checkPlatforms","isAndroidValid","isIOSValid","includes","resolve","platforms","filter","Boolean","displayPlatforms","platform","chalk","cyan","length","isNonInteractive","confirmAsync","initial","Log","warn"],"sources":["../../../src/commands/eject/clearNativeFolder.ts"],"sourcesContent":["import { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport { isNonInteractive } from '../utils/environment';\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await fs.stat(file).catch(() => null))?.isDirectory() ?? false;\n}\n\nexport async function clearNativeFolder(projectRoot: string, folders: string[]) {\n  const step = logNewSection(`Clearing ${folders.join(', ')}`);\n  try {\n    await Promise.all(folders.map(folderName => fs.remove(path.join(projectRoot, folderName))));\n    step.succeed(`Cleared ${folders.join(', ')} code`);\n  } catch (error: any) {\n    step.fail(`Failed to delete ${folders.join(', ')} code: ${error.message}`);\n    throw error;\n  }\n}\n\nexport async function hasRequiredAndroidFilesAsync(projectRoot: string) {\n  try {\n    await Promise.all([\n      AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getProjectBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getAndroidManifestAsync(projectRoot),\n      AndroidConfig.Paths.getMainApplicationAsync(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isAndroidProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'android')))) {\n    return true;\n  }\n  return hasRequiredAndroidFilesAsync(projectRoot);\n}\n\nexport async function hasRequiredIOSFilesAsync(projectRoot: string) {\n  try {\n    // If any of the following required files are missing, then the project is malformed.\n    await Promise.all([\n      IOSConfig.Paths.getAppDelegate(projectRoot),\n      IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot),\n      IOSConfig.Paths.getAllInfoPlistPaths(projectRoot),\n      IOSConfig.Paths.getAllPBXProjectPaths(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function isIOSProjectValidAsync(projectRoot: string) {\n  // Only perform the check if the native folder is present.\n  if (!(await directoryExistsAsync(path.join(projectRoot, 'ios')))) {\n    return true;\n  }\n  return hasRequiredIOSFilesAsync(projectRoot);\n}\n\nexport async function promptToClearMalformedNativeProjectsAsync(\n  projectRoot: string,\n  checkPlatforms: string[]\n) {\n  const [isAndroidValid, isIOSValid] = await Promise.all([\n    checkPlatforms.includes('android')\n      ? isAndroidProjectValidAsync(projectRoot)\n      : Promise.resolve(true),\n    checkPlatforms.includes('ios') ? isIOSProjectValidAsync(projectRoot) : Promise.resolve(true),\n  ]);\n\n  if (isAndroidValid && isIOSValid) {\n    return;\n  }\n\n  const platforms = [!isAndroidValid && 'android', !isIOSValid && 'ios'].filter(\n    Boolean\n  ) as string[];\n\n  const displayPlatforms = platforms.map(platform => chalk.cyan(platform));\n  // Prompt which platforms to reset.\n  const message =\n    platforms.length > 1\n      ? `The ${displayPlatforms[0]} and ${displayPlatforms[1]} projects are malformed`\n      : `The ${displayPlatforms[0]} project is malformed`;\n\n  if (\n    // If the process is non-interactive, default to clearing the malformed native project.\n    // This would only happen on re-running eject.\n    isNonInteractive() ||\n    // Prompt to clear the native folders.\n    (await confirmAsync({\n      message: `${message}, would you like to clear the project files and reinitialize them?`,\n      initial: true,\n    }))\n  ) {\n    if (isNonInteractive()) {\n      Log.warn(`${message}, project files will be cleared and reinitialized.`);\n    }\n    await clearNativeFolder(projectRoot, platforms);\n  } else {\n    // Warn the user that the process may fail.\n    Log.warn('Continuing with malformed native projects');\n  }\n}\n"],"mappings":"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"}