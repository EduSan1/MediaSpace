{"version":3,"file":"Github.js","names":["isUrlOk","url","res","fetch","status","getRepoInfo","examplePath","username","name","t","_branch","file","pathname","split","filePath","replace","join","undefined","infoResponse","info","json","branch","RegExp","hasRepo","contentsUrl","packagePath","resolveTemplateArgAsync","tempDir","oraInstance","appName","template","templatePath","repoInfo","repoUrl","URL","error","code","fail","path","resolve","fs","existsSync","CommandError","extractLocalNpmTarballAsync","cwd","origin","chalk","red","AbortCommandError","found","text","bold","cyan","downloadAndExtractRepoAsync","root","projectName","basename","strip","length","Log","debug","extractNpmTarballFromUrlAsync","fileList"],"sources":["../../../src/commands/eject/Github.ts"],"sourcesContent":["import chalk from 'chalk';\nimport * as fs from 'fs-extra';\nimport fetch from 'node-fetch';\nimport { Ora } from 'ora';\nimport path from 'path';\n\nimport CommandError, { AbortCommandError } from '../../CommandError';\nimport Log from '../../log';\nimport { extractLocalNpmTarballAsync, extractNpmTarballFromUrlAsync } from '../utils/npm';\n\ntype RepoInfo = {\n  username: string;\n  name: string;\n  branch: string;\n  filePath: string;\n};\n\nasync function isUrlOk(url: string): Promise<boolean> {\n  try {\n    const res = await fetch(url);\n    return res.status === 200;\n  } catch {\n    return false;\n  }\n}\n\nasync function getRepoInfo(url: any, examplePath?: string): Promise<RepoInfo | undefined> {\n  const [, username, name, t, _branch, ...file] = url.pathname.split('/');\n  const filePath = examplePath ? examplePath.replace(/^\\//, '') : file.join('/');\n\n  // Support repos whose entire purpose is to be an example, e.g.\n  // https://github.com/:username/:my-cool-example-repo-name.\n  if (t === undefined) {\n    const infoResponse = await fetch(`https://api.github.com/repos/${username}/${name}`);\n    if (infoResponse.status !== 200) {\n      return;\n    }\n    const info = await infoResponse.json();\n    return { username, name, branch: info['default_branch'], filePath };\n  }\n\n  // If examplePath is available, the branch name takes the entire path\n  const branch = examplePath\n    ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${filePath}|/$`), '')\n    : _branch;\n\n  if (username && name && branch && t === 'tree') {\n    return { username, name, branch, filePath };\n  }\n  return undefined;\n}\n\nfunction hasRepo({ username, name, branch, filePath }: RepoInfo) {\n  const contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`;\n  const packagePath = `${filePath ? `/${filePath}` : ''}/package.json`;\n\n  return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);\n}\n\nexport async function resolveTemplateArgAsync(\n  tempDir: string,\n  oraInstance: Ora,\n  appName: string,\n  template: string,\n  templatePath?: string\n) {\n  let repoInfo: RepoInfo | undefined;\n\n  if (template) {\n    // @ts-ignore\n    let repoUrl: URL | undefined;\n\n    try {\n      // @ts-ignore\n      repoUrl = new URL(template);\n    } catch (error: any) {\n      if (error.code !== 'ERR_INVALID_URL') {\n        oraInstance.fail(error);\n        throw error;\n      }\n    }\n\n    if (!repoUrl) {\n      const templatePath = path.resolve(template);\n      if (!fs.existsSync(templatePath)) {\n        throw new CommandError(`template file does not exist: ${templatePath}`);\n      }\n\n      await extractLocalNpmTarballAsync(templatePath, { cwd: tempDir, name: appName });\n      return tempDir;\n    }\n\n    if (repoUrl.origin !== 'https://github.com') {\n      oraInstance.fail(\n        `Invalid URL: ${chalk.red(\n          `\"${template}\"`\n        )}. Only GitHub repositories are supported. Please use a GitHub URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    repoInfo = await getRepoInfo(repoUrl, templatePath);\n\n    if (!repoInfo) {\n      oraInstance.fail(\n        `Found invalid GitHub URL: ${chalk.red(`\"${template}\"`)}. Please fix the URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    const found = await hasRepo(repoInfo);\n\n    if (!found) {\n      oraInstance.fail(\n        `Could not locate the repository for ${chalk.red(\n          `\"${template}\"`\n        )}. Please check that the repository exists and try again.`\n      );\n      throw new AbortCommandError();\n    }\n  }\n\n  if (repoInfo) {\n    oraInstance.text = chalk.bold(\n      `Downloading files from repo ${chalk.cyan(template)}. This might take a moment.`\n    );\n\n    await downloadAndExtractRepoAsync(tempDir, repoInfo);\n  }\n\n  return true;\n}\n\nfunction downloadAndExtractRepoAsync(\n  root: string,\n  { username, name, branch, filePath }: RepoInfo\n): Promise<void> {\n  const projectName = path.basename(root);\n\n  const strip = filePath ? filePath.split('/').length + 1 : 1;\n\n  const url = `https://codeload.github.com/${username}/${name}/tar.gz/${branch}`;\n  Log.debug('Downloading tarball from:', url);\n  return extractNpmTarballFromUrlAsync(url, {\n    cwd: root,\n    name: projectName,\n    strip,\n    fileList: [`${name}-${branch}${filePath ? `/${filePath}` : ''}`],\n  });\n}\n"],"mappings":"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"}