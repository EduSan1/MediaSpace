{"version":3,"file":"prebuildAppAsync.js","names":["prebuildAsync","projectRoot","platforms","options","ensureValidPlatforms","assertPlatforms","exp","pkg","ensureConfigAsync","tempDir","temporary","directory","hasNewProjectFiles","needsPodInstall","hasNewDependencies","createNativeProjectsFromTemplateAsync","template","resolveTemplateOption","undefined","skipDependencyUpdate","shouldInstall","install","packageManager","CreateApp","resolvePackageManager","npm","yarn","installNodeDependenciesAsync","clean","configSyncingStep","logNewSection","managedConfig","configureProjectAsync","succeed","error","fail","podsInstalled","includes","installCocoaPodsAsync","Log","debug","warnIfDependenciesRequireAdditionalSetup","sdkVersion","Object","keys","_internal","pluginHistory","nodeInstall","podInstall"],"sources":["../../../src/commands/eject/prebuildAppAsync.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport temporary from 'tempy';\n\nimport Log from '../../log';\nimport { logNewSection } from '../../utils/ora';\nimport * as CreateApp from '../utils/CreateApp';\nimport configureProjectAsync from './configureProjectAsync';\nimport { createNativeProjectsFromTemplateAsync } from './createNativeProjectsFromTemplateAsync';\nimport { ensureConfigAsync } from './ensureConfigAsync';\nimport { installNodeDependenciesAsync } from './installNodeDependenciesAsync';\nimport { assertPlatforms, ensureValidPlatforms } from './platformOptions';\nimport { resolveTemplateOption } from './resolveTemplate';\nimport { warnIfDependenciesRequireAdditionalSetup } from './setupWarnings';\n\nexport type EjectAsyncOptions = {\n  verbose?: boolean;\n  force?: boolean;\n  template?: string;\n  install?: boolean;\n  packageManager?: 'npm' | 'yarn';\n  platforms: ModPlatform[];\n  skipDependencyUpdate?: string[];\n};\n\nexport type PrebuildResults = {\n  exp: ExpoConfig;\n  hasNewProjectFiles: boolean;\n  platforms: ModPlatform[];\n  podInstall: boolean;\n  nodeInstall: boolean;\n  packageManager: string;\n};\n\n/**\n * Entry point into the prebuild process, delegates to other helpers to perform various steps.\n *\n * 1. Create native projects (ios, android)\n * 2. Install node modules\n * 3. Apply config to native projects\n * 4. Install CocoaPods\n */\nexport async function prebuildAsync(\n  projectRoot: string,\n  { platforms, ...options }: EjectAsyncOptions\n): Promise<PrebuildResults> {\n  platforms = ensureValidPlatforms(platforms);\n  assertPlatforms(platforms);\n\n  const { exp, pkg } = await ensureConfigAsync({ projectRoot, platforms });\n  const tempDir = temporary.directory();\n\n  const {\n    hasNewProjectFiles,\n    needsPodInstall,\n    hasNewDependencies,\n  } = await createNativeProjectsFromTemplateAsync({\n    projectRoot,\n    exp,\n    pkg,\n    template: options.template != null ? resolveTemplateOption(options.template) : undefined,\n    tempDir,\n    platforms,\n    skipDependencyUpdate: options.skipDependencyUpdate,\n  });\n\n  // Install node modules\n  const shouldInstall = options?.install !== false;\n\n  const packageManager = CreateApp.resolvePackageManager({\n    install: shouldInstall,\n    npm: options?.packageManager === 'npm',\n    yarn: options?.packageManager === 'yarn',\n  });\n\n  if (shouldInstall) {\n    await installNodeDependenciesAsync(projectRoot, packageManager, {\n      // We delete the dependencies when new ones are added because native packages are more fragile.\n      // npm doesn't work well so we always run the cleaning step when npm is used in favor of yarn.\n      clean: hasNewDependencies || packageManager === 'npm',\n    });\n  }\n\n  // Apply Expo config to native projects\n  const configSyncingStep = logNewSection('Config syncing');\n  let managedConfig: ExpoConfig;\n  try {\n    managedConfig = await configureProjectAsync({\n      projectRoot,\n      platforms,\n    });\n    configSyncingStep.succeed('Config synced');\n  } catch (error: any) {\n    configSyncingStep.fail('Config sync failed');\n    throw error;\n  }\n\n  // Install CocoaPods\n  let podsInstalled: boolean = false;\n  // err towards running pod install less because it's slow and users can easily run npx pod-install afterwards.\n  if (platforms.includes('ios') && shouldInstall && needsPodInstall) {\n    podsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n  } else {\n    Log.debug('Skipped pod install');\n  }\n\n  warnIfDependenciesRequireAdditionalSetup(\n    pkg,\n    exp.sdkVersion,\n    Object.keys(managedConfig._internal?.pluginHistory ?? {})\n  );\n\n  return {\n    packageManager,\n    nodeInstall: options.install === false,\n    podInstall: !podsInstalled,\n    platforms,\n    hasNewProjectFiles,\n    exp,\n  };\n}\n"],"mappings":"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"}