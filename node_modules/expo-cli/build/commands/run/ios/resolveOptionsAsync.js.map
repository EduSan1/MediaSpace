{"version":3,"file":"resolveOptionsAsync.js","names":["ignoredPaths","findXcodeProjectPaths","projectRoot","extension","globSync","absolute","cwd","ignore","resolveXcodeProject","paths","length","name","isWorkspace","CommandError","isMac","process","platform","getDefaultUserTerminal","REACT_TERMINAL","TERM_PROGRAM","TERM","env","resolveNativeSchemeAsync","scheme","configuration","resolvedScheme","schemes","IOSConfig","BuildScheme","getRunnableSchemesFromXcodeproj","resolvedSchemeName","selectAsync","message","choices","map","value","isApp","type","Target","TargetType","APPLICATION","osType","title","chalk","bold","gray","nonInteractiveHelp","join","find","Log","log","resolveOptionsAsync","options","xcodeProject","port","bundler","resolvePortAsync","reuseExistingPort","defaultPort","profileMethod","path","basename","extname","device","resolveDeviceAsync","isSimulator","deviceType","startsWith","shouldSkipInitialBundling","shouldStartBundler","buildCache","terminal"],"sources":["../../../../src/commands/run/ios/resolveOptionsAsync.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../utils/prompts';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport * as XcodeBuild from './XcodeBuild';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\n\nexport type XcodeConfiguration = 'Debug' | 'Release';\n\nexport type Options = {\n  device?: string | boolean;\n  port?: number;\n  scheme?: string;\n  configuration?: XcodeConfiguration;\n  bundler?: boolean;\n  install?: boolean;\n  /** Should use derived data for builds. */\n  buildCache: boolean;\n};\n\nexport type ProjectInfo = {\n  isWorkspace: boolean;\n  name: string;\n};\n\nconst ignoredPaths = ['**/@(Carthage|Pods|vendor|node_modules)/**'];\n\nfunction findXcodeProjectPaths(\n  projectRoot: string,\n  extension: 'xcworkspace' | 'xcodeproj'\n): string[] {\n  return globSync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths,\n  });\n}\n\nfunction resolveXcodeProject(projectRoot: string): ProjectInfo {\n  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');\n  if (paths.length) {\n    return {\n      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.\n      // Also helps keep things consistent in monorepos.\n      name: paths[0],\n      // name: path.relative(projectRoot, paths[0]),\n      isWorkspace: true,\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');\n  if (paths.length) {\n    return { name: paths[0], isWorkspace: false };\n  }\n  throw new CommandError(`Xcode project not found in project: ${projectRoot}`);\n}\n\nconst isMac = process.platform === 'darwin';\n\nfunction getDefaultUserTerminal(): string | undefined {\n  const { REACT_TERMINAL, TERM_PROGRAM, TERM } = process.env;\n\n  if (REACT_TERMINAL) {\n    return REACT_TERMINAL;\n  }\n\n  if (isMac) {\n    return TERM_PROGRAM;\n  }\n\n  return TERM;\n}\n\nasync function resolveNativeSchemeAsync(\n  projectRoot: string,\n  { scheme, configuration }: { scheme?: string | true; configuration?: XcodeConfiguration }\n): Promise<{ name: string; osType?: string } | null> {\n  let resolvedScheme: { name: string; osType?: string } | null = null;\n  // @ts-ignore\n  if (scheme === true) {\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    if (!schemes.length) {\n      throw new CommandError('No native iOS build schemes found');\n    }\n    resolvedScheme = schemes[0];\n    if (schemes.length > 1) {\n      const resolvedSchemeName = await selectAsync(\n        {\n          message: 'Select a scheme',\n          choices: schemes.map(value => {\n            const isApp =\n              value.type === IOSConfig.Target.TargetType.APPLICATION && value.osType === 'iOS';\n            return {\n              value: value.name,\n              title: isApp ? chalk.bold(value.name) + chalk.gray(' (app)') : value.name,\n            };\n          }),\n        },\n        {\n          nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\n            ', '\n          )}`,\n        }\n      );\n      resolvedScheme = schemes.find(({ name }) => resolvedSchemeName === name) ?? null;\n    } else {\n      Log.log(`Auto selecting only available scheme: ${resolvedScheme.name}`);\n    }\n  } else if (scheme) {\n    // Attempt to match the schemes up so we can open the correct simulator\n    const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration,\n    });\n    resolvedScheme = schemes.find(({ name }) => name === scheme) || { name: scheme };\n  }\n\n  return resolvedScheme;\n}\n\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<XcodeBuild.BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { reuseExistingPort: true, defaultPort: options.port })\n    : null;\n  // Skip bundling if the port is null\n  options.bundler = !!port;\n  if (!port) {\n    // any random number\n    port = 8081;\n  }\n\n  const resolvedScheme = (await resolveNativeSchemeAsync(projectRoot, options)) ??\n    profileMethod(IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(projectRoot, {\n      configuration: options.configuration,\n    })[0] ?? {\n      name: path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n    };\n\n  const device = await resolveDeviceAsync(options.device, { osType: resolvedScheme.osType });\n\n  const isSimulator =\n    !('deviceType' in device) ||\n    device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.');\n\n  const configuration = options.configuration || 'Debug';\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n  return {\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration: options.configuration || 'Debug',\n    shouldStartBundler: options.bundler ?? false,\n    shouldSkipInitialBundling,\n    port,\n    buildCache: options.buildCache,\n    terminal: getDefaultUserTerminal(),\n    scheme: resolvedScheme.name,\n  };\n}\n"],"mappings":"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"}