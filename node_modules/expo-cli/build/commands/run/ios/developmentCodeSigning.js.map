{"version":3,"file":"developmentCodeSigning.js","names":["getLastDeveloperCodeSigningIdAsync","developmentCodeSigningId","UserSettings","readAsync","setLastDeveloperCodeSigningIdAsync","id","setAsync","catch","getCodeSigningInfoForPbxproj","projectRoot","project","IOSConfig","XcodeUtils","getPbxproj","targets","Target","findSignableTargets","signingInfo","nativeTargetId","nativeTarget","developmentTeams","provisioningProfiles","getBuildConfigurationsForListId","buildConfigurationList","filter","item","buildSettings","PRODUCT_NAME","forEach","DEVELOPMENT_TEAM","PROVISIONING_PROFILE","push","setAutoCodeSigningInfoForPbxproj","appleTeamId","quotedAppleTeamId","ensureQuotes","CODE_SIGN_IDENTITY","CODE_SIGN_STYLE","Object","entries","getProjectSection","isNotComment","attributes","TargetAttributes","DevelopmentTeam","ProvisioningStyle","fs","writeFileSync","filepath","writeSync","value","match","ensureDeviceIsCodeSignedForDeploymentAsync","allTargetsHaveTeams","values","reduce","prev","curr","length","teamList","concat","Log","log","chalk","dim","join","allTargetsHaveProfiles","Security","assertInstalledAsync","ids","findIdentitiesAsync","selectCertificateSigningIdentityAsync","codeSigningInfo","sortDefaultIdToBeginningAsync","identities","lastSelected","iterations","signingCertificateId","shift","addNewLineIfNone","bold","learnMore","newLine","CommandError","program","nonInteractive","resolveCertificateSigningInfoAsync","preferred","resolveIdentitiesAsync","index","selectAsync","message","choices","map","i","format","title","appleTeamName","selected"],"sources":["../../../../src/commands/run/ios/developmentCodeSigning.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport * as fs from 'fs-extra';\nimport { UserSettings } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { selectAsync } from '../../../utils/prompts';\nimport { learnMore } from '../../utils/TerminalLink';\nimport * as Security from '../utils/Security';\n\nasync function getLastDeveloperCodeSigningIdAsync() {\n  const { developmentCodeSigningId } = await UserSettings.readAsync();\n  return developmentCodeSigningId;\n}\n\nasync function setLastDeveloperCodeSigningIdAsync(id: string) {\n  await UserSettings.setAsync('developmentCodeSigningId', id).catch(() => {});\n}\n\n/**\n * Find the development team and provisioning profile that's currently in use by the Xcode project.\n *\n * @param projectRoot\n * @returns\n */\nexport function getCodeSigningInfoForPbxproj(projectRoot: string) {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const targets = IOSConfig.Target.findSignableTargets(project);\n\n  const signingInfo: Record<\n    string,\n    { developmentTeams: string[]; provisioningProfiles: string[] }\n  > = {};\n  for (const [nativeTargetId, nativeTarget] of targets) {\n    const developmentTeams: string[] = [];\n    const provisioningProfiles: string[] = [];\n\n    IOSConfig.XcodeUtils.getBuildConfigurationsForListId(\n      project,\n      nativeTarget.buildConfigurationList\n    )\n      .filter(\n        ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) =>\n          item.buildSettings.PRODUCT_NAME\n      )\n      .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n        const { DEVELOPMENT_TEAM, PROVISIONING_PROFILE } = item.buildSettings;\n        if (\n          typeof DEVELOPMENT_TEAM === 'string' &&\n          // If the user selects \"Team: none\" in Xcode, it'll be an empty string.\n          !!DEVELOPMENT_TEAM &&\n          // xcode package sometimes reads an empty string as a quoted empty string.\n          DEVELOPMENT_TEAM !== '\"\"'\n        ) {\n          developmentTeams.push(DEVELOPMENT_TEAM);\n        }\n        if (typeof PROVISIONING_PROFILE === 'string' && !!PROVISIONING_PROFILE) {\n          provisioningProfiles.push(PROVISIONING_PROFILE);\n        }\n      });\n    signingInfo[nativeTargetId] = {\n      developmentTeams,\n      provisioningProfiles,\n    };\n  }\n\n  return signingInfo;\n}\n\n/**\n * Set the development team and configure the Xcode project for automatic code signing,\n * this helps us resolve the code signing on subsequent runs and emulates Xcode behavior.\n *\n * @param projectRoot\n * @param props.appleTeamId\n */\nfunction setAutoCodeSigningInfoForPbxproj(\n  projectRoot: string,\n  { appleTeamId }: { appleTeamId: string }\n): void {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const targets = IOSConfig.Target.findSignableTargets(project);\n\n  const quotedAppleTeamId = ensureQuotes(appleTeamId);\n\n  for (const [nativeTargetId, nativeTarget] of targets) {\n    IOSConfig.XcodeUtils.getBuildConfigurationsForListId(\n      project,\n      nativeTarget.buildConfigurationList\n    )\n      .filter(\n        ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) =>\n          item.buildSettings.PRODUCT_NAME\n      )\n      .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n        item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n        item.buildSettings.CODE_SIGN_IDENTITY = '\"Apple Development\"';\n        item.buildSettings.CODE_SIGN_STYLE = 'Automatic';\n      });\n\n    Object.entries(IOSConfig.XcodeUtils.getProjectSection(project))\n      .filter(IOSConfig.XcodeUtils.isNotComment)\n      .forEach(([, item]: IOSConfig.XcodeUtils.ProjectSectionEntry) => {\n        if (!item.attributes.TargetAttributes[nativeTargetId]) {\n          item.attributes.TargetAttributes[nativeTargetId] = {};\n        }\n\n        item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n        item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Automatic';\n      });\n  }\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n\nexport async function ensureDeviceIsCodeSignedForDeploymentAsync(\n  projectRoot: string\n): Promise<string | null> {\n  // Check if the app already has a development team defined.\n  const signingInfo = getCodeSigningInfoForPbxproj(projectRoot);\n\n  const allTargetsHaveTeams = Object.values(signingInfo).reduce((prev, curr) => {\n    return prev && !!curr.developmentTeams.length;\n  }, true);\n\n  if (allTargetsHaveTeams) {\n    const teamList = Object.values(signingInfo).reduce<string[]>((prev, curr) => {\n      return prev.concat([curr.developmentTeams[0]]);\n    }, []);\n    Log.log(chalk.dim`\\u203A Auto signing app using team(s): ${teamList.join(', ')}`);\n    return null;\n  }\n\n  const allTargetsHaveProfiles = Object.values(signingInfo).reduce((prev, curr) => {\n    return prev && !!curr.provisioningProfiles.length;\n  }, true);\n  if (allTargetsHaveProfiles) {\n    // this indicates that the user has manual code signing setup (possibly for production).\n    return null;\n  }\n\n  // Only assert if the project needs to be signed.\n  await Security.assertInstalledAsync();\n\n  const ids = await Security.findIdentitiesAsync();\n\n  const id = await selectCertificateSigningIdentityAsync(ids);\n\n  Log.log(`\\u203A Signing and building iOS app with: ${id.codeSigningInfo}`);\n\n  setAutoCodeSigningInfoForPbxproj(projectRoot, {\n    appleTeamId: id.appleTeamId!,\n  });\n  return id.appleTeamId!;\n}\n\n/**\n * Sort the code signing items so the last selected item (user's default) is the first suggested.\n */\nasync function sortDefaultIdToBeginningAsync(\n  identities: Security.CertificateSigningInfo[]\n): Promise<[Security.CertificateSigningInfo[], string | undefined]> {\n  const lastSelected = await getLastDeveloperCodeSigningIdAsync();\n\n  if (lastSelected) {\n    let iterations = 0;\n    while (identities[0].signingCertificateId !== lastSelected && iterations < identities.length) {\n      identities.push(identities.shift()!);\n      iterations++;\n    }\n  }\n  return [identities, lastSelected];\n}\n\nasync function selectCertificateSigningIdentityAsync(ids: string[]) {\n  // The user has no valid code signing identities.\n  if (!ids.length) {\n    // TODO: We can probably do this too.\n    Log.addNewLineIfNone();\n    Log.log(\n      `\\u203A Your computer requires some additional setup before you can build onto physical iOS devices.\\n  ${chalk.bold(\n        learnMore('https://expo.fyi/setup-xcode-signing')\n      )}`\n    );\n    Log.newLine();\n    throw new CommandError('No code signing certificates are available to use.');\n  }\n\n  //  One ID available 🤝 Program is not interactive\n  //\n  //     using the the first available option\n  if (ids.length === 1 || program.nonInteractive) {\n    return Security.resolveCertificateSigningInfoAsync(ids[0]);\n  }\n\n  // Get identities and sort by the one that the user is most likely to choose.\n  const [identities, preferred] = await sortDefaultIdToBeginningAsync(\n    await Security.resolveIdentitiesAsync(ids)\n  );\n\n  const index = await selectAsync({\n    message: 'Development team for signing the app',\n    choices: identities.map((value, i) => {\n      const format =\n        value.signingCertificateId === preferred ? chalk.bold : (message: string) => message;\n      return {\n        // Formatted like: `650 Industries, Inc. (A1BCDEF234) - Apple Development: Evan Bacon (AA00AABB0A)`\n        title: format(\n          [value.appleTeamName, `(${value.appleTeamId}) -`, value.codeSigningInfo].join(' ')\n        ),\n        value: i,\n      };\n    }),\n  });\n\n  const selected = identities[index];\n\n  // Store the last used value and suggest it as the first value\n  // next time the user has to select a code signing identity.\n  await setLastDeveloperCodeSigningIdAsync(selected.signingCertificateId);\n\n  return selected;\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;AAEA,eAAeA,kCAAf,GAAoD;EAClD,MAAM;IAAEC;EAAF,IAA+B,MAAMC,mBAAA,CAAaC,SAAb,EAA3C;EACA,OAAOF,wBAAP;AACD;;AAED,eAAeG,kCAAf,CAAkDC,EAAlD,EAA8D;EAC5D,MAAMH,mBAAA,CAAaI,QAAb,CAAsB,0BAAtB,EAAkDD,EAAlD,EAAsDE,KAAtD,CAA4D,MAAM,CAAE,CAApE,CAAN;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,4BAAT,CAAsCC,WAAtC,EAA2D;EAChE,MAAMC,OAAO,GAAGC,0BAAA,CAAUC,UAAV,CAAqBC,UAArB,CAAgCJ,WAAhC,CAAhB;;EACA,MAAMK,OAAO,GAAGH,0BAAA,CAAUI,MAAV,CAAiBC,mBAAjB,CAAqCN,OAArC,CAAhB;;EAEA,MAAMO,WAGL,GAAG,EAHJ;;EAIA,KAAK,MAAM,CAACC,cAAD,EAAiBC,YAAjB,CAAX,IAA6CL,OAA7C,EAAsD;IACpD,MAAMM,gBAA0B,GAAG,EAAnC;IACA,MAAMC,oBAA8B,GAAG,EAAvC;;IAEAV,0BAAA,CAAUC,UAAV,CAAqBU,+BAArB,CACEZ,OADF,EAEES,YAAY,CAACI,sBAFf,EAIGC,MAJH,CAKI,CAAC,GAAGC,IAAH,CAAD,KACEA,IAAI,CAACC,aAAL,CAAmBC,YANzB,EAQGC,OARH,CAQW,CAAC,GAAGH,IAAH,CAAD,KAA8D;MACrE,MAAM;QAAEI,gBAAF;QAAoBC;MAApB,IAA6CL,IAAI,CAACC,aAAxD;;MACA,IACE,OAAOG,gBAAP,KAA4B,QAA5B,IACA;MACA,CAAC,CAACA,gBAFF,IAGA;MACAA,gBAAgB,KAAK,IALvB,EAME;QACAT,gBAAgB,CAACW,IAAjB,CAAsBF,gBAAtB;MACD;;MACD,IAAI,OAAOC,oBAAP,KAAgC,QAAhC,IAA4C,CAAC,CAACA,oBAAlD,EAAwE;QACtET,oBAAoB,CAACU,IAArB,CAA0BD,oBAA1B;MACD;IACF,CAtBH;;IAuBAb,WAAW,CAACC,cAAD,CAAX,GAA8B;MAC5BE,gBAD4B;MAE5BC;IAF4B,CAA9B;EAID;;EAED,OAAOJ,WAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,gCAAT,CACEvB,WADF,EAEE;EAAEwB;AAAF,CAFF,EAGQ;EACN,MAAMvB,OAAO,GAAGC,0BAAA,CAAUC,UAAV,CAAqBC,UAArB,CAAgCJ,WAAhC,CAAhB;;EACA,MAAMK,OAAO,GAAGH,0BAAA,CAAUI,MAAV,CAAiBC,mBAAjB,CAAqCN,OAArC,CAAhB;;EAEA,MAAMwB,iBAAiB,GAAGC,YAAY,CAACF,WAAD,CAAtC;;EAEA,KAAK,MAAM,CAACf,cAAD,EAAiBC,YAAjB,CAAX,IAA6CL,OAA7C,EAAsD;IACpDH,0BAAA,CAAUC,UAAV,CAAqBU,+BAArB,CACEZ,OADF,EAEES,YAAY,CAACI,sBAFf,EAIGC,MAJH,CAKI,CAAC,GAAGC,IAAH,CAAD,KACEA,IAAI,CAACC,aAAL,CAAmBC,YANzB,EAQGC,OARH,CAQW,CAAC,GAAGH,IAAH,CAAD,KAA8D;MACrEA,IAAI,CAACC,aAAL,CAAmBG,gBAAnB,GAAsCK,iBAAtC;MACAT,IAAI,CAACC,aAAL,CAAmBU,kBAAnB,GAAwC,qBAAxC;MACAX,IAAI,CAACC,aAAL,CAAmBW,eAAnB,GAAqC,WAArC;IACD,CAZH;;IAcAC,MAAM,CAACC,OAAP,CAAe5B,0BAAA,CAAUC,UAAV,CAAqB4B,iBAArB,CAAuC9B,OAAvC,CAAf,EACGc,MADH,CACUb,0BAAA,CAAUC,UAAV,CAAqB6B,YAD/B,EAEGb,OAFH,CAEW,CAAC,GAAGH,IAAH,CAAD,KAAwD;MAC/D,IAAI,CAACA,IAAI,CAACiB,UAAL,CAAgBC,gBAAhB,CAAiCzB,cAAjC,CAAL,EAAuD;QACrDO,IAAI,CAACiB,UAAL,CAAgBC,gBAAhB,CAAiCzB,cAAjC,IAAmD,EAAnD;MACD;;MAEDO,IAAI,CAACiB,UAAL,CAAgBC,gBAAhB,CAAiCzB,cAAjC,EAAiD0B,eAAjD,GAAmEV,iBAAnE;MACAT,IAAI,CAACiB,UAAL,CAAgBC,gBAAhB,CAAiCzB,cAAjC,EAAiD2B,iBAAjD,GAAqE,WAArE;IACD,CATH;EAUD;;EAEDC,EAAE,GAACC,aAAH,CAAiBrC,OAAO,CAACsC,QAAzB,EAAmCtC,OAAO,CAACuC,SAAR,EAAnC;AACD;;AAED,MAAMd,YAAY,GAAIe,KAAD,IAAmB;EACtC,IAAI,CAACA,KAAK,CAACC,KAAN,CAAY,OAAZ,CAAL,EAA2B;IACzB,OAAQ,IAAGD,KAAM,GAAjB;EACD;;EACD,OAAOA,KAAP;AACD,CALD;;AAOO,eAAeE,0CAAf,CACL3C,WADK,EAEmB;EACxB;EACA,MAAMQ,WAAW,GAAGT,4BAA4B,CAACC,WAAD,CAAhD;EAEA,MAAM4C,mBAAmB,GAAGf,MAAM,CAACgB,MAAP,CAAcrC,WAAd,EAA2BsC,MAA3B,CAAkC,CAACC,IAAD,EAAOC,IAAP,KAAgB;IAC5E,OAAOD,IAAI,IAAI,CAAC,CAACC,IAAI,CAACrC,gBAAL,CAAsBsC,MAAvC;EACD,CAF2B,EAEzB,IAFyB,CAA5B;;EAIA,IAAIL,mBAAJ,EAAyB;IACvB,MAAMM,QAAQ,GAAGrB,MAAM,CAACgB,MAAP,CAAcrC,WAAd,EAA2BsC,MAA3B,CAA4C,CAACC,IAAD,EAAOC,IAAP,KAAgB;MAC3E,OAAOD,IAAI,CAACI,MAAL,CAAY,CAACH,IAAI,CAACrC,gBAAL,CAAsB,CAAtB,CAAD,CAAZ,CAAP;IACD,CAFgB,EAEd,EAFc,CAAjB;;IAGAyC,cAAA,CAAIC,GAAJ,CAAQC,gBAAA,CAAMC,GAAI,0CAAyCL,QAAQ,CAACM,IAAT,CAAc,IAAd,CAAoB,EAA/E;;IACA,OAAO,IAAP;EACD;;EAED,MAAMC,sBAAsB,GAAG5B,MAAM,CAACgB,MAAP,CAAcrC,WAAd,EAA2BsC,MAA3B,CAAkC,CAACC,IAAD,EAAOC,IAAP,KAAgB;IAC/E,OAAOD,IAAI,IAAI,CAAC,CAACC,IAAI,CAACpC,oBAAL,CAA0BqC,MAA3C;EACD,CAF8B,EAE5B,IAF4B,CAA/B;;EAGA,IAAIQ,sBAAJ,EAA4B;IAC1B;IACA,OAAO,IAAP;EACD,CAtBuB,CAwBxB;;;EACA,MAAMC,QAAQ,GAACC,oBAAT,EAAN;EAEA,MAAMC,GAAG,GAAG,MAAMF,QAAQ,GAACG,mBAAT,EAAlB;EAEA,MAAMjE,EAAE,GAAG,MAAMkE,qCAAqC,CAACF,GAAD,CAAtD;;EAEAR,cAAA,CAAIC,GAAJ,CAAS,6CAA4CzD,EAAE,CAACmE,eAAgB,EAAxE;;EAEAxC,gCAAgC,CAACvB,WAAD,EAAc;IAC5CwB,WAAW,EAAE5B,EAAE,CAAC4B;EAD4B,CAAd,CAAhC;EAGA,OAAO5B,EAAE,CAAC4B,WAAV;AACD;AAED;AACA;AACA;;;AACA,eAAewC,6BAAf,CACEC,UADF,EAEoE;EAClE,MAAMC,YAAY,GAAG,MAAM3E,kCAAkC,EAA7D;;EAEA,IAAI2E,YAAJ,EAAkB;IAChB,IAAIC,UAAU,GAAG,CAAjB;;IACA,OAAOF,UAAU,CAAC,CAAD,CAAV,CAAcG,oBAAd,KAAuCF,YAAvC,IAAuDC,UAAU,GAAGF,UAAU,CAAChB,MAAtF,EAA8F;MAC5FgB,UAAU,CAAC3C,IAAX,CAAgB2C,UAAU,CAACI,KAAX,EAAhB;MACAF,UAAU;IACX;EACF;;EACD,OAAO,CAACF,UAAD,EAAaC,YAAb,CAAP;AACD;;AAED,eAAeJ,qCAAf,CAAqDF,GAArD,EAAoE;EAClE;EACA,IAAI,CAACA,GAAG,CAACX,MAAT,EAAiB;IACf;IACAG,cAAA,CAAIkB,gBAAJ;;IACAlB,cAAA,CAAIC,GAAJ,CACG,0GAAyGC,gBAAA,CAAMiB,IAAN,CACxG,IAAAC,yBAAA,EAAU,sCAAV,CADwG,CAExG,EAHJ;;IAKApB,cAAA,CAAIqB,OAAJ;;IACA,MAAM,KAAIC,uBAAJ,EAAiB,oDAAjB,CAAN;EACD,CAZiE,CAclE;EACA;EACA;;;EACA,IAAId,GAAG,CAACX,MAAJ,KAAe,CAAf,IAAoB0B,oBAAA,CAAQC,cAAhC,EAAgD;IAC9C,OAAOlB,QAAQ,GAACmB,kCAAT,CAA4CjB,GAAG,CAAC,CAAD,CAA/C,CAAP;EACD,CAnBiE,CAqBlE;;;EACA,MAAM,CAACK,UAAD,EAAaa,SAAb,IAA0B,MAAMd,6BAA6B,CACjE,MAAMN,QAAQ,GAACqB,sBAAT,CAAgCnB,GAAhC,CAD2D,CAAnE;EAIA,MAAMoB,KAAK,GAAG,MAAM,IAAAC,sBAAA,EAAY;IAC9BC,OAAO,EAAE,sCADqB;IAE9BC,OAAO,EAAElB,UAAU,CAACmB,GAAX,CAAe,CAAC3C,KAAD,EAAQ4C,CAAR,KAAc;MACpC,MAAMC,MAAM,GACV7C,KAAK,CAAC2B,oBAAN,KAA+BU,SAA/B,GAA2CxB,gBAAA,CAAMiB,IAAjD,GAAyDW,OAAD,IAAqBA,OAD/E;MAEA,OAAO;QACL;QACAK,KAAK,EAAED,MAAM,CACX,CAAC7C,KAAK,CAAC+C,aAAP,EAAuB,IAAG/C,KAAK,CAACjB,WAAY,KAA5C,EAAkDiB,KAAK,CAACsB,eAAxD,EAAyEP,IAAzE,CAA8E,GAA9E,CADW,CAFR;QAKLf,KAAK,EAAE4C;MALF,CAAP;IAOD,CAVQ;EAFqB,CAAZ,CAApB;EAeA,MAAMI,QAAQ,GAAGxB,UAAU,CAACe,KAAD,CAA3B,CAzCkE,CA2ClE;EACA;;EACA,MAAMrF,kCAAkC,CAAC8F,QAAQ,CAACrB,oBAAV,CAAxC;EAEA,OAAOqB,QAAP;AACD"}