{"version":3,"file":"Podfile.js","names":["getTempPrebuildFolder","projectRoot","path","join","hasNewDependenciesSinceLastBuild","packageChecksums","tempDir","tempPkgJsonPath","fs","pathExistsSync","dependencies","devDependencies","JsonFile","read","hasNewDependencies","hasNewDevDependencies","createPackageChecksums","pkg","hashForDependencyMap","hasPackageJsonDependencyListChangedAsync","getPackageJson","packages","ensureFile","writeAsync","doesProjectUseCocoaPods","existsSync","isLockfileCreated","podfileLockPath","isPodFolderCreated","podFolderPath","maybePromptToSyncPodsAsync","installCocoaPodsAsync","AbortCommandError","promptToInstallPodsAsync","missingPods","length","Log","log","map","pod","chalk","bold","error","removeSync"],"sources":["../../../../src/commands/run/ios/Podfile.ts"],"sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\n\nimport { AbortCommandError } from '../../../CommandError';\nimport Log from '../../../log';\nimport { hashForDependencyMap } from '../../eject/updatePackageJson';\nimport { installCocoaPodsAsync } from '../../utils/CreateApp';\n\nfunction getTempPrebuildFolder(projectRoot: string) {\n  return path.join(projectRoot, '.expo', 'prebuild');\n}\n\ntype PackageChecksums = {\n  dependencies: string;\n  devDependencies: string;\n};\n\nfunction hasNewDependenciesSinceLastBuild(projectRoot: string, packageChecksums: PackageChecksums) {\n  // TODO: Maybe comparing lock files would be better...\n  const tempDir = getTempPrebuildFolder(projectRoot);\n  const tempPkgJsonPath = path.join(tempDir, 'cached-packages.json');\n  if (!fs.pathExistsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  const { dependencies, devDependencies } = JsonFile.read(tempPkgJsonPath);\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  const hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n\n  return hasNewDependencies || hasNewDevDependencies;\n}\n\nfunction createPackageChecksums(pkg: PackageJSONConfig): PackageChecksums {\n  return {\n    dependencies: hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: hashForDependencyMap(pkg.devDependencies || {}),\n  };\n}\n\nexport async function hasPackageJsonDependencyListChangedAsync(projectRoot: string) {\n  const pkg = getPackageJson(projectRoot);\n\n  const packages = createPackageChecksums(pkg);\n  const hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n\n  // Cache package.json\n  const tempDir = path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json');\n  await fs.ensureFile(tempDir);\n  await JsonFile.writeAsync(tempDir, packages);\n\n  return hasNewDependencies;\n}\n\nfunction doesProjectUseCocoaPods(projectRoot: string): boolean {\n  return fs.existsSync(path.join(projectRoot, 'ios', 'Podfile'));\n}\n\nfunction isLockfileCreated(projectRoot: string): boolean {\n  const podfileLockPath = path.join(projectRoot, 'ios', 'Podfile.lock');\n  return fs.existsSync(podfileLockPath);\n}\n\nfunction isPodFolderCreated(projectRoot: string): boolean {\n  const podFolderPath = path.join(projectRoot, 'ios', 'Pods');\n  return fs.existsSync(podFolderPath);\n}\n\n// TODO: Same process but with app.config changes + default plugins.\n// This will ensure the user is prompted for extra setup.\nexport default async function maybePromptToSyncPodsAsync(projectRoot: string) {\n  if (!doesProjectUseCocoaPods(projectRoot)) {\n    // Project does not use CocoaPods\n    return;\n  }\n  if (!isLockfileCreated(projectRoot) || !isPodFolderCreated(projectRoot)) {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n    return;\n  }\n\n  // Getting autolinked packages can be heavy, optimize around checking every time.\n  if (!(await hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n    return;\n  }\n\n  await promptToInstallPodsAsync(projectRoot, []);\n}\n\nasync function promptToInstallPodsAsync(projectRoot: string, missingPods?: string[]) {\n  if (missingPods?.length) {\n    Log.log(\n      `Could not find the following native modules: ${missingPods\n        .map(pod => chalk.bold(pod))\n        .join(', ')}. Did you forget to run \"${chalk.bold('pod install')}\" ?`\n    );\n  }\n\n  try {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n  } catch (error: any) {\n    fs.removeSync(path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json'));\n    throw error;\n  }\n}\n"],"mappings":"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"}