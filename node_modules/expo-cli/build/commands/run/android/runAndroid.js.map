{"version":3,"file":"runAndroid.js","names":["resolveAndroidProjectPathAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","prebuildAsync","install","platforms","attemptToGetApplicationIdFromGradleAsync","applicationIdFromGradle","Package","getApplicationIdAsync","Log","debug","resolveOptionsAsync","options","variant","CommandError","device","resolveDeviceAsync","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","activity","getRunnableActivity","mainActivity","$","packageName","manifest","package","port","bundler","resolvePortAsync","defaultPort","reuseExistingPort","appName","apkDirectory","path","join","buildType","flavors","split","map","v","toLowerCase","buildDirectory","launchActivity","apkVariantDirectory","actionAsync","warnAboutLocalCLI","localCmd","profileMethod","promptToClearMalformedNativeProjectsAsync","exp","getConfig","skipSDKVersionRequirement","track","androidProjectPath","props","log","assembleAsync","setGlobalDevClientSettingsAsync","startBundlerAsync","metroPort","apkFile","getInstallApkNameAsync","binaryPath","Android","installOnDeviceAsync","installAsync","schemes","getSchemesForAndroidAsync","result","openProjectAsync","devClient","scheme","applicationId","success","error","message","nested","chalk","dim","UnifiedAnalytics","logEvent","status","platform","getDevClientProperties","StatusEventEmitter","once","installCustomExitHook","flush","availableCPUs","getDeviceABIsAsync","push","DeviceABI","universal","availableCPU","apkName","getApkFileName","fs","existsSync","cpuArch","reduce","rest","flav"],"sources":["../../../../src/commands/run/android/runAndroid.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport { Android, UnifiedAnalytics } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport StatusEventEmitter from '../../../analytics/StatusEventEmitter';\nimport getDevClientProperties from '../../../analytics/getDevClientProperties';\nimport Log from '../../../log';\nimport { warnAboutLocalCLI } from '../../../utils/migration';\nimport { promptToClearMalformedNativeProjectsAsync } from '../../eject/clearNativeFolder';\nimport { prebuildAsync } from '../../eject/prebuildAppAsync';\nimport { installCustomExitHook } from '../../start/installExitHooks';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { setGlobalDevClientSettingsAsync, startBundlerAsync } from '../ios/startBundlerAsync';\nimport { resolvePortAsync } from '../utils/resolvePortAsync';\nimport { getSchemesForAndroidAsync } from '../utils/schemes';\nimport { resolveDeviceAsync } from './resolveDeviceAsync';\nimport { assembleAsync, installAsync } from './spawnGradleAsync';\n\ntype Options = {\n  variant: string;\n  device?: boolean | string;\n  port?: number;\n  bundler?: boolean;\n};\n\nexport type AndroidRunOptions = Omit<Options, 'device'> & {\n  apkVariantDirectory: string;\n  packageName: string;\n  mainActivity: string;\n  launchActivity: string;\n  device: Android.Device;\n  appName: string;\n  buildType: string;\n  flavors?: string[];\n};\n\nasync function resolveAndroidProjectPathAsync(projectRoot: string): Promise<string> {\n  try {\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  } catch {\n    // If the project doesn't have native code, prebuild it...\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['android'],\n    });\n    return await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  }\n}\n\nasync function attemptToGetApplicationIdFromGradleAsync(projectRoot: string) {\n  try {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n    if (applicationIdFromGradle) {\n      Log.debug('Found Application ID in Gradle: ' + applicationIdFromGradle);\n      return applicationIdFromGradle;\n    }\n  } catch {}\n  return null;\n}\n\nasync function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<AndroidRunOptions> {\n  if (typeof options.variant !== 'string') {\n    throw new CommandError('--variant must be a string');\n  }\n  const device = await resolveDeviceAsync(options.device);\n  if (!device) {\n    throw new CommandError('Cannot resolve an Android device');\n  }\n\n  const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n\n  // Assert MainActivity defined.\n  const activity = await AndroidConfig.Manifest.getRunnableActivity(androidManifest);\n  if (!activity) {\n    throw new CommandError(`${filePath} is missing a runnable activity element.`);\n  }\n  // Often this is \".MainActivity\"\n  const mainActivity = activity.$['android:name'];\n  const packageName =\n    // Try to get the application identifier from the gradle before checking the package name in the manifest.\n    (await attemptToGetApplicationIdFromGradleAsync(projectRoot)) ??\n    androidManifest.manifest.$.package;\n\n  if (!packageName) {\n    throw new CommandError(`Could not find package name in AndroidManifest.xml at \"${filePath}\"`);\n  }\n\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { defaultPort: options.port, reuseExistingPort: true })\n    : null;\n  options.bundler = !!port;\n  if (!port) {\n    // Skip bundling if the port is null\n    // any random number\n    port = 8081;\n  }\n\n  // TODO: why would this be different? Can we get the different name?\n  const appName = 'app';\n\n  const apkDirectory = path.join(projectRoot, 'android', appName, 'build', 'outputs', 'apk');\n\n  // buildDeveloperTrust -> build, developer, trust (where developer, and trust are flavors).\n  // This won't work for non-standard flavor names like \"myFlavor\" would be treated as \"my\", \"flavor\".\n  const [buildType, ...flavors] = options.variant.split(/(?=[A-Z])/).map(v => v.toLowerCase());\n  const buildDirectory = path.join(apkDirectory, ...flavors, buildType);\n\n  return {\n    ...options,\n    port,\n    device,\n    mainActivity,\n    launchActivity: `${packageName}/${mainActivity}`,\n    packageName,\n    apkVariantDirectory: buildDirectory,\n    appName,\n    buildType,\n    flavors,\n  };\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  warnAboutLocalCLI(projectRoot, { localCmd: 'run:android' });\n  // If the user has an empty android folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profileMethod(promptToClearMalformedNativeProjectsAsync)(projectRoot, ['android']);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  track(projectRoot, exp);\n\n  const androidProjectPath = await resolveAndroidProjectPathAsync(projectRoot);\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  Log.log('\\u203A Building app...');\n\n  await assembleAsync({ ...props, androidProjectPath });\n\n  await setGlobalDevClientSettingsAsync(projectRoot);\n  if (props.bundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n      platforms: exp.platforms,\n    });\n  }\n\n  const apkFile = await getInstallApkNameAsync(props.device, props);\n  Log.debug(`\\u203A Installing: ${apkFile}`);\n\n  if (apkFile) {\n    const binaryPath = path.join(props.apkVariantDirectory, apkFile);\n    await Android.installOnDeviceAsync(props.device, { binaryPath });\n  } else {\n    Log.log('\\u203A Failed to locate binary file, installing with Gradle...');\n    await installAsync({ ...props, androidProjectPath });\n  }\n\n  const schemes = await getSchemesForAndroidAsync(projectRoot);\n\n  const result = await Android.openProjectAsync({\n    projectRoot,\n    device: props.device,\n    devClient: true,\n    scheme: schemes[0],\n    applicationId: props.packageName,\n    launchActivity: props.launchActivity,\n  });\n\n  if (!result.success) {\n    throw new CommandError(typeof result.error === 'string' ? result.error : result.error.message);\n  }\n\n  if (props.bundler) {\n    // TODO: unify logs\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client run command', {\n    status: 'started',\n    platform: 'android',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  StatusEventEmitter.once('bundleBuildFinish', () => {\n    // Send the 'bundle ready' event once the JS has been built.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'bundle ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  StatusEventEmitter.once('deviceLogReceive', () => {\n    // Send the 'ready' event once the app is running in a device.\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'ready',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client run command', {\n      status: 'finished',\n      platform: 'android',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nasync function getInstallApkNameAsync(\n  device: Android.Device,\n  {\n    appName,\n    buildType,\n    flavors,\n    apkVariantDirectory,\n  }: Pick<AndroidRunOptions, 'appName' | 'flavors' | 'buildType' | 'apkVariantDirectory'>\n) {\n  const availableCPUs = await Android.getDeviceABIsAsync(device);\n  availableCPUs.push(Android.DeviceABI.universal);\n\n  Log.debug('Supported ABIs: ' + availableCPUs.join(', '));\n  Log.debug('Searching for APK: ' + apkVariantDirectory);\n\n  // Check for cpu specific builds first\n  for (const availableCPU of availableCPUs) {\n    const apkName = getApkFileName(appName, buildType, flavors, availableCPU);\n    if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n      return apkName;\n    }\n  }\n\n  // Otherwise use the default apk named after the variant: app-debug.apk\n  const apkName = getApkFileName(appName, buildType, flavors);\n  if (fs.existsSync(path.join(apkVariantDirectory, apkName))) {\n    return apkName;\n  }\n\n  return null;\n}\n\nfunction getApkFileName(\n  appName: string,\n  buildType: string,\n  flavors?: string[] | null,\n  cpuArch?: string | null\n) {\n  let apkName = `${appName}-`;\n  if (flavors) {\n    apkName += flavors.reduce((rest, flav) => `${rest}${flav}-`, '');\n  }\n  if (cpuArch) {\n    apkName += `${cpuArch}-`;\n  }\n  apkName += `${buildType}.apk`;\n\n  return apkName;\n}\n"],"mappings":"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"}