{"version":3,"file":"IosApi.js","names":["getAppLookupParams","experienceName","bundleIdentifier","matchedExperienceName","match","assert","length","accountName","projectName","IosApi","constructor","api","client","ApiClient","getAllCredentials","isPrefetched","credentials","getAllCredentialsApi","appCredentials","keyBy","cred","userCredentials","String","id","Object","values","getDistCert","appLookupParams","ensureAppCredentials","appCredentialsIndex","getAppCredentialsCacheIndex","distCredentialsId","distCert","createDistCert","createDistCertApi","refetchUserCredentials","type","updateDistCert","updateDistCertApi","deleteDistCert","deleteDistCertApi","removeUserCredentialFromCache","useDistCert","userCredentialsId","useDistCertApi","refetchAppCredentials","createPushKey","createPushKeyApi","pushKey","updatePushKey","updatePushKeyApi","deletePushKey","deletePushKeyApi","getPushKey","pushCredentialsId","usePushKey","usePushKeyApi","getPushCert","getAppCredentials","pushId","pushP12","pushPassword","deletePushCert","deletePushCertApi","getProvisioningProfile","provisioningProfile","pick","updateProvisioningProfile","updateProvisioningProfileApi","deleteProvisioningProfile","deleteProvisioningProfileApi","omit","projectFullName","entries","forEach","key","val","getUserCredentialsByIdApi","app","data","getAllCredentialsForAppApi","pushCredentials","distCredentials"],"sources":["../../../src/credentials/api/IosApi.ts"],"sourcesContent":["import assert from 'assert';\nimport keyBy from 'lodash/keyBy';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { ApiV2 } from 'xdl';\n\nimport * as appleApi from '../../appleApi';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  IosPushCredentials,\n} from '../credentials';\nimport ApiClient from './IosApiV2Wrapper';\n\nexport interface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nexport function getAppLookupParams(experienceName: string, bundleIdentifier: string) {\n  const matchedExperienceName = experienceName.match(/@(.+)\\/(.+)/);\n  assert(matchedExperienceName && matchedExperienceName.length >= 3, 'invalid experience name');\n  return {\n    accountName: matchedExperienceName[1],\n    projectName: matchedExperienceName[2],\n    bundleIdentifier,\n  };\n}\n\n// appCredentials are identified by `${projectFullName} ${bundleIdentifier}` (see getAppCredentialsCacheIndex method)\n// userCredentials are identified by id (string or numeric depending on API)\n//\n// Expected behaviour of cache (internals)\n//\n// - when isPrefetched[accountName] true assume everything is synced for that account\n// - when credentials[accountName].appCredentials[experienceNameBundleIdentifier] is truthy assume that user and app credentials for that app are synced\n// - when accessing user or app credentials identified by AppLookupParams fetch all credentials for that app (user and app credentials)\n// - when updating userCredentials refetch only userCredentials\n// - when deleting userCredentials modify prefetched appCredentials without calling api\n// - when updating provisioningProfile refetch all credentials for that app (user and app credentials)\n// - when deleting provisioningProfile modify appCredentials in cache\n// - when deleting pushCert refetch all credentials for app (app + user)\n//\n//\ninterface CredentialsCache {\n  [accountName: string]: {\n    appCredentials: {\n      [experienceNameBundleIdentifier: string]: IosAppCredentials;\n    };\n    userCredentials: {\n      [id: string]: IosDistCredentials | IosPushCredentials;\n    };\n  };\n}\n\nexport default class IosApi {\n  client: ApiClient;\n  credentials: CredentialsCache = {};\n  isPrefetched: { [accountName: string]: boolean } = {};\n\n  constructor(api: ApiV2) {\n    this.client = new ApiClient(api);\n  }\n\n  public async getAllCredentials(accountName: string): Promise<IosCredentials> {\n    if (!this.isPrefetched[accountName]) {\n      const credentials = await this.client.getAllCredentialsApi(accountName);\n      this.credentials[accountName] = {\n        appCredentials: keyBy(\n          credentials.appCredentials,\n          cred => `${cred.experienceName} ${cred.bundleIdentifier}`\n        ),\n        userCredentials: keyBy(credentials.userCredentials, cred => String(cred.id)),\n      };\n      this.isPrefetched[accountName] = true;\n    }\n    return {\n      appCredentials: Object.values(this.credentials[accountName]?.appCredentials ?? {}),\n      userCredentials: Object.values(this.credentials[accountName]?.userCredentials ?? {}),\n    };\n  }\n\n  public async getDistCert(appLookupParams: AppLookupParams): Promise<IosDistCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.distCredentialsId) {\n      return null;\n    }\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.distCredentialsId\n    ] as IosDistCredentials | null;\n    return distCert ?? null;\n  }\n\n  public async createDistCert(\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    const id = await this.client.createDistCertApi(accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && distCert, 'distribution certificate does not exists');\n    assert(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async updateDistCert(\n    id: number,\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    await this.client.updateDistCertApi(id, accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials[String(id)];\n    assert(distCert, 'distribution certificate does not exists');\n    assert(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async deleteDistCert(id: number, accountName: string): Promise<void> {\n    await this.client.deleteDistCertApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async useDistCert(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.useDistCertApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async createPushKey(\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    const id = await this.client.createPushKeyApi(accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && pushKey, 'push key does not exists');\n    assert(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async updatePushKey(\n    id: number,\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    await this.client.updatePushKeyApi(id, accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    assert(id && pushKey, 'push key does not exists');\n    assert(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async deletePushKey(id: number, accountName: string) {\n    await this.client.deletePushKeyApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async getPushKey(appLookupParams: AppLookupParams): Promise<IosPushCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.pushCredentialsId) {\n      return null;\n    }\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.pushCredentialsId\n    ] as IosPushCredentials | null;\n    return pushKey ?? null;\n  }\n\n  public async usePushKey(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.usePushKeyApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getPushCert(\n    appLookupParams: AppLookupParams\n  ): Promise<{ pushId: string; pushP12: string; pushPassword: string } | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const pushId = appCredentials?.credentials?.pushId;\n    const pushP12 = appCredentials?.credentials?.pushP12;\n    const pushPassword = appCredentials?.credentials?.pushPassword;\n    if (!pushId || !pushP12 || !pushPassword) {\n      return null;\n    }\n    return { pushId, pushP12, pushPassword };\n  }\n\n  public async deletePushCert(appLookupParams: AppLookupParams): Promise<void> {\n    await this.client.deletePushCertApi(appLookupParams);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getAppCredentials(appLookupParams: AppLookupParams): Promise<IosAppCredentials> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.ensureAppCredentials(appLookupParams);\n    return this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n  }\n\n  public async getProvisioningProfile(\n    appLookupParams: AppLookupParams\n  ): Promise<appleApi.ProvisioningProfile | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const provisioningProfile = appCredentials?.credentials?.provisioningProfile;\n    if (!provisioningProfile) {\n      return null;\n    }\n    return pick(appCredentials.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async updateProvisioningProfile(\n    appLookupParams: AppLookupParams,\n    provisioningProfile: appleApi.ProvisioningProfile\n  ): Promise<appleApi.ProvisioningProfile> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.updateProvisioningProfileApi(appLookupParams, provisioningProfile);\n    await this.refetchAppCredentials(appLookupParams);\n    return pick(this.credentials[accountName]?.appCredentials?.[appCredentialsIndex]?.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async deleteProvisioningProfile(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.deleteProvisioningProfileApi(appLookupParams);\n    const appCredentials = this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (appCredentials?.credentials) {\n      // teamId should still be there because it might be part of push cert definition\n      appCredentials.credentials = omit(appCredentials.credentials, [\n        'provisioningProfile',\n        'provisioningProfileId',\n      ]);\n    }\n  }\n\n  private getAppCredentialsCacheIndex(appLookupParams: AppLookupParams): string {\n    const { accountName, projectName, bundleIdentifier } = appLookupParams;\n    const projectFullName = `@${accountName}/${projectName}`;\n    return `${projectFullName} ${bundleIdentifier}`;\n  }\n\n  private removeUserCredentialFromCache(id: number, accountName: string): void {\n    if (this.credentials[accountName]?.userCredentials?.[String(id)]) {\n      delete this.credentials[accountName].userCredentials[String(id)];\n    }\n    const appCredentials = this.credentials[accountName]?.appCredentials;\n    if (appCredentials) {\n      Object.entries(appCredentials).forEach(([key, val]) => {\n        if (val.distCredentialsId === id) {\n          delete appCredentials[key].distCredentialsId;\n        }\n        if (val.pushCredentialsId === id) {\n          delete appCredentials[key].pushCredentialsId;\n        }\n      });\n    }\n  }\n\n  // ensures that credentials are fetched from the server if they exists\n  // if there is no credentials on server for specific app this function should still succeed.\n  private async ensureAppCredentials(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    if (\n      this.isPrefetched[accountName] ||\n      this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex]\n    ) {\n      return;\n    }\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  private async refetchUserCredentials(id: number, accountName: string): Promise<void> {\n    const userCredentials = await this.client.getUserCredentialsByIdApi(id, accountName);\n    if (!userCredentials || !userCredentials.id) {\n      return;\n    }\n    this.credentials[accountName] = {\n      ...this.credentials[accountName],\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        [String(id)]: userCredentials,\n      },\n    };\n  }\n\n  private async refetchAppCredentials(app: AppLookupParams): Promise<void> {\n    const { accountName } = app;\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(app);\n    const data = await this.client.getAllCredentialsForAppApi(app);\n    if (!data) {\n      return;\n    }\n    this.credentials[accountName] = {\n      appCredentials: {\n        ...this.credentials[accountName]?.appCredentials,\n        [appCredentialsIndex]: omit(data, [\n          'pushCredentials',\n          'distCredentials',\n        ]) as IosAppCredentials,\n      },\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        ...(data.pushCredentialsId\n          ? {\n              [String(data.pushCredentialsId)]: {\n                ...data.pushCredentials,\n                id: data.pushCredentialsId,\n                type: 'push-key',\n              },\n            }\n          : {}),\n        ...(data.distCredentialsId\n          ? {\n              [String(data.distCredentialsId)]: {\n                ...data.distCredentials,\n                id: data.distCredentialsId,\n                type: 'dist-cert',\n              },\n            }\n          : {}),\n      },\n    };\n  }\n}\n"],"mappings":"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"}