{"version":3,"file":"AndroidApi.js","names":["AndroidApi","constructor","api","client","ApiClient","fetchAll","shouldRefetchAll","credentials","keyBy","getAllCredentialsApi","fetchKeystore","experienceName","ensureCredentialsFetched","keystore","fetchCredentials","updateKeystore","updateKeystoreApi","pushCredentials","fetchFcmKey","updateFcmKey","fcmApiKey","updateFcmKeyApi","removeFcmKey","removeFcmKeyApi","removeKeystore","removeKeystoreApi","response","getAllCredentialsForAppApi"],"sources":["../../../src/credentials/api/AndroidApi.ts"],"sourcesContent":["import keyBy from 'lodash/keyBy';\nimport { ApiV2 } from 'xdl';\n\nimport { AndroidCredentials, FcmCredentials, Keystore } from '../credentials';\nimport ApiClient from './AndroidApiV2Wrapper';\n\nexport default class AndroidApi {\n  private client: ApiClient;\n  private shouldRefetchAll: boolean = true;\n  private credentials: { [key: string]: AndroidCredentials } = {};\n\n  constructor(api: ApiV2) {\n    this.client = new ApiClient(api);\n  }\n\n  public async fetchAll(): Promise<{ [key: string]: AndroidCredentials }> {\n    if (this.shouldRefetchAll) {\n      this.credentials = keyBy(await this.client.getAllCredentialsApi(), 'experienceName');\n      this.shouldRefetchAll = false;\n    }\n    return this.credentials;\n  }\n\n  public async fetchKeystore(experienceName: string): Promise<Keystore | null> {\n    await this.ensureCredentialsFetched(experienceName);\n    return this.credentials[experienceName]?.keystore || null;\n  }\n\n  public async fetchCredentials(experienceName: string): Promise<AndroidCredentials> {\n    await this.ensureCredentialsFetched(experienceName);\n    return this.credentials[experienceName];\n  }\n\n  public async updateKeystore(experienceName: string, keystore: Keystore): Promise<void> {\n    await this.ensureCredentialsFetched(experienceName);\n    await this.client.updateKeystoreApi(experienceName, keystore);\n    this.credentials[experienceName] = {\n      experienceName,\n      keystore,\n      pushCredentials: this.credentials[experienceName]?.pushCredentials,\n    };\n  }\n\n  public async fetchFcmKey(experienceName: string): Promise<FcmCredentials | null> {\n    await this.ensureCredentialsFetched(experienceName);\n    return this.credentials?.[experienceName]?.pushCredentials;\n  }\n\n  public async updateFcmKey(experienceName: string, fcmApiKey: string): Promise<void> {\n    await this.ensureCredentialsFetched(experienceName);\n    await this.client.updateFcmKeyApi(experienceName, fcmApiKey);\n    this.credentials[experienceName] = {\n      experienceName,\n      keystore: this.credentials[experienceName]?.keystore,\n      pushCredentials: { fcmApiKey },\n    };\n  }\n\n  public async removeFcmKey(experienceName: string): Promise<void> {\n    await this.ensureCredentialsFetched(experienceName);\n    await this.client.removeFcmKeyApi(experienceName);\n    if (this.credentials[experienceName]) {\n      this.credentials[experienceName].pushCredentials = null;\n    }\n  }\n\n  public async removeKeystore(experienceName: string): Promise<void> {\n    await this.ensureCredentialsFetched(experienceName);\n    await this.client.removeKeystoreApi(experienceName);\n    if (this.credentials[experienceName]) {\n      this.credentials[experienceName].keystore = null;\n    }\n  }\n\n  private async ensureCredentialsFetched(experienceName: string): Promise<void> {\n    if (!this.credentials[experienceName]) {\n      const response = await this.client.getAllCredentialsForAppApi(experienceName);\n      this.credentials[experienceName] = {\n        experienceName,\n        keystore: response?.keystore,\n        pushCredentials: response?.pushCredentials,\n      };\n    }\n  }\n}\n"],"mappings":"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"}