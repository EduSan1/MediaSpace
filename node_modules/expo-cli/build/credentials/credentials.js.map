{"version":3,"file":"credentials.js","names":["distCertSchema","id","canReuse","name","required","questions","certP12","question","type","base64Encode","certPassword","teamId","pushKeySchema","apnsKeyP8","apnsKeyId","provisioningProfileSchema","dependsOn","provisioningProfile","appleTeamSchema","keystoreSchema","provideMethodQuestion","expoGenerated","userProvided","keystore","keystorePassword","keyAlias","keyPassword","EXPO_WILL_GENERATE"],"sources":["../../src/credentials/credentials.ts"],"sourcesContent":["import { AndroidCredentials as Android } from 'xdl';\n\nimport * as appleApi from '../appleApi';\nimport { CredentialSchema } from './actions/promptForCredentials';\n\n//\n// iOS\n//\n\nexport type IosCredentials = {\n  appCredentials: IosAppCredentials[];\n  userCredentials: (IosPushCredentials | IosDistCredentials)[];\n};\n\nexport type IosAppCredentials = {\n  experienceName: string;\n  bundleIdentifier: string;\n\n  pushCredentialsId?: number;\n  distCredentialsId?: number;\n  credentials: {\n    provisioningProfileId?: string;\n    provisioningProfile?: string;\n\n    teamId?: string;\n    teamName?: string;\n    // legacy pushCert\n    pushId?: string;\n    pushP12?: string;\n    pushPassword?: string;\n  };\n};\n\nexport type IosPushCredentials = {\n  id: number;\n  type: 'push-key';\n} & appleApi.PushKey;\n\nexport type IosDistCredentials = {\n  id: number;\n  type: 'dist-cert';\n} & appleApi.DistCert;\n\nexport const distCertSchema: CredentialSchema<appleApi.DistCert> = {\n  id: 'distributionCert',\n  canReuse: true,\n  name: 'Apple Distribution Certificate',\n  required: ['certP12', 'certPassword', 'teamId'],\n  questions: {\n    certP12: {\n      question: 'Path to P12 file:',\n      type: 'file',\n      base64Encode: true,\n    },\n    certPassword: {\n      type: 'password',\n      question: 'P12 password:',\n    },\n    teamId: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\nexport const pushKeySchema: CredentialSchema<appleApi.PushKey> = {\n  id: 'pushKey',\n  canReuse: true,\n  name: 'Apple Push Notifications service key',\n  required: ['apnsKeyP8', 'apnsKeyId', 'teamId'],\n  questions: {\n    apnsKeyP8: {\n      type: 'file',\n      question: 'Path to P8 file:',\n    },\n    apnsKeyId: {\n      type: 'string',\n      question: 'Key ID:',\n    },\n    teamId: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\nexport const provisioningProfileSchema: CredentialSchema<appleApi.ProvisioningProfile> = {\n  id: 'provisioningProfile',\n  name: 'Apple Provisioning Profile',\n  required: ['provisioningProfile'],\n  dependsOn: 'distributionCert',\n  questions: {\n    provisioningProfile: {\n      type: 'file',\n      question: 'Path to .mobile provisioning profile:',\n      base64Encode: true,\n    },\n  },\n};\n\nexport const appleTeamSchema: CredentialSchema<Pick<appleApi.Team, 'id'>> = {\n  id: 'team',\n  name: 'Apple Team',\n  required: ['id'],\n  questions: {\n    id: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\n//\n// Android\n//\n\nexport type FcmCredentials = {\n  fcmApiKey: string;\n};\n\nexport type Keystore = Android.Keystore;\n\nexport type AndroidCredentials = {\n  experienceName: string;\n  keystore: Keystore | null;\n  pushCredentials: FcmCredentials | null;\n};\n\nexport const keystoreSchema: CredentialSchema<Android.Keystore> = {\n  id: 'keystore',\n  name: 'Android Keystore',\n  provideMethodQuestion: {\n    question: `Would you like to upload a Keystore or have us generate one for you?\\nIf you don't know what this means, let us generate it! :)`,\n    expoGenerated: 'Generate new keystore',\n    userProvided: 'I want to upload my own file',\n  },\n  required: ['keystore', 'keystorePassword', 'keyAlias', 'keyPassword'],\n  questions: {\n    keystore: {\n      question: 'Path to the Keystore file.',\n      type: 'file',\n      base64Encode: true,\n    },\n    keystorePassword: {\n      question: 'Keystore password',\n      type: 'password',\n    },\n    keyAlias: {\n      question: 'Key alias',\n      type: 'string',\n    },\n    keyPassword: {\n      question: 'Key password',\n      type: 'password',\n    },\n  },\n};\n\nexport const EXPO_WILL_GENERATE = 'EXPO_PLEASE_GENERATE_THIS_FOR_ME';\n"],"mappings":";;;;;;AAKA;AACA;AACA;AAoCO,MAAMA,cAAmD,GAAG;EACjEC,EAAE,EAAE,kBAD6D;EAEjEC,QAAQ,EAAE,IAFuD;EAGjEC,IAAI,EAAE,gCAH2D;EAIjEC,QAAQ,EAAE,CAAC,SAAD,EAAY,cAAZ,EAA4B,QAA5B,CAJuD;EAKjEC,SAAS,EAAE;IACTC,OAAO,EAAE;MACPC,QAAQ,EAAE,mBADH;MAEPC,IAAI,EAAE,MAFC;MAGPC,YAAY,EAAE;IAHP,CADA;IAMTC,YAAY,EAAE;MACZF,IAAI,EAAE,UADM;MAEZD,QAAQ,EAAE;IAFE,CANL;IAUTI,MAAM,EAAE;MACNH,IAAI,EAAE,QADA;MAEND,QAAQ,EAAE;IAFJ;EAVC;AALsD,CAA5D;;AAsBA,MAAMK,aAAiD,GAAG;EAC/DX,EAAE,EAAE,SAD2D;EAE/DC,QAAQ,EAAE,IAFqD;EAG/DC,IAAI,EAAE,sCAHyD;EAI/DC,QAAQ,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,QAA3B,CAJqD;EAK/DC,SAAS,EAAE;IACTQ,SAAS,EAAE;MACTL,IAAI,EAAE,MADG;MAETD,QAAQ,EAAE;IAFD,CADF;IAKTO,SAAS,EAAE;MACTN,IAAI,EAAE,QADG;MAETD,QAAQ,EAAE;IAFD,CALF;IASTI,MAAM,EAAE;MACNH,IAAI,EAAE,QADA;MAEND,QAAQ,EAAE;IAFJ;EATC;AALoD,CAA1D;;AAqBA,MAAMQ,yBAAyE,GAAG;EACvFd,EAAE,EAAE,qBADmF;EAEvFE,IAAI,EAAE,4BAFiF;EAGvFC,QAAQ,EAAE,CAAC,qBAAD,CAH6E;EAIvFY,SAAS,EAAE,kBAJ4E;EAKvFX,SAAS,EAAE;IACTY,mBAAmB,EAAE;MACnBT,IAAI,EAAE,MADa;MAEnBD,QAAQ,EAAE,uCAFS;MAGnBE,YAAY,EAAE;IAHK;EADZ;AAL4E,CAAlF;;AAcA,MAAMS,eAA4D,GAAG;EAC1EjB,EAAE,EAAE,MADsE;EAE1EE,IAAI,EAAE,YAFoE;EAG1EC,QAAQ,EAAE,CAAC,IAAD,CAHgE;EAI1EC,SAAS,EAAE;IACTJ,EAAE,EAAE;MACFO,IAAI,EAAE,QADJ;MAEFD,QAAQ,EAAE;IAFR;EADK;AAJ+D,CAArE,C,CAYP;AACA;AACA;;;AAcO,MAAMY,cAAkD,GAAG;EAChElB,EAAE,EAAE,UAD4D;EAEhEE,IAAI,EAAE,kBAF0D;EAGhEiB,qBAAqB,EAAE;IACrBb,QAAQ,EAAG,iIADU;IAErBc,aAAa,EAAE,uBAFM;IAGrBC,YAAY,EAAE;EAHO,CAHyC;EAQhElB,QAAQ,EAAE,CAAC,UAAD,EAAa,kBAAb,EAAiC,UAAjC,EAA6C,aAA7C,CARsD;EAShEC,SAAS,EAAE;IACTkB,QAAQ,EAAE;MACRhB,QAAQ,EAAE,4BADF;MAERC,IAAI,EAAE,MAFE;MAGRC,YAAY,EAAE;IAHN,CADD;IAMTe,gBAAgB,EAAE;MAChBjB,QAAQ,EAAE,mBADM;MAEhBC,IAAI,EAAE;IAFU,CANT;IAUTiB,QAAQ,EAAE;MACRlB,QAAQ,EAAE,WADF;MAERC,IAAI,EAAE;IAFE,CAVD;IAcTkB,WAAW,EAAE;MACXnB,QAAQ,EAAE,cADC;MAEXC,IAAI,EAAE;IAFK;EAdJ;AATqD,CAA3D;;AA8BA,MAAMmB,kBAAkB,GAAG,kCAA3B"}