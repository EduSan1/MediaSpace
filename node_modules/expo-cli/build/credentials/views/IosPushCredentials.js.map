{"version":3,"file":"IosPushCredentials.js","names":["APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosPush","constructor","accountName","create","ctx","newPushKey","provideOrGenerate","ios","createPushKey","open","pushKey","Log","log","displayIosUserCredentials","_getRequiredQuestions","requiredQuestions","pushKeySchema","hasAppleCtx","questions","required","filter","q","_ensurePushKey","partialKey","teamId","appleCtx","team","id","teamName","name","isPushKey","Error","nonInteractive","userProvided","askForUserProvided","isValid","validatePushKey","generatePushKey","CreateAndAssignIosPush","hasProjectContext","assignToCurrentProject","pushKeyId","experienceName","projectOwner","manifest","slug","bundleIdentifier","confirm","confirmAsync","message","app","getAppLookupParams","usePushKey","green","RemoveIosPush","shouldRevoke","CommandError","selected","selectPushCredFromList","removePushCert","removeSpecific","deletePushCert","credentials","getAllCredentials","apps","getAppsUsingPushCred","appsList","map","appCred","join","deletePushKey","revoke","ensureAppleCtx","PushKeyManager","apnsKeyId","UpdateIosPush","allowLegacy","updateSpecific","updated","userCredentials","find","i","length","warn","updatePushKey","UseExistingPushNotification","projectName","CreateOrReusePushKey","assignPushKey","userCredentialsId","user","existingPushKeys","getValidPushKeys","autoselectedPushKey","formatPushKey","limit","Infinity","_createOrReuse","choices","title","value","question","type","action","prompt","iosCredentials","pushKeys","cred","yellow","pushKeyManager","pushInfoFromApple","list","filterRevokedPushKeys","getValidityStatus","validPushKeys","includes","options","filterInvalid","pushCerts","appCredentials","pushP12","pushPassword","pushCredentials","getName","pushCred","pushCert","pushId","entry","index","credentialsIndex","pushCredentialsId","formatPushKeyFromApple","appleInfo","joinApps","usedByString","gray","teamText","validityStatus","validityText","manager","e","code","keys","usedByExpo","cert","reduce","acc","here","terminalLink","grey","key","optionsPerPage","certInfo","spinner","ora","start","filteredFormattedPushKeyArray","isValidPushKey","successMsg","succeed","failureMsg","fail","validKeyIdsOnAppleServer","validPushKeysOnExpoServer","getPushKeyFromParams","builderOptions","pushP8Path","apnsKeyP8","fs","readFile","usePushKeyFromParams","iosPushCredentials"],"sources":["../../../src/credentials/views/IosPushCredentials.ts"],"sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport terminalLink from 'terminal-link';\n\nimport CommandError from '../../CommandError';\nimport { isPushKey, PushKey, PushKeyInfo, PushKeyManager } from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosPushCredentials,\n  pushKeySchema,\n} from '../credentials';\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Push Notifactions Keys on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\nexport class CreateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosPushCredentials> {\n    const newPushKey = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createPushKey(this.accountName, newPushKey);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await this.create(ctx);\n\n    Log.log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    Log.log();\n\n    return null;\n  }\n\n  _getRequiredQuestions(ctx: Context): CredentialSchema<PushKey> {\n    const requiredQuestions = { ...pushKeySchema };\n    if (ctx.hasAppleCtx() && requiredQuestions.questions) {\n      requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n    }\n    return requiredQuestions;\n  }\n\n  _ensurePushKey(ctx: Context, partialKey: Partial<PushKey>): PushKey {\n    if (ctx.hasAppleCtx()) {\n      partialKey.teamId = ctx.appleCtx.team.id;\n      partialKey.teamName = ctx.appleCtx.team.name;\n    }\n    if (!isPushKey(partialKey)) {\n      throw new Error(`Not of type PushKey: ${partialKey}`);\n    }\n    return partialKey;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    if (!ctx.nonInteractive) {\n      const requiredQuestions = this._getRequiredQuestions(ctx);\n      const userProvided = await askForUserProvided(requiredQuestions);\n      if (userProvided) {\n        const pushKey = this._ensurePushKey(ctx, userProvided);\n        const isValid = await validatePushKey(ctx, pushKey);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class CreateAndAssignIosPush extends CreateIosPush {\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await super.create(ctx);\n\n    Log.log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    Log.log();\n\n    if (ctx.hasProjectContext && pushKey) {\n      await this.assignToCurrentProject(ctx, pushKey.id);\n      Log.log();\n    }\n\n    return null;\n  }\n\n  async assignToCurrentProject(ctx: Context, pushKeyId: number) {\n    const experienceName = `@${ctx.projectOwner}/${ctx.manifest.slug}`;\n    const bundleIdentifier = ctx.manifest?.ios?.bundleIdentifier;\n    if (!ctx.nonInteractive && bundleIdentifier) {\n      const confirm = await confirmAsync({\n        message: `Would you like to use this push key for the current project: ${experienceName} (${bundleIdentifier})?`,\n      });\n      if (!confirm) {\n        return;\n      }\n\n      const app = getAppLookupParams(experienceName, bundleIdentifier);\n      await ctx.ios.usePushKey(app, pushKeyId);\n      Log.log(\n        chalk.green(`Successfully assigned Push Key to ${experienceName} (${bundleIdentifier})`)\n      );\n    }\n  }\n}\n\nexport class RemoveIosPush implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to remove.\"\n      );\n    }\n\n    const selected = await selectPushCredFromList(ctx, this.accountName);\n    if (selected) {\n      if (!('type' in selected)) {\n        const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n        await this.removePushCert(ctx, app);\n        Log.log(chalk.green('Successfully removed Push Certificate'));\n      } else {\n        await this.removeSpecific(ctx, selected as IosPushCredentials);\n        Log.log(chalk.green('Successfully removed Push Notification Key'));\n      }\n    }\n    return null;\n  }\n\n  async removePushCert(ctx: Context, app: AppLookupParams): Promise<void> {\n    Log.log('Removing Push Certificate');\n    await ctx.ios.deletePushCert(app);\n  }\n\n  async removeSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      Log.log('Removing Push Key');\n      const confirm = await confirmAsync({\n        message: `Removing this key/cert will disable notifications in ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting');\n        return;\n      }\n    }\n\n    Log.log('Removing Push Key...\\n');\n    await ctx.ios.deletePushKey(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !ctx.nonInteractive) {\n      const revoke = await confirmAsync({\n        message: `Do you also want to revoke it on Apple Developer Portal?`,\n      });\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      await new PushKeyManager(ctx.appleCtx).revoke([selected.apnsKeyId]);\n    }\n  }\n}\n\nexport class UpdateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context) {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to update.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      Log.log(chalk.green('Successfully updated Push Notification Key.\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      Log.log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Updating credentials will affect all applications that are using this key (${appsList}). Start the CLI without the '--non-interactive' flag to confirm.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `Update will affect all applications that are using this key (${appsList}). Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.warn('Aborting update process');\n        return;\n      }\n    }\n\n    const newPushKey = await this.provideOrGenerate(ctx);\n    await ctx.ios.updatePushKey(selected.id, this.accountName, newPushKey);\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    const userProvided = await askForUserProvided(pushKeySchema);\n    if (userProvided) {\n      const isValid = await validatePushKey(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingPushNotification implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to use.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.app.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await ctx.ios.usePushKey(this.app, selected.id);\n      Log.log(\n        chalk.green(\n          `Successfully assigned Push Notifactions Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReusePushKey implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignPushKey(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.usePushKey(this.app, userCredentialsId);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Push Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingPushKeys = await getValidPushKeys(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingPushKeys.length === 0) {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid keys\n    const autoselectedPushKey = existingPushKeys[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatPushKey(\n          autoselectedPushKey,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this Push Key?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    Log.log(`Using Push Key: ${autoselectedPushKey.apnsKeyId}`);\n    await this.assignPushKey(ctx, autoselectedPushKey.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing push key] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new push key]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select an iOS push key to use for push notifications:',\n      choices,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingPushNotification(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidPushKeys(iosCredentials: IosCredentials, ctx: Context) {\n  const pushKeys = iosCredentials.userCredentials.filter(\n    (cred): cred is IosPushCredentials => cred.type === 'push-key'\n  );\n  if (!ctx.hasAppleCtx()) {\n    Log.log(\n      chalk.yellow(\n        `Unable to determine validity of Push Keys due to insufficient Apple Credentials`\n      )\n    );\n    return pushKeys;\n  }\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  return await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n}\n\nfunction getValidityStatus(\n  pushKey: IosPushCredentials,\n  validPushKeys: IosPushCredentials[] | null\n): ValidityStatus {\n  if (!validPushKeys) {\n    return 'UNKNOWN';\n  }\n  return validPushKeys.includes(pushKey) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n  allowLegacy?: boolean;\n};\n\nasync function selectPushCredFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosPushCredentials | IosAppCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  const allowLegacy = options.allowLegacy || true;\n  let pushKeys = iosCredentials.userCredentials.filter(\n    cred => cred.type === 'push-key'\n  ) as IosPushCredentials[];\n  let validPushKeys: IosPushCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n    const pushInfoFromApple = await pushKeyManager.list();\n    validPushKeys = await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n  }\n  pushKeys = options.filterInvalid && validPushKeys ? validPushKeys : pushKeys;\n\n  const pushCerts = allowLegacy\n    ? iosCredentials.appCredentials.filter(\n        ({ credentials }) => credentials.pushP12 && credentials.pushPassword\n      )\n    : [];\n  const pushCredentials = [...pushCerts, ...pushKeys];\n  if (pushCredentials.length === 0) {\n    Log.warn('There are no push credentials available in your account');\n    return null;\n  }\n\n  const getName = (pushCred: IosPushCredentials | IosAppCredentials) => {\n    if ('type' in pushCred) {\n      return formatPushKey(\n        pushCred as IosPushCredentials,\n        iosCredentials,\n        getValidityStatus(pushCred as IosPushCredentials, validPushKeys)\n      );\n    }\n\n    const pushCert = pushCred as IosAppCredentials;\n    return `Push Certificate (PushId: ${pushCert.credentials.pushId || '------'}, TeamId: ${\n      pushCert.credentials.teamId || '-------'\n    } used in ${pushCert.experienceName})`;\n  };\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select credentials from list',\n    choices: pushCredentials.map((entry, index) => ({\n      title: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return pushCredentials[credentialsIndex];\n}\n\nfunction getAppsUsingPushCred(\n  iosCredentials: IosCredentials,\n  pushCred: IosPushCredentials | IosAppCredentials\n): IosAppCredentials[] {\n  if ('type' in pushCred) {\n    return iosCredentials.appCredentials.filter(\n      cred => cred.pushCredentialsId === (pushCred as IosPushCredentials).id\n    );\n  } else if (pushCred.credentials?.pushP12 && pushCred.credentials?.pushPassword) {\n    return [pushCred as IosAppCredentials];\n  }\n  return [];\n}\n\nfunction formatPushKeyFromApple(appleInfo: PushKeyInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'push-key' && cred.apnsKeyId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.pushCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, id } = appleInfo;\n  const pushKey = userCredentials[0];\n  const teamText = pushKey\n    ? `, Team ID: ${pushKey.teamId || '---'}, Team name: ${pushKey.teamName || '---'}`\n    : '';\n\n  return `${name} - KeyId: ${id}${teamText}\\n${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatPushKey(\n  pushKey: IosPushCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.pushCredentialsId === pushKey.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Push Notifications Key (Key ID: ${pushKey.apnsKeyId}, Team ID: ${pushKey.teamId})${usedByString}${validityText}`;\n}\n\nasync function generatePushKey(ctx: Context, accountName: string): Promise<PushKey> {\n  await ctx.ensureAppleCtx();\n  const manager = new PushKeyManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e: any) {\n    if (e.code === 'APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR') {\n      const keys = await manager.list();\n      Log.warn('Maximum number of Push Notifications Keys generated on Apple Developer Portal.');\n      Log.warn(APPLE_KEYS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' to revoke push notification keys.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosPushCredentials => cert.type === 'push-key')\n        .reduce<{ [key: string]: IosPushCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.apnsKeyId]: cert }),\n          {}\n        );\n\n      // https://docs.expo.dev/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      Log.log(chalk.grey(`⚠️  Revoking a Push Key will affect other apps that rely on it`));\n      Log.log(chalk.grey(`ℹ️  Learn more ${here}`));\n      Log.log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'multiselect',\n          name: 'revoke',\n          message: 'Select Push Notifications Key to revoke.',\n          choices: keys.map((key, index) => ({\n            value: index,\n            title: formatPushKeyFromApple(key, credentials),\n          })),\n          optionsPerPage: 20,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = keys[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosPush(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generatePushKey(ctx, accountName);\n}\n\nexport async function validatePushKey(ctx: Context, pushKey: PushKey) {\n  if (!ctx.hasAppleCtx()) {\n    Log.warn('Unable to validate Push Keys due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(`Checking validity of push key on Apple Developer Portal...`).start();\n\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  const filteredFormattedPushKeyArray = await filterRevokedPushKeys(pushInfoFromApple, [pushKey]);\n  const isValidPushKey = filteredFormattedPushKeyArray.length > 0;\n  if (isValidPushKey) {\n    const successMsg = `Successfully validated Push Key against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `This Push Key is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidPushKey;\n}\n\nasync function filterRevokedPushKeys<T extends PushKey>(\n  pushInfoFromApple: PushKeyInfo[],\n  pushKeys: T[]\n): Promise<T[]> {\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validKeyIdsOnAppleServer = pushInfoFromApple.map(pushKey => pushKey.id);\n  const validPushKeysOnExpoServer = pushKeys.filter(pushKey => {\n    return validKeyIdsOnAppleServer.includes(pushKey.apnsKeyId);\n  });\n  return validPushKeysOnExpoServer;\n}\n\nexport async function getPushKeyFromParams(builderOptions: {\n  pushId?: string;\n  pushP8Path?: string;\n  teamId?: string;\n}): Promise<PushKey | null> {\n  const { pushId, pushP8Path, teamId } = builderOptions;\n\n  // none of the pushKey params were set, assume user has no intention of passing it in\n  if (!pushId && !pushP8Path) {\n    return null;\n  }\n\n  // partial pushKey params were set, assume user has intention of passing it in\n  if (!(pushId && pushP8Path && teamId)) {\n    throw new Error(\n      'In order to provide a Push Key through the CLI parameters, you have to pass --push-id, --push-p8-path and --team-id parameters.'\n    );\n  }\n\n  return {\n    apnsKeyId: pushId,\n    apnsKeyP8: await fs.readFile(pushP8Path, 'utf8'),\n    teamId,\n  } as PushKey;\n}\n\nexport async function usePushKeyFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  pushKey: PushKey\n): Promise<IosPushCredentials> {\n  const isValid = await validatePushKey(ctx, pushKey);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Push Key');\n  }\n\n  const iosPushCredentials = await ctx.ios.createPushKey(app.accountName, pushKey);\n\n  await ctx.ios.usePushKey(app, iosPushCredentials.id);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Push Key to ${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosPushCredentials;\n}\n"],"mappings":"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"}