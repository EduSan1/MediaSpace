{"version":3,"file":"IosDistCert.js","names":["APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosDist","constructor","accountName","create","ctx","newDistCert","provideOrGenerate","ios","createDistCert","open","distCert","Log","log","green","displayIosUserCredentials","nonInteractive","userProvided","promptForDistCert","isValid","validateDistributionCertificate","generateDistCert","RemoveIosDist","shouldRevoke","selected","selectDistCertFromList","removeSpecific","credentials","getAllCredentials","apps","appCredentials","filter","cred","distCredentialsId","id","appsList","map","appCred","experienceName","join","confirm","confirmAsync","message","deleteDistCert","certId","revoke","ensureAppleCtx","DistCertManager","appleCtx","appLookupParams","getAppLookupParams","bundleIdentifier","getProvisioningProfile","view","RemoveProvisioningProfile","UpdateIosDist","updateSpecific","updated","userCredentials","find","i","length","CommandError","updateDistCert","UseExistingDistributionCert","app","filterInvalid","useDistCert","projectName","CreateOrReuseDistributionCert","assignDistCert","userCredentialsId","user","Error","existingCertificates","getValidDistCerts","autoselectedCertificate","formatDistCert","limit","Infinity","_createOrReuse","choices","title","value","question","type","name","optionsPerPage","action","prompt","iosCredentials","distCerts","hasAppleCtx","yellow","distCertManager","certInfoFromApple","list","validCerts","filterRevokedDistributionCerts","sortByExpiryDesc","getValidityStatus","validDistCerts","includes","options","warn","entry","index","credentialsIndex","formatDistCertFromApple","appleInfo","joinApps","usedByString","gray","status","expires","created","ownerName","serialNumber","expiresDate","dateformat","Date","createdDate","ownerId","validityStatus","distCertSerialNumber","PKCS12Utils","findP12CertSerialNumber","certP12","certPassword","undefined","red","validityText","teamId","manager","e","code","certs","usedByExpo","cert","reduce","acc","here","terminalLink","grey","certInfo","_getRequiredQuestions","requiredQuestions","distCertSchema","required","q","_ensureDistCert","partialCert","team","isDistCert","askForUserProvided","_getDistCertWithSerial","error","distributionCert","spinner","ora","start","validDistributionCerts","isValidCert","successMsg","succeed","failureMsg","fail","distributionCerts","validCertSerialsOnAppleServer","Math","floor","now","sort","certA","certB","certAInfo","certAExpiry","Number","NEGATIVE_INFINITY","certBInfo","certBExpiry","getDistCertFromParams","builderOptions","distP12Path","process","env","EXPO_IOS_DIST_P12_PASSWORD","fs","readFile","useDistCertFromParams","iosDistCredentials"],"sources":["../../../src/credentials/views/IosDistCert.ts"],"sourcesContent":["import chalk from 'chalk';\nimport dateformat from 'dateformat';\nimport fs from 'fs-extra';\nimport terminalLink from 'terminal-link';\nimport { PKCS12Utils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport { DistCert, DistCertInfo, DistCertManager, isDistCert } from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport { distCertSchema, IosCredentials, IosDistCredentials } from '../credentials';\nimport { RemoveProvisioningProfile } from './IosProvisioningProfile';\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\nexport class CreateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosDistCredentials> {\n    const newDistCert = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createDistCert(this.accountName, newDistCert);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const distCert = await this.create(ctx);\n\n    Log.log(chalk.green('Successfully created Distribution Certificate\\n'));\n    displayIosUserCredentials(distCert);\n    Log.log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    if (!ctx.nonInteractive) {\n      const userProvided = await promptForDistCert(ctx);\n      if (userProvided) {\n        const isValid = await validateDistributionCertificate(ctx, userProvided);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class RemoveIosDist implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.removeSpecific(ctx, selected);\n      Log.log(chalk.green('Successfully removed Distribution Certificate\\n'));\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      Log.log('Removing Distribution Certificate');\n      const confirm = await confirmAsync({\n        message: `You are removing certificate used by ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting');\n        return;\n      }\n    }\n\n    Log.log('Removing Distribution Certificate...\\n');\n    await ctx.ios.deleteDistCert(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (selected.certId) {\n      if (!shouldRevoke && !ctx.nonInteractive) {\n        const revoke = await confirmAsync({\n          message: `Do you also want to revoke it on Apple Developer Portal?`,\n        });\n        shouldRevoke = revoke;\n      }\n\n      if (shouldRevoke) {\n        await ctx.ensureAppleCtx();\n        await new DistCertManager(ctx.appleCtx).revoke([selected.certId]);\n      }\n    }\n\n    for (const appCredentials of apps) {\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      if (!(await ctx.ios.getProvisioningProfile(appLookupParams))) {\n        continue;\n      }\n      Log.log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const view = new RemoveProvisioningProfile(this.accountName, shouldRevoke);\n      await view.removeSpecific(ctx, appLookupParams);\n    }\n  }\n}\n\nexport class UpdateIosDist implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.accountName);\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      Log.log(chalk.green('Successfully updated Distribution Certificate\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      Log.log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosDistCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = credentials.appCredentials.filter(cred => cred.distCredentialsId === selected.id);\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Start the CLI without the '--non-interactive' flag to update the certificate used by ${appsList}.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `You are updating certificate used by ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        Log.log('Aborting update process');\n        return;\n      }\n    }\n\n    const newDistCert = await this.provideOrGenerate(ctx);\n    await ctx.ios.updateDistCert(selected.id, this.accountName, newDistCert);\n\n    for (const appCredentials of apps) {\n      Log.log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      const appLookupParams = getAppLookupParams(\n        appCredentials.experienceName,\n        appCredentials.bundleIdentifier\n      );\n      await new RemoveProvisioningProfile(this.accountName, true).removeSpecific(\n        ctx,\n        appLookupParams\n      );\n    }\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    const userProvided = await promptForDistCert(ctx);\n    if (userProvided) {\n      const isValid = await validateDistributionCertificate(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generateDistCert(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, this.app.accountName, {\n      filterInvalid: true,\n    });\n    if (selected) {\n      await ctx.ios.useDistCert(this.app, selected.id);\n      Log.log(\n        chalk.green(\n          `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseDistributionCert implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignDistCert(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.useDistCert(this.app, userCredentialsId);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Distribution Certificate to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingCertificates = await getValidDistCerts(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingCertificates.length === 0) {\n      const distCert = await new CreateIosDist(this.app.accountName).create(ctx);\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid certs\n    const autoselectedCertificate = existingCertificates[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatDistCert(\n          autoselectedCertificate,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this certificate?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    Log.log(`Using Distribution Certificate: ${autoselectedCertificate.certId || '-----'}`);\n    await this.assignDistCert(ctx, autoselectedCertificate.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing certificate] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new certificate]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select an iOS distribution certificate to use for code signing:',\n      choices,\n      optionsPerPage: 20,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const distCert = await new CreateIosDist(this.app.accountName).create(ctx);\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingDistributionCert(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidDistCerts(iosCredentials: IosCredentials, ctx: Context) {\n  const distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  if (!ctx.hasAppleCtx()) {\n    Log.log(chalk.yellow(`Unable to determine validity of Distribution Certificates.`));\n    return distCerts;\n  }\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n    certInfoFromApple,\n    distCerts\n  );\n  return sortByExpiryDesc(certInfoFromApple, validCerts);\n}\n\nfunction getValidityStatus(\n  distCert: IosDistCredentials,\n  validDistCerts: IosDistCredentials[] | null\n): ValidityStatus {\n  if (!validDistCerts) {\n    return 'UNKNOWN';\n  }\n  return validDistCerts.includes(distCert) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n};\n\nasync function selectDistCertFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosDistCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  let distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  let validDistCerts: IosDistCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const distCertManager = new DistCertManager(ctx.appleCtx);\n    const certInfoFromApple = await distCertManager.list();\n    validDistCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n      certInfoFromApple,\n      distCerts\n    );\n  }\n  distCerts = options.filterInvalid && validDistCerts ? validDistCerts : distCerts;\n\n  if (distCerts.length === 0) {\n    Log.warn('There are no Distribution Certificates available in your expo account');\n    return null;\n  }\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select certificate from the list.',\n    choices: distCerts.map((entry, index) => ({\n      title: formatDistCert(entry, iosCredentials, getValidityStatus(entry, validDistCerts)),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return distCerts[credentialsIndex];\n}\n\nfunction formatDistCertFromApple(appleInfo: DistCertInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'dist-cert' && cred.certId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.distCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, status, id, expires, created, ownerName, serialNumber } = appleInfo;\n  const expiresDate = dateformat(new Date(expires * 1000));\n  const createdDate = dateformat(new Date(created * 1000));\n  return `${name} (${status}) - Cert ID: ${id}, Serial number: ${serialNumber}, Team ID: ${appleInfo.ownerId}, Team name: ${ownerName}\n    expires: ${expiresDate}, created: ${createdDate}\n  ${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatDistCert(\n  distCert: IosDistCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.distCredentialsId === distCert.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let serialNumber = distCert.distCertSerialNumber;\n  try {\n    if (!serialNumber) {\n      serialNumber =\n        PKCS12Utils.findP12CertSerialNumber(distCert.certP12, distCert.certPassword) ?? undefined;\n    }\n  } catch {\n    serialNumber = chalk.red('invalid serial number');\n  }\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Distribution Certificate (Cert ID: ${\n    distCert.certId || '-----'\n  }, Serial number: ${serialNumber}, Team ID: ${distCert.teamId})${usedByString}${validityText}`;\n}\n\nasync function generateDistCert(ctx: Context, accountName: string): Promise<DistCert> {\n  await ctx.ensureAppleCtx();\n  const manager = new DistCertManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e: any) {\n    if (e.code === 'APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR') {\n      const certs = await manager.list();\n      Log.warn('Maximum number of Distribution Certificates generated on Apple Developer Portal.');\n      Log.warn(APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' flag to revoke existing certificates.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosDistCredentials => cert.type === 'dist-cert' && !!cert.certId)\n        .reduce<{ [key: string]: IosDistCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.certId || '']: cert }),\n          {}\n        );\n\n      // https://docs.expo.dev/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      Log.log(\n        chalk.grey(`✅  Distribution Certificates can be revoked with no production side effects`)\n      );\n      Log.log(chalk.grey(`ℹ️  Learn more ${here}`));\n      Log.log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'multiselect',\n          name: 'revoke',\n          message: 'Select certificates to revoke.',\n          optionsPerPage: 20,\n          choices: certs.map((cert, index) => ({\n            value: index,\n            title: formatDistCertFromApple(cert, credentials),\n          })),\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = certs[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosDist(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generateDistCert(ctx, accountName);\n}\n\nfunction _getRequiredQuestions(ctx: Context): CredentialSchema<DistCert> {\n  const requiredQuestions = { ...distCertSchema };\n  if (ctx.hasAppleCtx() && requiredQuestions.required) {\n    requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n  }\n  return requiredQuestions;\n}\n\nfunction _ensureDistCert(ctx: Context, partialCert: Partial<DistCert>): DistCert {\n  if (ctx.hasAppleCtx()) {\n    partialCert.teamId = ctx.appleCtx.team.id;\n  }\n  if (!isDistCert(partialCert)) {\n    throw new Error(`Not of type DistCert: ${partialCert}`);\n  }\n  return partialCert;\n}\n\nasync function promptForDistCert(ctx: Context): Promise<DistCert | null> {\n  const requiredQuestions = _getRequiredQuestions(ctx);\n  const userProvided = await askForUserProvided(requiredQuestions);\n  if (userProvided) {\n    const distCert = _ensureDistCert(ctx, userProvided);\n    return await _getDistCertWithSerial(distCert);\n  } else {\n    return null;\n  }\n}\n\nasync function _getDistCertWithSerial(distCert: DistCert): Promise<DistCert> {\n  try {\n    distCert.distCertSerialNumber =\n      PKCS12Utils.findP12CertSerialNumber(distCert.certP12, distCert.certPassword) ?? undefined;\n  } catch (error: any) {\n    Log.warn('Unable to access certificate serial number.');\n    Log.warn('Make sure that certificate and password are correct.');\n    Log.warn(error);\n  }\n  return distCert;\n}\n\nexport async function validateDistributionCertificate(ctx: Context, distributionCert: DistCert) {\n  if (!ctx.hasAppleCtx()) {\n    Log.warn('Unable to validate distribution certificate due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(\n    `Checking validity of distribution certificate on Apple Developer Portal...`\n  ).start();\n\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validDistributionCerts = await filterRevokedDistributionCerts(certInfoFromApple, [\n    distributionCert,\n  ]);\n  const isValidCert = validDistributionCerts.length > 0;\n  if (isValidCert) {\n    const successMsg = `Successfully validated Distribution Certificate against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `The Distribution Certificate is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidCert;\n}\n\nasync function filterRevokedDistributionCerts<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): Promise<T[]> {\n  if (distributionCerts.length === 0) {\n    return [];\n  }\n\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validCertSerialsOnAppleServer = certInfoFromApple\n    .filter(\n      // remove expired certs\n      cert => cert.expires > Math.floor(Date.now() / 1000)\n    )\n    .map(cert => cert.serialNumber);\n  const validDistributionCerts = distributionCerts.filter(cert => {\n    const serialNumber = cert.distCertSerialNumber;\n    if (!serialNumber) {\n      return false;\n    }\n    return validCertSerialsOnAppleServer.includes(serialNumber);\n  });\n  return validDistributionCerts;\n}\n\nfunction sortByExpiryDesc<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): T[] {\n  return distributionCerts.sort((certA, certB) => {\n    const certAInfo = certInfoFromApple.find(cert => cert.id === certA.certId);\n    const certAExpiry = certAInfo ? certAInfo.expires : Number.NEGATIVE_INFINITY;\n    const certBInfo = certInfoFromApple.find(cert => cert.id === certB.certId);\n    const certBExpiry = certBInfo ? certBInfo.expires : Number.NEGATIVE_INFINITY;\n    return certBExpiry - certAExpiry;\n  });\n}\n\nexport async function getDistCertFromParams(builderOptions: {\n  distP12Path?: string;\n  teamId?: string;\n}): Promise<DistCert | null> {\n  const { distP12Path, teamId } = builderOptions;\n  const certPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;\n\n  // none of the distCert params were set, assume user has no intention of passing it in\n  if (!distP12Path && !certPassword) {\n    return null;\n  }\n\n  // partial distCert params were set, assume user has intention of passing it in\n  if (!(distP12Path && certPassword && teamId)) {\n    throw new Error(\n      'In order to provide a Distribution Certificate through the CLI parameters, you have to pass --dist-p12-path parameter, --team-id parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.'\n    );\n  }\n\n  const distCert = {\n    certP12: await fs.readFile(distP12Path as string, 'base64'),\n    teamId,\n    certPassword,\n  } as DistCert;\n  return await _getDistCertWithSerial(distCert);\n}\n\nexport async function useDistCertFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert\n): Promise<IosDistCredentials> {\n  const isValid = await validateDistributionCertificate(ctx, distCert);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Distribution Certificate');\n  }\n  const iosDistCredentials = await ctx.ios.createDistCert(app.accountName, distCert);\n\n  await ctx.ios.useDistCert(app, iosDistCredentials.id);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Distribution Certificate to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosDistCredentials;\n}\n"],"mappings":"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"}