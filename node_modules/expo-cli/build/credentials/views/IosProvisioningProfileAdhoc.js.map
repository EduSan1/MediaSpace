{"version":3,"file":"IosProvisioningProfileAdhoc.js","names":["CreateOrReuseProvisioningProfileAdhoc","constructor","app","options","distCertSerialNumber","udids","assignProvisioningProfile","ctx","provisioningProfile","ios","updateProvisioningProfile","Log","log","chalk","green","provisioningProfileId","accountName","projectName","bundleIdentifier","createOrReuse","ensureAppleCtx","ppManager","ProvisioningProfileAdhocManager","appleCtx","open","user","Error"],"sources":["../../../src/credentials/views/IosProvisioningProfileAdhoc.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport { ProvisioningProfile } from '../../appleApi';\nimport { ProvisioningProfileAdhocManager } from '../../appleApi/provisioningProfileAdhoc';\nimport Log from '../../log';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\n\nexport type ProvisioningProfileAdhocOptions = {\n  distCertSerialNumber: string;\n  udids: string[];\n};\n\nexport class CreateOrReuseProvisioningProfileAdhoc implements IView {\n  private distCertSerialNumber: string;\n  private udids: string[];\n\n  constructor(private app: AppLookupParams, options: ProvisioningProfileAdhocOptions) {\n    const { distCertSerialNumber, udids } = options;\n    this.distCertSerialNumber = distCertSerialNumber;\n    this.udids = udids;\n  }\n\n  async assignProvisioningProfile(ctx: Context, provisioningProfile: ProvisioningProfile) {\n    await ctx.ios.updateProvisioningProfile(this.app, provisioningProfile);\n    Log.log(\n      chalk.green(\n        `Successfully assigned Provisioning Profile id: ${provisioningProfile.provisioningProfileId} to @${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async createOrReuse(ctx: Context): Promise<ProvisioningProfile> {\n    await ctx.ensureAppleCtx();\n    const ppManager = new ProvisioningProfileAdhocManager(ctx.appleCtx);\n    return await ppManager.createOrReuse(\n      this.udids,\n      this.app.bundleIdentifier,\n      this.distCertSerialNumber\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const provisioningProfile = await this.createOrReuse(ctx);\n    await this.assignProvisioningProfile(ctx, provisioningProfile);\n    return null;\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAGA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;AASO,MAAMA,qCAAN,CAA6D;EAIlEC,WAAW,CAASC,GAAT,EAA+BC,OAA/B,EAAyE;IAAA,KAAhED,GAAgE,GAAhEA,GAAgE;;IAAA;;IAAA;;IAClF,MAAM;MAAEE,oBAAF;MAAwBC;IAAxB,IAAkCF,OAAxC;IACA,KAAKC,oBAAL,GAA4BA,oBAA5B;IACA,KAAKC,KAAL,GAAaA,KAAb;EACD;;EAE8B,MAAzBC,yBAAyB,CAACC,GAAD,EAAeC,mBAAf,EAAyD;IACtF,MAAMD,GAAG,CAACE,GAAJ,CAAQC,yBAAR,CAAkC,KAAKR,GAAvC,EAA4CM,mBAA5C,CAAN;;IACAG,cAAA,CAAIC,GAAJ,CACEC,gBAAA,CAAMC,KAAN,CACG,kDAAiDN,mBAAmB,CAACO,qBAAsB,QAAO,KAAKb,GAAL,CAASc,WAAY,IAAG,KAAKd,GAAL,CAASe,WAAY,KAAI,KAAKf,GAAL,CAASgB,gBAAiB,GADhL,CADF;EAKD;;EAEkB,MAAbC,aAAa,CAACZ,GAAD,EAA6C;IAC9D,MAAMA,GAAG,CAACa,cAAJ,EAAN;IACA,MAAMC,SAAS,GAAG,KAAIC,2DAAJ,EAAoCf,GAAG,CAACgB,QAAxC,CAAlB;IACA,OAAO,MAAMF,SAAS,CAACF,aAAV,CACX,KAAKd,KADM,EAEX,KAAKH,GAAL,CAASgB,gBAFE,EAGX,KAAKd,oBAHM,CAAb;EAKD;;EAES,MAAJoB,IAAI,CAACjB,GAAD,EAAsC;IAC9C,IAAI,CAACA,GAAG,CAACkB,IAAT,EAAe;MACb,MAAM,IAAIC,KAAJ,CAAW,6CAAX,CAAN;IACD;;IAED,MAAMlB,mBAAmB,GAAG,MAAM,KAAKW,aAAL,CAAmBZ,GAAnB,CAAlC;IACA,MAAM,KAAKD,yBAAL,CAA+BC,GAA/B,EAAoCC,mBAApC,CAAN;IACA,OAAO,IAAP;EACD;;AArCiE"}