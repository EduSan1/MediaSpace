{"version":3,"file":"AndroidKeystore.js","names":["keytoolCommandExists","commandExists","UpdateKeystore","constructor","experienceName","options","open","ctx","android","fetchKeystore","displayWarning","keystore","provideOrGenerate","skipKeystoreValidation","validateKeystoreAsync","updateKeystore","Log","log","chalk","green","providedKeystore","askForUserProvided","keystoreSchema","bestEffortKeystoreGeneration","warn","tmpKeystoreName","path","join","os","tmpdir","uuid","replace","fs","remove","keystoreData","AndroidCredentials","generateUploadKeystore","omit","readFile","error","newLine","red","bold","RemoveKeystore","nonInteractive","CommandError","answers","confirmAsync","message","initial","DownloadKeystore","displayCredentials","outputPath","removeKeystore","undefined","quiet","confirm","keystoreObj","keystorePassword","keyAlias","keyPassword","keystorePath","maybeRenameExistingFile","projectDir","storeBuf","Buffer","from","writeFile","getKeystoreFromParams","keystoreAlias","process","env","EXPO_ANDROID_KEYSTORE_PASSWORD","EXPO_ANDROID_KEY_PASSWORD","Error","err","useKeystore","filename","desiredFilePath","resolve","pathExists","num","rename"],"sources":["../../../src/credentials/views/AndroidKeystore.ts"],"sourcesContent":["import chalk from 'chalk';\nimport commandExists from 'command-exists';\nimport fs from 'fs-extra';\nimport omit from 'lodash/omit';\nimport os from 'os';\nimport path from 'path';\nimport { v4 as uuid } from 'uuid';\nimport { AndroidCredentials } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport Log from '../../log';\nimport { confirmAsync } from '../../utils/prompts';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { Context, IView } from '../context';\nimport { Keystore, keystoreSchema } from '../credentials';\nimport validateKeystoreAsync from '../utils/validateKeystore';\n\ninterface UpdateKeystoreOptions {\n  bestEffortKeystoreGeneration?: boolean;\n  skipKeystoreValidation: boolean;\n}\n\nasync function keytoolCommandExists(): Promise<boolean> {\n  try {\n    await commandExists('keytool');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nclass UpdateKeystore implements IView {\n  constructor(private experienceName: string, private options: UpdateKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (await ctx.android.fetchKeystore(this.experienceName)) {\n      this.displayWarning();\n    }\n    const keystore = await this.provideOrGenerate(ctx);\n    if (!keystore) {\n      return null;\n    }\n    if (!this.options.skipKeystoreValidation) {\n      await validateKeystoreAsync(keystore);\n    }\n    await ctx.android.updateKeystore(this.experienceName, keystore);\n    Log.log(chalk.green('Keystore updated successfully'));\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<Keystore | null> {\n    const providedKeystore = await askForUserProvided(keystoreSchema);\n    if (providedKeystore) {\n      return providedKeystore;\n    } else if (this.options.bestEffortKeystoreGeneration && !(await keytoolCommandExists())) {\n      Log.warn(\n        'The `keytool` utility was not found in your PATH. A new Keystore will be generated on Expo servers.'\n      );\n      return null;\n    }\n\n    const tmpKeystoreName = path.join(\n      os.tmpdir(),\n      `${this.experienceName}_${uuid()}_tmp.jks`.replace('/', '__')\n    );\n    try {\n      await fs.remove(tmpKeystoreName);\n      const keystoreData = await AndroidCredentials.generateUploadKeystore(\n        tmpKeystoreName,\n        '--------------',\n        this.experienceName\n      );\n\n      return {\n        ...omit(keystoreData, 'keystorePath'),\n        keystore: await fs.readFile(tmpKeystoreName, 'base64'),\n      };\n    } catch (error: any) {\n      Log.warn(\n        'Failed to generate Android Keystore, it will be generated on Expo servers during the build'\n      );\n      throw error;\n    } finally {\n      await fs.remove(tmpKeystoreName);\n    }\n  }\n\n  async displayWarning() {\n    Log.newLine();\n    Log.warn(\n      `⚠️  Updating your Android build credentials will remove previous version from our servers, this is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    Log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n  }\n}\n\nclass RemoveKeystore implements IView {\n  constructor(private experienceName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!(await ctx.android.fetchKeystore(this.experienceName))) {\n      Log.warn('There is no valid Keystore defined for this app');\n      return null;\n    }\n\n    this.displayWarning();\n\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Deleting build credentials is a destructive operation. Start the CLI without the '--non-interactive' flag to delete the credentials.\"\n      );\n    }\n\n    const answers = await confirmAsync({\n      message: 'Permanently delete the Android build credentials from our servers?',\n      initial: false,\n    });\n    if (answers) {\n      Log.log('Backing up your Android Keystore now...');\n      await new DownloadKeystore(this.experienceName, {\n        displayCredentials: true,\n        outputPath: `${this.experienceName}.bak.jks`.replace('/', '__'),\n      }).open(ctx);\n\n      await ctx.android.removeKeystore(this.experienceName);\n      Log.log(chalk.green('Keystore removed successfully'));\n    }\n    return null;\n  }\n\n  async displayWarning() {\n    Log.newLine();\n    Log.warn(\n      `⚠️  Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    Log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n    Log.warn(\n      'Please read https://docs.expo.dev/distribution/building-standalone-apps/#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    Log.newLine();\n    Log.warn(\n      chalk.bold('Your Keystore will be backed up to your current directory if you continue.')\n    );\n    Log.newLine();\n  }\n}\n\ninterface DownloadKeystoreOptions {\n  quiet?: boolean;\n  displayCredentials?: boolean;\n  outputPath?: string;\n}\n\nclass DownloadKeystore implements IView {\n  constructor(private experienceName: string, private options?: DownloadKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let displayCredentials;\n\n    if (this.options?.displayCredentials !== undefined) {\n      displayCredentials = this.options?.displayCredentials;\n    } else if (this.options?.quiet) {\n      displayCredentials = false;\n    } else if (ctx.nonInteractive) {\n      displayCredentials = true;\n    } else {\n      const confirm = await confirmAsync({\n        message: 'Do you want to display the Android Keystore credentials?',\n      });\n\n      displayCredentials = confirm;\n    }\n\n    const keystoreObj = await ctx.android.fetchKeystore(this.experienceName);\n\n    const { keystore, keystorePassword, keyAlias, keyPassword }: any = keystoreObj || {};\n    if (!keystore || !keystorePassword || !keyAlias || !keyPassword) {\n      if (!this.options?.quiet) {\n        Log.warn('There is no valid Keystore defined for this app');\n      }\n      return null;\n    }\n\n    const keystorePath =\n      this.options?.outputPath ?? `${this.experienceName.replace('/', '__')}.bak.jks`;\n\n    await maybeRenameExistingFile(ctx.projectDir, keystorePath);\n    if (!this.options?.quiet) {\n      Log.log(chalk.green(`Saving Keystore to ${keystorePath}`));\n    }\n    const storeBuf = Buffer.from(keystore, 'base64');\n    await fs.writeFile(keystorePath, storeBuf);\n\n    if (this.options?.displayCredentials ?? displayCredentials) {\n      Log.log(`Keystore credentials\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n\n  Path to Keystore:  ${keystorePath}\n      `);\n    }\n    return null;\n  }\n}\n\nasync function getKeystoreFromParams(options: {\n  keystorePath?: string;\n  keystoreAlias?: string;\n}): Promise<Keystore | null> {\n  const keyAlias = options.keystoreAlias;\n  const keystorePath = options.keystorePath;\n  const keystorePassword = process.env.EXPO_ANDROID_KEYSTORE_PASSWORD;\n  const keyPassword = process.env.EXPO_ANDROID_KEY_PASSWORD;\n  if (!keyAlias && !keystorePath) {\n    return null;\n  }\n\n  if (!keystorePath || !keyAlias || !keystorePassword || !keyPassword) {\n    Log.log(keystorePath, keyAlias, keystorePassword, keyPassword);\n    throw new Error(\n      'In order to provide a Keystore through the CLI parameters, you have to pass --keystore-alias, --keystore-path parameters and set EXPO_ANDROID_KEY_PASSWORD and EXPO_ANDROID_KEYSTORE_PASSWORD environment variables.'\n    );\n  }\n  try {\n    const keystore = await fs.readFile(keystorePath, 'base64');\n    return {\n      keystore,\n      keyAlias,\n      keystorePassword,\n      keyPassword,\n    };\n  } catch (err: any) {\n    Log.error(`Error while reading file ${keystorePath}`);\n    throw err;\n  }\n}\n\nasync function useKeystore(\n  ctx: Context,\n  {\n    experienceName,\n    keystore,\n    skipKeystoreValidation,\n  }: { experienceName: string; keystore: Keystore; skipKeystoreValidation: boolean }\n) {\n  if (!skipKeystoreValidation) {\n    await validateKeystoreAsync(keystore);\n  }\n  await ctx.android.updateKeystore(experienceName, keystore);\n}\n\nasync function maybeRenameExistingFile(projectDir: string, filename: string) {\n  const desiredFilePath = path.resolve(projectDir, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectDir, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    Log.log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectDir, `OLD_${num}_${filename}`));\n  }\n}\n\nexport { UpdateKeystore, RemoveKeystore, DownloadKeystore, useKeystore, getKeystoreFromParams };\n"],"mappings":"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"}