{"version":3,"file":"IosProvisioningProfile.js","names":["RemoveProvisioningProfile","constructor","accountName","shouldRevoke","open","ctx","credentials","ios","getAllCredentials","selected","selectProfileFromExpo","app","getAppLookupParams","experienceName","bundleIdentifier","removeSpecific","Log","log","chalk","green","deleteProvisioningProfile","nonInteractive","revoke","confirmAsync","message","ensureAppleCtx","ppManager","ProvisioningProfileManager","appleCtx","CreateProvisioningProfile","create","provisioningProfile","provideOrGenerate","updateProvisioningProfile","appCredentials","getAppCredentials","displayIosAppCredentials","userProvided","askForUserProvided","provisioningProfileSchema","yellow","provisioningProfileUtils","readAppleTeam","distCert","getDistCert","assert","generateProvisioningProfile","UseExistingProvisioningProfile","CommandError","selectProfileFromApple","configureAndUpdateProvisioningProfile","CreateOrReuseProvisioningProfile","choosePreferred","profiles","profileWithSameCert","find","profile","certificates","some","cert","id","certId","user","Error","hasAppleCtx","existingProfiles","list","length","autoselectedProfile","confirm","formatProvisioningProfileFromApple","limit","Infinity","_createOrReuse","provisioningProfileId","choices","title","value","question","type","name","optionsPerPage","action","prompt","warn","map","entry","index","credentialsIndex","iosCredentials","filter","getName","teamId","manager","team","inHouse","profileName","Date","toISOString","validateProfileWithoutApple","spinner","ora","start","base64EncodedProfile","fail","buffer","Buffer","from","toString","profilePlist","plist","parse","distCertFingerprint","PKCS12Utils","getP12CertFingerprint","certP12","certPassword","IosCodeSigning","validateProvisioningProfile","e","isExpired","succeed","getAppleInfo","profilesFromApple","configuredProfileFromApple","appleProfile","profileFromApple","updatedProfile","useExisting","projectName","appleInfo","expires","expireString","toDateString","details","getProvisioningProfileFromParams","provisioningProfilePath","fs","readFile","useProvisioningProfileFromParams","isValid"],"sources":["../../../src/credentials/views/IosProvisioningProfile.ts"],"sourcesContent":["import plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport { IosCodeSigning, PKCS12Utils } from 'xdl';\n\nimport CommandError from '../../CommandError';\nimport {\n  AppleCtx,\n  DistCert,\n  ProvisioningProfile,\n  ProvisioningProfileInfo,\n  ProvisioningProfileManager,\n} from '../../appleApi';\nimport Log from '../../log';\nimport { ora } from '../../utils/ora';\nimport prompt, { confirmAsync, Question } from '../../utils/prompts';\nimport { displayIosAppCredentials } from '../actions/list';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  provisioningProfileSchema,\n} from '../credentials';\nimport * as provisioningProfileUtils from '../utils/provisioningProfile';\n\nexport class RemoveProvisioningProfile implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const selected = await selectProfileFromExpo(credentials);\n    if (selected) {\n      const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n      await this.removeSpecific(ctx, app);\n      Log.log(\n        chalk.green(\n          `Successfully removed Provisioning Profile for ${selected.experienceName} (${selected.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, app: AppLookupParams) {\n    Log.log('Removing Provisioning Profile...\\n');\n    await ctx.ios.deleteProvisioningProfile(app);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !ctx.nonInteractive) {\n      const revoke = await confirmAsync({\n        message: 'Do you also want to revoke this Provisioning Profile on Apple Developer Portal?',\n      });\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n      await ppManager.revoke(app.bundleIdentifier);\n    }\n  }\n}\n\nexport class CreateProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async create(ctx: Context): Promise<ProvisioningProfile> {\n    const provisioningProfile = await this.provideOrGenerate(ctx);\n    return await ctx.ios.updateProvisioningProfile(this.app, provisioningProfile);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.create(ctx);\n\n    Log.log(chalk.green('Successfully created Provisioning Profile\\n'));\n    const appCredentials = await ctx.ios.getAppCredentials(this.app);\n    displayIosAppCredentials(appCredentials);\n    Log.log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<ProvisioningProfile> {\n    if (!ctx.nonInteractive) {\n      const userProvided = await askForUserProvided(provisioningProfileSchema);\n      if (userProvided) {\n        // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)\n        Log.log(chalk.yellow('Provisioning profile: Unable to validate specified profile.'));\n        return {\n          ...userProvided,\n          ...provisioningProfileUtils.readAppleTeam(userProvided.provisioningProfile),\n        };\n      }\n    }\n    const distCert = await ctx.ios.getDistCert(this.app);\n    assert(distCert, 'missing distribution certificate');\n    return await generateProvisioningProfile(ctx, this.app.bundleIdentifier, distCert);\n  }\n}\n\nexport class UseExistingProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await ctx.ensureAppleCtx();\n\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a distribution certificate.\"\n      );\n    }\n\n    const selected = await selectProfileFromApple(ctx.appleCtx, this.app.bundleIdentifier);\n    if (selected) {\n      const distCert = await ctx.ios.getDistCert(this.app);\n      assert(distCert, 'missing distribution certificate');\n\n      await configureAndUpdateProvisioningProfile(ctx, this.app, distCert, selected);\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseProvisioningProfile implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  choosePreferred(\n    profiles: ProvisioningProfileInfo[],\n    distCert: IosDistCredentials\n  ): ProvisioningProfileInfo {\n    // prefer the profile that already has the same dist cert associated with it\n    const profileWithSameCert = profiles.find(profile =>\n      profile.certificates.some(cert => cert.id === distCert.certId)\n    );\n\n    // if not, just get an arbitrary profile\n    return profileWithSameCert || profiles[0];\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    if (!ctx.hasAppleCtx()) {\n      return new CreateProvisioningProfile(this.app);\n    }\n\n    const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n    const existingProfiles = await ppManager.list(this.app.bundleIdentifier);\n\n    if (existingProfiles.length === 0) {\n      return new CreateProvisioningProfile(this.app);\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    assert(distCert, 'missing distribution certificate');\n\n    const autoselectedProfile = this.choosePreferred(existingProfiles, distCert);\n    // autoselect creds if we find valid certs\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatProvisioningProfileFromApple(\n          autoselectedProfile\n        )} \\n Would you like to use this profile?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    Log.log(`Using Provisioning Profile: ${autoselectedProfile.provisioningProfileId}`);\n    await configureAndUpdateProvisioningProfile(ctx, this.app, distCert, autoselectedProfile);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        title: '[Choose existing provisioning profile] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { title: '[Add a new provisioning profile]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'select',\n      name: 'action',\n      message: 'Select a Provisioning Profile:',\n      choices,\n      optionsPerPage: 20,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      return new CreateProvisioningProfile(this.app);\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingProvisioningProfile(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function selectProfileFromApple(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string\n): Promise<ProvisioningProfileInfo | null> {\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profiles = await ppManager.list(bundleIdentifier);\n  if (profiles.length === 0) {\n    Log.warn(\n      `There are no Provisioning Profiles available in your apple account for bundleIdentifier: ${bundleIdentifier}`\n    );\n    return null;\n  }\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      title: formatProvisioningProfileFromApple(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function selectProfileFromExpo(\n  iosCredentials: IosCredentials\n): Promise<IosAppCredentials | null> {\n  const profiles = iosCredentials.appCredentials.filter(\n    ({ credentials }) => !!credentials.provisioningProfile && !!credentials.provisioningProfileId\n  );\n  if (profiles.length === 0) {\n    Log.warn('There are no Provisioning Profiles available in your account');\n    return null;\n  }\n\n  const getName = (profile: IosAppCredentials) => {\n    const id = chalk.green(profile.credentials.provisioningProfileId || '-----');\n    const teamId = profile.credentials.teamId || '------';\n    return `Provisioning Profile (ID: ${id}, Team ID: ${teamId})`;\n  };\n\n  const question: Question = {\n    type: 'select',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      title: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function generateProvisioningProfile(\n  ctx: Context,\n  bundleIdentifier: string,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  await ctx.ensureAppleCtx();\n  const manager = new ProvisioningProfileManager(ctx.appleCtx);\n  const type = ctx.appleCtx.team.inHouse ? 'Enterprise ' : 'AppStore';\n  const profileName = `*[expo] ${bundleIdentifier} ${type} ${new Date().toISOString()}`; // Apple drops [ if its the first char (!!)\n  return await manager.create(bundleIdentifier, distCert, profileName);\n}\n\n// Best effort validation without Apple credentials\nexport async function validateProfileWithoutApple(\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert,\n  bundleIdentifier: string\n): Promise<boolean> {\n  const spinner = ora(`Performing best effort validation of Provisioning Profile...\\n`).start();\n  const base64EncodedProfile = provisioningProfile.provisioningProfile;\n  if (!base64EncodedProfile) {\n    spinner.fail('No profile on file');\n    return false;\n  }\n\n  const buffer = Buffer.from(base64EncodedProfile, 'base64');\n  const profile = buffer.toString('utf-8');\n  const profilePlist = plist.parse(profile) as PlistObject;\n\n  try {\n    const distCertFingerprint = await PKCS12Utils.getP12CertFingerprint(\n      distCert.certP12,\n      distCert.certPassword\n    );\n\n    IosCodeSigning.validateProvisioningProfile(profilePlist, {\n      distCertFingerprint,\n      bundleIdentifier,\n    });\n  } catch (e: any) {\n    spinner.fail(`Provisioning profile is invalid: ${e.toString()}`);\n    return false;\n  }\n\n  const isExpired = new Date(profilePlist['ExpirationDate'] as string) <= new Date();\n  if (isExpired) {\n    spinner.fail('Provisioning profile is expired');\n    return false;\n  }\n\n  spinner.succeed('Successfully performed best effort validation of Provisioning Profile.');\n  return true;\n}\n\nexport async function getAppleInfo(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string,\n  profile: ProvisioningProfile\n): Promise<ProvisioningProfileInfo | null> {\n  if (!profile.provisioningProfileId) {\n    Log.log(\n      chalk.yellow('Provisioning Profile: cannot look up profile on Apple Servers - there is no id')\n    );\n    return null;\n  }\n\n  const spinner = ora(`Getting Provisioning Profile info from Apple's Servers...\\n`).start();\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profilesFromApple = await ppManager.list(bundleIdentifier);\n\n  const configuredProfileFromApple = profilesFromApple.find(\n    appleProfile => appleProfile.provisioningProfileId === profile.provisioningProfileId\n  );\n\n  if (!configuredProfileFromApple) {\n    spinner.fail(\n      `Provisioning Profile: ${profile.provisioningProfileId} does not exist on Apple Servers`\n    );\n    return null;\n  }\n\n  spinner.succeed(\n    `Successfully fetched Provisioning Profile ${profile.provisioningProfileId} from Apple Servers`\n  );\n  return configuredProfileFromApple;\n}\n\nexport async function configureAndUpdateProvisioningProfile(\n  ctx: Context,\n  app: AppLookupParams,\n  distCert: DistCert,\n  profileFromApple: ProvisioningProfileInfo\n) {\n  // configure profile on Apple's Server to use our distCert\n  const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n  const updatedProfile = await ppManager.useExisting(\n    app.bundleIdentifier,\n    profileFromApple,\n    distCert\n  );\n  Log.log(\n    chalk.green(\n      `Successfully configured Provisioning Profile ${\n        profileFromApple.provisioningProfileId\n      } on Apple Servers with Distribution Certificate ${distCert.certId || ''}`\n    )\n  );\n\n  // Update profile on expo servers\n  await ctx.ios.updateProvisioningProfile(app, updatedProfile);\n  Log.log(\n    chalk.green(\n      `Successfully assigned Provisioning Profile to @${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n}\n\nfunction formatProvisioningProfileFromApple(appleInfo: ProvisioningProfileInfo) {\n  const { expires, provisioningProfileId } = appleInfo;\n  const id = provisioningProfileId ?? '-----';\n  const name = appleInfo.name ?? '-----';\n  const expireString = expires ? new Date(expires * 1000).toDateString() : 'unknown';\n  const details = chalk.green(`\\n    Name: ${name}\\n    Expiry: ${expireString}`);\n  return `Provisioning Profile - ID: ${id}${details}`;\n}\n\nexport async function getProvisioningProfileFromParams(\n  provisioningProfilePath?: string\n): Promise<ProvisioningProfile | null> {\n  if (!provisioningProfilePath) {\n    return null;\n  }\n\n  const provisioningProfile = await fs.readFile(provisioningProfilePath as string, 'base64');\n  const team = provisioningProfileUtils.readAppleTeam(provisioningProfile);\n\n  return {\n    provisioningProfile,\n    ...team,\n  };\n}\n\nexport async function useProvisioningProfileFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  provisioningProfile: ProvisioningProfile\n): Promise<ProvisioningProfile> {\n  const distCert = await ctx.ios.getDistCert(app);\n  assert(distCert, 'missing distribution certificate');\n\n  const isValid = await validateProfileWithoutApple(\n    provisioningProfile,\n    distCert,\n    app.bundleIdentifier\n  );\n  if (!isValid) {\n    throw new Error('Specified invalid Provisioning Profile');\n  }\n\n  return await ctx.ios.updateProvisioningProfile(app, provisioningProfile);\n}\n"],"mappings":"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"}