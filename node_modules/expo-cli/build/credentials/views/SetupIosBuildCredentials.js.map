{"version":3,"file":"SetupIosBuildCredentials.js","names":["SetupIosBuildCredentials","constructor","app","open","ctx","bestEffortAppleCtx","hasAppleCtx","appleApi","ensureBundleIdExistsAsync","appleCtx","enablePushNotifications","runCredentialsManager","SetupIosDist","error","Log","distCert","ios","getDistCert","CommandError","SetupIosProvisioningProfile","nonInteractive","confirm","confirmAsync","message","ensureAppleCtx","log","chalk","green","SetupIosBuildCredentialsFromLocal","localCredentials","credentialsJsonReader","readIosCredentialsAsync","projectDir","team","readAppleTeam","provisioningProfile","updateProvisioningProfile","credentials","getAllCredentials","accountName","appsUsingCert","id","appCredentials","filter","cred","distCredentialsId","appInfo","projectName","bundleIdentifier","newDistCert","certP12","distributionCertificate","certPassword","length","update","prompts","type","name","choices","title","value","updateDistCert","createdDistCert","createDistCert","useDistCert"],"sources":["../../../src/credentials/views/SetupIosBuildCredentials.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport Log from '../../log';\nimport prompts, { confirmAsync } from '../../utils/prompts';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport { readAppleTeam } from '../utils/provisioningProfile';\nimport { SetupIosDist } from './SetupIosDist';\nimport { SetupIosProvisioningProfile } from './SetupIosProvisioningProfile';\n\nexport class SetupIosBuildCredentials implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.bestEffortAppleCtx(ctx);\n\n    if (ctx.hasAppleCtx()) {\n      await appleApi.ensureBundleIdExistsAsync(ctx.appleCtx, this.app, {\n        enablePushNotifications: true,\n      });\n    }\n    try {\n      await runCredentialsManager(ctx, new SetupIosDist(this.app));\n    } catch (error: any) {\n      Log.error('Failed to set up Distribution Certificate');\n      throw error;\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    if (!distCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    try {\n      await runCredentialsManager(ctx, new SetupIosProvisioningProfile(this.app));\n    } catch (error: any) {\n      Log.error('Failed to set up Provisioning Profile');\n      throw error;\n    }\n\n    return null;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n\n    if (ctx.nonInteractive) {\n      return;\n    }\n\n    const confirm = await confirmAsync({\n      message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n    });\n    if (confirm) {\n      return await ctx.ensureAppleCtx();\n    } else {\n      Log.log(\n        chalk.green(\n          'No problem! ðŸ‘Œ \\nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n}\n\nexport class SetupIosBuildCredentialsFromLocal implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let localCredentials;\n    try {\n      localCredentials = await credentialsJsonReader.readIosCredentialsAsync(ctx.projectDir);\n    } catch (error: any) {\n      Log.error(\n        'Reading credentials from credentials.json failed. Make sure this file is correct and all credentials are present there.'\n      );\n      throw error;\n    }\n\n    const team = await readAppleTeam(localCredentials.provisioningProfile);\n    await ctx.ios.updateProvisioningProfile(this.app, {\n      ...team,\n      provisioningProfile: localCredentials.provisioningProfile,\n    });\n    const credentials = await ctx.ios.getAllCredentials(this.app.accountName);\n    const distCert = await ctx.ios.getDistCert(this.app);\n    const appsUsingCert = distCert?.id\n      ? (credentials.appCredentials || []).filter(cred => cred.distCredentialsId === distCert.id)\n      : [];\n\n    const appInfo = `@${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`;\n    const newDistCert = {\n      ...team,\n      certP12: localCredentials.distributionCertificate.certP12,\n      certPassword: localCredentials.distributionCertificate.certPassword,\n    };\n\n    if (appsUsingCert.length > 1 && distCert?.id) {\n      const { update } = await prompts({\n        type: 'select',\n        name: 'update',\n        message:\n          'Current distribution certificate is used by multiple apps. Do you want to update all of them?',\n        choices: [\n          { title: 'Update all apps', value: 'all' },\n          { title: `Update only ${appInfo}`, value: 'app' },\n        ],\n      });\n      if (update === 'all') {\n        await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n      } else {\n        const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n        await ctx.ios.useDistCert(this.app, createdDistCert.id);\n      }\n    } else if (distCert?.id) {\n      await ctx.ios.updateDistCert(distCert.id, this.app.accountName, newDistCert);\n    } else {\n      const createdDistCert = await ctx.ios.createDistCert(this.app.accountName, newDistCert);\n      await ctx.ios.useDistCert(this.app, createdDistCert.id);\n    }\n    return null;\n  }\n}\n"],"mappings":"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"}