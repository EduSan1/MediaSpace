{"version":3,"file":"Session.js","names":["_newIdentifier","type","bytes","uuidv4","Buffer","alloc","base64","toString","slug","replace","substring","clientIdAsync","clientId","UserSettings","getAsync","setClientIdAsync","token","setAsync"],"sources":["../src/Session.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { UserSettings } from './internal';\n\nfunction _newIdentifier(type = 'c') {\n  const bytes = uuidv4(null, Buffer.alloc(16));\n  const base64 = bytes.toString('base64');\n  const slug = base64\n    // Replace + with - (see RFC 4648, sec. 5)\n    .replace(/\\+/g, '-')\n    // Replace / with _ (see RFC 4648, sec. 5)\n    .replace(/\\//g, '_')\n    // Drop '==' padding\n    .substring(0, 22);\n  return type + '_' + slug;\n}\n\nexport async function clientIdAsync(): Promise<string> {\n  let clientId = await UserSettings.getAsync('accessToken', null);\n  if (clientId === null) {\n    clientId = _newIdentifier();\n    await setClientIdAsync(clientId);\n  }\n  return clientId;\n}\n\nexport async function setClientIdAsync(token: string) {\n  await UserSettings.setAsync('accessToken', token);\n  return token;\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA,SAASA,cAAT,CAAwBC,IAAI,GAAG,GAA/B,EAAoC;EAClC,MAAMC,KAAK,GAAG,IAAAC,UAAA,EAAO,IAAP,EAAaC,MAAM,CAACC,KAAP,CAAa,EAAb,CAAb,CAAd;EACA,MAAMC,MAAM,GAAGJ,KAAK,CAACK,QAAN,CAAe,QAAf,CAAf;EACA,MAAMC,IAAI,GAAGF,MAAM,CACjB;EADiB,CAEhBG,OAFU,CAEF,KAFE,EAEK,GAFL,EAGX;EAHW,CAIVA,OAJU,CAIF,KAJE,EAIK,GAJL,EAKX;EALW,CAMVC,SANU,CAMA,CANA,EAMG,EANH,CAAb;EAOA,OAAOT,IAAI,GAAG,GAAP,GAAaO,IAApB;AACD;;AAEM,eAAeG,aAAf,GAAgD;EACrD,IAAIC,QAAQ,GAAG,MAAMC,wBAAA,CAAaC,QAAb,CAAsB,aAAtB,EAAqC,IAArC,CAArB;;EACA,IAAIF,QAAQ,KAAK,IAAjB,EAAuB;IACrBA,QAAQ,GAAGZ,cAAc,EAAzB;IACA,MAAMe,gBAAgB,CAACH,QAAD,CAAtB;EACD;;EACD,OAAOA,QAAP;AACD;;AAEM,eAAeG,gBAAf,CAAgCC,KAAhC,EAA+C;EACpD,MAAMH,wBAAA,CAAaI,QAAb,CAAsB,aAAtB,EAAqCD,KAArC,CAAN;EACA,OAAOA,KAAP;AACD"}