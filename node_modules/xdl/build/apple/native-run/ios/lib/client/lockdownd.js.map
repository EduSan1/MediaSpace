{"version":3,"file":"lockdownd.js","names":["debug","Debug","isLockdowndServiceResponse","resp","Request","Service","undefined","Port","isLockdowndSessionResponse","isLockdowndAllValuesResponse","Value","isLockdowndValueResponse","Key","isLockdowndQueryTypeResponse","Type","LockdowndClient","ServiceClient","constructor","socket","LockdownProtocolClient","startService","name","protocolClient","sendMessage","port","enableServiceSSL","EnableServiceSSL","ResponseError","startSession","pairRecord","HostID","SystemBUID","EnableSessionSSL","tls","TLSSocket","secureContext","createSecureContext","secureProtocol","cert","RootCertificate","key","RootPrivateKey","getAllValues","getValue","val","queryType","doHandshake"],"sources":["../../../../../../src/apple/native-run/ios/lib/client/lockdownd.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport type * as net from 'net';\nimport * as tls from 'tls';\n\nimport { LockdownProtocolClient } from '../protocol/lockdown';\nimport { ResponseError, ServiceClient } from './client';\nimport type { UsbmuxdPairRecord } from './usbmuxd';\n\nconst debug = Debug('expo:xdl:ios:lib:client:lockdownd');\n\nexport interface DeviceValues {\n  BasebandCertId: number;\n  BasebandKeyHashInformation: {\n    AKeyStatus: number;\n    SKeyHash: Buffer;\n    SKeyStatus: number;\n  };\n  BasebandSerialNumber: Buffer;\n  BasebandVersion: string;\n  BoardId: number;\n  BuildVersion: string;\n  ChipID: number;\n  DeviceClass: string;\n  DeviceColor: string;\n  DeviceName: string;\n  DieID: number;\n  HardwareModel: string;\n  HasSiDP: boolean;\n  PartitionType: string;\n  ProductName: string;\n  ProductType: string;\n  ProductVersion: string;\n  ProductionSOC: boolean;\n  ProtocolVersion: string;\n  TelephonyCapability: boolean;\n  UniqueChipID: number;\n  UniqueDeviceID: string;\n  WiFiAddress: string;\n  [key: string]: any;\n}\n\ninterface LockdowndServiceResponse {\n  Request: 'StartService';\n  Service: string;\n  Port: number;\n  EnableServiceSSL?: boolean; // Only on iOS 13+\n}\n\ninterface LockdowndSessionResponse {\n  Request: 'StartSession';\n  EnableSessionSSL: boolean;\n}\n\ninterface LockdowndAllValuesResponse {\n  Request: 'GetValue';\n  Value: DeviceValues;\n}\n\ninterface LockdowndValueResponse {\n  Request: 'GetValue';\n  Key: string;\n  Value: string;\n}\n\ninterface LockdowndQueryTypeResponse {\n  Request: 'QueryType';\n  Type: string;\n}\n\nfunction isLockdowndServiceResponse(resp: any): resp is LockdowndServiceResponse {\n  return resp.Request === 'StartService' && resp.Service !== undefined && resp.Port !== undefined;\n}\n\nfunction isLockdowndSessionResponse(resp: any): resp is LockdowndSessionResponse {\n  return resp.Request === 'StartSession';\n}\n\nfunction isLockdowndAllValuesResponse(resp: any): resp is LockdowndAllValuesResponse {\n  return resp.Request === 'GetValue' && resp.Value !== undefined;\n}\n\nfunction isLockdowndValueResponse(resp: any): resp is LockdowndValueResponse {\n  return resp.Request === 'GetValue' && resp.Key !== undefined && typeof resp.Value === 'string';\n}\n\nfunction isLockdowndQueryTypeResponse(resp: any): resp is LockdowndQueryTypeResponse {\n  return resp.Request === 'QueryType' && resp.Type !== undefined;\n}\n\nexport class LockdowndClient extends ServiceClient<LockdownProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new LockdownProtocolClient(socket));\n  }\n\n  async startService(name: string) {\n    debug(`startService: ${name}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartService',\n      Service: name,\n    });\n\n    if (isLockdowndServiceResponse(resp)) {\n      return { port: resp.Port, enableServiceSSL: !!resp.EnableServiceSSL };\n    } else {\n      throw new ResponseError(`Error starting service ${name}`, resp);\n    }\n  }\n\n  async startSession(pairRecord: UsbmuxdPairRecord) {\n    debug(`startSession: ${pairRecord}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'StartSession',\n      HostID: pairRecord.HostID,\n      SystemBUID: pairRecord.SystemBUID,\n    });\n\n    if (isLockdowndSessionResponse(resp)) {\n      if (resp.EnableSessionSSL) {\n        this.protocolClient.socket = new tls.TLSSocket(this.protocolClient.socket, {\n          secureContext: tls.createSecureContext({\n            secureProtocol: 'TLSv1_method',\n            cert: pairRecord.RootCertificate,\n            key: pairRecord.RootPrivateKey,\n          }),\n        });\n        debug(`Socket upgraded to TLS connection`);\n      }\n      // TODO: save sessionID for StopSession?\n    } else {\n      throw new ResponseError('Error starting session', resp);\n    }\n  }\n\n  async getAllValues() {\n    debug(`getAllValues`);\n\n    const resp = await this.protocolClient.sendMessage({ Request: 'GetValue' });\n\n    if (isLockdowndAllValuesResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async getValue(val: string) {\n    debug(`getValue: ${val}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'GetValue',\n      Key: val,\n    });\n\n    if (isLockdowndValueResponse(resp)) {\n      return resp.Value;\n    } else {\n      throw new ResponseError('Error getting lockdown value', resp);\n    }\n  }\n\n  async queryType() {\n    debug('queryType');\n\n    const resp = await this.protocolClient.sendMessage({\n      Request: 'QueryType',\n    });\n\n    if (isLockdowndQueryTypeResponse(resp)) {\n      return resp.Type;\n    } else {\n      throw new ResponseError('Error getting lockdown query type', resp);\n    }\n  }\n\n  async doHandshake(pairRecord: UsbmuxdPairRecord) {\n    debug('doHandshake');\n\n    // if (await this.lockdownQueryType() !== 'com.apple.mobile.lockdown') {\n    //   throw new Error('Invalid type received from lockdown handshake');\n    // }\n    // await this.getLockdownValue('ProductVersion');\n    // TODO: validate pair and pair\n    await this.startSession(pairRecord);\n  }\n}\n"],"mappings":"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"}