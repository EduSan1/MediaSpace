{"version":3,"file":"afc.js","names":["debug","Debug","MAX_OPEN_FILES","AFCClient","ServiceClient","constructor","socket","AFCProtocolClient","getFileInfo","path","resp","protocolClient","sendMessage","operation","AFC_OPS","GET_FILE_INFO","data","toCString","strings","currentString","tokens","forEach","token","push","String","fromCharCode","writeFile","fd","Array","prototype","toString","call","FILE_WRITE","payload","openFile","Buffer","alloc","length","writeUInt32LE","AFC_FILE_OPEN_FLAGS","WRONLY","copy","FILE_OPEN","FILE_OPEN_RES","Error","closeFile","FILE_CLOSE","uploadFile","srcPath","destPath","srcFile","destFile","Promise","all","promisify","fs","readFile","err","makeDirectory","MAKE_DIR","uploadDirectory","numOpenFiles","pendingFileUploads","_this","uploadDir","dirPath","promises","file","readdirSync","filePath","join","remotePath","relative","lstatSync","isDirectory","then","resolve","reject","promise","res","rej","tries","fn","pop","catch","status","AFC_STATUS","NO_RESOURCES","s","buf","len","write","writeUInt8"],"sources":["../../../../../../src/apple/native-run/ios/lib/client/afc.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport * as fs from 'fs';\nimport type * as net from 'net';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nimport { AFC_FILE_OPEN_FLAGS, AFC_OPS, AFC_STATUS, AFCProtocolClient } from '../protocol/afc';\nimport type { AFCError, AFCResponse } from '../protocol/afc';\nimport { ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:afc');\nconst MAX_OPEN_FILES = 240;\n\nexport class AFCClient extends ServiceClient<AFCProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new AFCProtocolClient(socket));\n  }\n\n  async getFileInfo(path: string): Promise<string[]> {\n    debug(`getFileInfo: ${path}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.GET_FILE_INFO,\n      data: toCString(path),\n    });\n\n    const strings: string[] = [];\n    let currentString = '';\n    const tokens = resp.data;\n    tokens.forEach(token => {\n      if (token === 0) {\n        strings.push(currentString);\n        currentString = '';\n      } else {\n        currentString += String.fromCharCode(token);\n      }\n    });\n    return strings;\n  }\n\n  async writeFile(fd: Buffer, data: Buffer): Promise<AFCResponse> {\n    debug(`writeFile: ${Array.prototype.toString.call(fd)}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_WRITE,\n      data: fd,\n      payload: data,\n    });\n  }\n\n  async openFile(path: string): Promise<Buffer> {\n    debug(`openFile: ${path}`);\n    // mode + path + null terminator\n    const data = Buffer.alloc(8 + path.length + 1);\n    // write mode\n    data.writeUInt32LE(AFC_FILE_OPEN_FLAGS.WRONLY, 0);\n    // then path to file\n    toCString(path).copy(data, 8);\n\n    const resp = await this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_OPEN,\n      data,\n    });\n\n    if (resp.operation === AFC_OPS.FILE_OPEN_RES) {\n      return resp.data;\n    }\n\n    throw new Error(\n      `There was an unknown error opening file ${path}, response: ${Array.prototype.toString.call(\n        resp.data\n      )}`\n    );\n  }\n\n  async closeFile(fd: Buffer): Promise<AFCResponse> {\n    debug(`closeFile fd: ${Array.prototype.toString.call(fd)}`);\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.FILE_CLOSE,\n      data: fd,\n    });\n  }\n\n  async uploadFile(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadFile: ${srcPath}`);\n\n    // read local file and get fd of destination\n    const [srcFile, destFile] = await Promise.all([\n      await promisify(fs.readFile)(srcPath),\n      await this.openFile(destPath),\n    ]);\n\n    try {\n      await this.writeFile(destFile, srcFile);\n      await this.closeFile(destFile);\n    } catch (err: any) {\n      await this.closeFile(destFile);\n      throw err;\n    }\n  }\n\n  async makeDirectory(path: string): Promise<AFCResponse> {\n    debug(`makeDirectory: ${path}`);\n\n    return this.protocolClient.sendMessage({\n      operation: AFC_OPS.MAKE_DIR,\n      data: toCString(path),\n    });\n  }\n\n  async uploadDirectory(srcPath: string, destPath: string): Promise<void> {\n    debug(`uploadDirectory: ${srcPath}`);\n    await this.makeDirectory(destPath);\n\n    // AFC doesn't seem to give out more than 240 file handles,\n    // so we delay any requests that would push us over until more open up\n    let numOpenFiles = 0;\n    const pendingFileUploads: (() => void)[] = [];\n    const _this = this;\n    return uploadDir(srcPath);\n\n    async function uploadDir(dirPath: string): Promise<void> {\n      const promises: Promise<void>[] = [];\n      for (const file of fs.readdirSync(dirPath)) {\n        const filePath = path.join(dirPath, file);\n        const remotePath = path.join(destPath, path.relative(srcPath, filePath));\n        if (fs.lstatSync(filePath).isDirectory()) {\n          promises.push(_this.makeDirectory(remotePath).then(() => uploadDir(filePath)));\n        } else {\n          // Create promise to add to promises array\n          // this way it can be resolved once a pending upload has finished\n          let resolve: (val?: any) => void;\n          let reject: (err: AFCError) => void;\n          const promise = new Promise<void>((res, rej) => {\n            resolve = res;\n            reject = rej;\n          });\n          promises.push(promise);\n\n          // wrap upload in a function in case we need to save it for later\n          const uploadFile = (tries = 0) => {\n            numOpenFiles++;\n            _this\n              .uploadFile(filePath, remotePath)\n              .then(() => {\n                resolve();\n                numOpenFiles--;\n                const fn = pendingFileUploads.pop();\n                if (fn) {\n                  fn();\n                }\n              })\n              .catch((err: AFCError) => {\n                // Couldn't get fd for whatever reason, try again\n                // # of retries is arbitrary and can be adjusted\n                if (err.status === AFC_STATUS.NO_RESOURCES && tries < 10) {\n                  debug(`Received NO_RESOURCES from AFC, retrying ${filePath} upload. ${tries}`);\n                  uploadFile(tries++);\n                } else {\n                  numOpenFiles--;\n                  reject(err);\n                }\n              });\n          };\n\n          if (numOpenFiles < MAX_OPEN_FILES) {\n            uploadFile();\n          } else {\n            debug(\n              `numOpenFiles >= ${MAX_OPEN_FILES}, adding to pending queue. Length: ${pendingFileUploads.length}`\n            );\n            pendingFileUploads.push(uploadFile);\n          }\n        }\n      }\n      await Promise.all(promises);\n    }\n  }\n}\n\nfunction toCString(s: string) {\n  const buf = Buffer.alloc(s.length + 1);\n  const len = buf.write(s);\n  buf.writeUInt8(0, len);\n  return buf;\n}\n"],"mappings":"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"}