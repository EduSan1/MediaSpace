{"version":3,"file":"usbmuxd.js","names":["debug","Debug","isUsbmuxdConnectResponse","resp","MessageType","Number","undefined","isUsbmuxdDeviceResponse","DeviceList","isUsbmuxdPairRecordResponse","PairRecordData","UsbmuxdClient","ServiceClient","constructor","socket","UsbmuxProtocolClient","connectUsbmuxdSocket","process","platform","net","connect","port","host","path","device","DeviceID","protocolClient","sendMessage","messageType","extraFields","PortNumber","htons","ResponseError","getDevices","getDevice","udid","devices","length","Error","Properties","SerialNumber","readPairRecord","PairRecordID","BPLIST_MAGIC","Buffer","from","compare","parsePlistBuffer","plist","parse","toString","n"],"sources":["../../../../../../src/apple/native-run/ios/lib/client/usbmuxd.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport plist from '@expo/plist';\nimport Debug from 'debug';\nimport * as net from 'net';\n\nimport { parsePlistBuffer } from '../../../../../utils/parseBinaryPlistAsync';\nimport { UsbmuxProtocolClient } from '../protocol/usbmux';\nimport { ResponseError, ServiceClient } from './client';\n\nconst debug = Debug('expo:xdl:ios:lib:client:usbmuxd');\n\nexport interface UsbmuxdDeviceProperties {\n  ConnectionSpeed: number;\n  ConnectionType: 'USB';\n  DeviceID: number;\n  LocationID: number;\n  ProductID: number;\n  SerialNumber: string;\n}\n\nexport interface UsbmuxdDevice {\n  DeviceID: number;\n  MessageType: 'Attached'; // TODO: what else?\n  Properties: UsbmuxdDeviceProperties;\n}\n\nexport interface UsbmuxdConnectResponse {\n  MessageType: 'Result';\n  Number: number;\n}\n\nexport interface UsbmuxdDeviceResponse {\n  DeviceList: UsbmuxdDevice[];\n}\n\nexport interface UsbmuxdPairRecordResponse {\n  PairRecordData: Buffer;\n}\n\nexport interface UsbmuxdPairRecord {\n  DeviceCertificate: Buffer;\n  EscrowBag: Buffer;\n  HostCertificate: Buffer;\n  HostID: string;\n  HostPrivateKey: Buffer;\n  RootCertificate: Buffer;\n  RootPrivateKey: Buffer;\n  SystemBUID: string;\n  WiFiMACAddress: string;\n}\n\nfunction isUsbmuxdConnectResponse(resp: any): resp is UsbmuxdConnectResponse {\n  return resp.MessageType === 'Result' && resp.Number !== undefined;\n}\n\nfunction isUsbmuxdDeviceResponse(resp: any): resp is UsbmuxdDeviceResponse {\n  return resp.DeviceList !== undefined;\n}\n\nfunction isUsbmuxdPairRecordResponse(resp: any): resp is UsbmuxdPairRecordResponse {\n  return resp.PairRecordData !== undefined;\n}\n\nexport class UsbmuxdClient extends ServiceClient<UsbmuxProtocolClient> {\n  constructor(public socket: net.Socket) {\n    super(socket, new UsbmuxProtocolClient(socket));\n  }\n\n  static connectUsbmuxdSocket() {\n    debug('connectUsbmuxdSocket');\n    if (process.platform === 'win32') {\n      return net.connect({ port: 27015, host: 'localhost' });\n    } else {\n      return net.connect({ path: '/var/run/usbmuxd' });\n    }\n  }\n\n  async connect(device: UsbmuxdDevice, port: number) {\n    debug(`connect: ${device.DeviceID} on port ${port}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      messageType: 'Connect',\n      extraFields: {\n        DeviceID: device.DeviceID,\n        PortNumber: htons(port),\n      },\n    });\n\n    if (isUsbmuxdConnectResponse(resp) && resp.Number === 0) {\n      return this.protocolClient.socket;\n    } else {\n      throw new ResponseError(\n        `There was an error connecting to ${device.DeviceID} on port ${port}`,\n        resp\n      );\n    }\n  }\n\n  async getDevices() {\n    debug('getDevices');\n\n    const resp = await this.protocolClient.sendMessage({\n      messageType: 'ListDevices',\n    });\n\n    if (isUsbmuxdDeviceResponse(resp)) {\n      return resp.DeviceList;\n    } else {\n      throw new ResponseError('Invalid response from getDevices', resp);\n    }\n  }\n\n  async getDevice(udid?: string) {\n    debug(`getDevice ${udid ? 'udid: ' + udid : ''}`);\n    const devices = await this.getDevices();\n\n    if (!devices.length) {\n      throw new Error('No devices found');\n    }\n\n    if (!udid) {\n      return devices[0];\n    }\n\n    for (const device of devices) {\n      if (device.Properties && device.Properties.SerialNumber === udid) {\n        return device;\n      }\n    }\n\n    throw new Error(`No device with udid ${udid} found`);\n  }\n\n  async readPairRecord(udid: string): Promise<UsbmuxdPairRecord> {\n    debug(`readPairRecord: ${udid}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      messageType: 'ReadPairRecord',\n      extraFields: { PairRecordID: udid },\n    });\n\n    if (isUsbmuxdPairRecordResponse(resp)) {\n      // the pair record can be created as a binary plist\n      const BPLIST_MAGIC = Buffer.from('bplist00');\n      if (BPLIST_MAGIC.compare(resp.PairRecordData, 0, 8) === 0) {\n        debug('Binary plist pair record detected.');\n        return parsePlistBuffer(resp.PairRecordData)[0];\n      } else {\n        // TODO: use parsePlistBuffer\n        return plist.parse(resp.PairRecordData.toString()) as any; // TODO: type guard\n      }\n    } else {\n      throw new ResponseError(`There was an error reading pair record for udid: ${udid}`, resp);\n    }\n  }\n}\n\nfunction htons(n: number) {\n  return ((n & 0xff) << 8) | ((n >> 8) & 0xff);\n}\n"],"mappings":"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"}