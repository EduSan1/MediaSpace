{"version":3,"file":"CoreSimulator.js","names":["EXPO_USE_CORE_SIM","boolish","isEnabled","DeviceState","CoreSimulatorError","Error","constructor","message","code","getDevicesDirectory","path","join","os","homedir","getDirectoryForDeviceAsync","udid","deviceFolder","fs","existsSync","possibleUdids","getDirectoriesAsync","errorMessage","length","resolveUdidAsync","bootedDevice","getBootedDeviceAsync","UDID","Logger","global","debug","listDevicesAsync","devicesDirectory","devices","Promise","all","map","device","plistPath","data","parseBinaryPlistAsync","devicePlistToSimulatorDevice","filter","Boolean","getDeviceInfoAsync","deviceDirectory","runtimeSuffix","runtime","split","pop","osType","osVersionComponents","osVersion","dataPath","logPath","isAvailable","isDeleted","deviceTypeIdentifier","deviceType","state","BOOTED","name","windowName","isBooted","resolve","reject","complete","error","getContainerPathAsync","bundleIdentifier","appsFolder","apps","app","appFolder","MCMMetadataIdentifier","binaryPath","findBinaryFileInDirectory","folder","globSync","absolute","cwd","directory","promises","readdir","withFileTypes","catch","isDirectory"],"sources":["../../src/apple/CoreSimulator.ts"],"sourcesContent":["import fs from 'fs';\nimport { boolish } from 'getenv';\nimport { sync as globSync } from 'glob';\nimport os from 'os';\nimport path from 'path';\n\nimport { SimulatorDevice } from '../SimControl';\nimport { Logger } from '../internal';\nimport { parseBinaryPlistAsync } from '../utils/parseBinaryPlistAsync';\n\n// Enable this to test the JS version of simctl\nconst EXPO_USE_CORE_SIM = boolish('EXPO_USE_CORE_SIM', false);\n\nexport function isEnabled() {\n  return EXPO_USE_CORE_SIM;\n}\n\nenum DeviceState {\n  BOOTED = 3,\n  SHUTDOWN = 1,\n}\n\nexport class CoreSimulatorError extends Error {\n  constructor(public message: string, public code?: 'MALFORMED_BINARY' | 'INVALID_UDID') {\n    super(message);\n  }\n}\n\n/**\n * CoreSimulator devices folder.\n *\n * @returns /Users/evanbacon/Library/Developer/CoreSimulator/Devices\n */\nfunction getDevicesDirectory(): string {\n  return path.join(os.homedir(), '/Library/Developer/CoreSimulator/Devices/');\n}\n\n/**\n * CoreSimulator device folder, asserts when the device is invalid.\n *\n * @param props.udid device udid. Cannot be `booted`.\n * @returns /Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/\n */\nasync function getDirectoryForDeviceAsync(udid: string): Promise<string> {\n  const deviceFolder = path.join(getDevicesDirectory(), udid);\n\n  // Invalid udid (no matching device)\n  if (!fs.existsSync(deviceFolder)) {\n    const possibleUdids = await getDirectoriesAsync(getDevicesDirectory());\n    let errorMessage = `Invalid iOS Simulator device UDID: ${udid}.`;\n    if (possibleUdids.length) {\n      errorMessage += ` Expected one of: ${possibleUdids.join(', ')}`;\n    }\n    throw new CoreSimulatorError(errorMessage, 'INVALID_UDID');\n  }\n  return deviceFolder;\n}\n\nasync function resolveUdidAsync(udid: string): Promise<string> {\n  if (udid === 'booted') {\n    const bootedDevice = await getBootedDeviceAsync();\n    if (!bootedDevice) {\n      throw new CoreSimulatorError('No devices are booted.', 'INVALID_UDID');\n    }\n    udid = bootedDevice.UDID;\n    Logger.global.debug('Resolved booted device: ' + udid);\n  }\n  return udid;\n}\n\nexport async function listDevicesAsync(): Promise<SimulatorDevice[]> {\n  const devicesDirectory = getDevicesDirectory();\n  const devices = await getDirectoriesAsync(devicesDirectory);\n\n  return (\n    await Promise.all(\n      devices.map(\n        async (device): Promise<SimulatorDevice | null> => {\n          const plistPath = path.join(devicesDirectory, device, 'device.plist');\n          if (!fs.existsSync(plistPath)) return null;\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          return devicePlistToSimulatorDevice(devicesDirectory, data);\n        }\n      )\n    )\n  ).filter(Boolean) as SimulatorDevice[];\n}\n\nexport async function getDeviceInfoAsync({\n  udid,\n}: { udid?: string } = {}): Promise<SimulatorDevice> {\n  if (!udid || udid === 'booted') {\n    const bootedDevice = await getBootedDeviceAsync();\n    if (!bootedDevice) {\n      throw new CoreSimulatorError('No devices are booted.', 'INVALID_UDID');\n    }\n    const deviceDirectory = await getDirectoryForDeviceAsync(bootedDevice.UDID);\n    return devicePlistToSimulatorDevice(deviceDirectory, bootedDevice);\n  }\n\n  const deviceDirectory = await getDirectoryForDeviceAsync(udid);\n  const plistPath = path.join(deviceDirectory, 'device.plist');\n  // The plist is stored in binary format\n  const data = await parseBinaryPlistAsync(plistPath);\n  return devicePlistToSimulatorDevice(deviceDirectory, data);\n}\n\nexport function devicePlistToSimulatorDevice(deviceDirectory: string, data: any): SimulatorDevice {\n  const runtimeSuffix = data.runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n  // Create an array [tvOS, 13, 4]\n  const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n  // Join the end components [13, 4] -> '13.4'\n  const osVersion = osVersionComponents.join('.');\n  return {\n    ...data,\n    /**\n     * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n     */\n    dataPath: path.join(deviceDirectory, 'data'),\n    /**\n     * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n     */\n    logPath: path.join(os.homedir(), 'Library/Logs/CoreSimulator', data.UDID),\n    /**\n     * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n     */\n    udid: data.UDID,\n    /**\n     * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n     */\n    runtime: data.runtime,\n    isAvailable: !data.isDeleted,\n    /**\n     * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n     */\n    deviceTypeIdentifier: data.deviceType,\n    state: data.state === DeviceState.BOOTED ? 'Booted' : 'Shutdown',\n    /**\n     * 'Apple TV'\n     */\n    name: data.name,\n\n    /**\n     * 'iOS'\n     */\n    osType: osType as SimulatorDevice['osType'],\n    /**\n     * '13.4'\n     */\n    osVersion,\n    /**\n     * 'iPhone 11 (13.6)'\n     */\n    windowName: `${data.name} (${osVersion})`,\n\n    // Compare state stored under `state` to 3 (booted)\n    isBooted: data.state === DeviceState.BOOTED,\n  };\n}\n\n/**\n * Get UDID for the first booted simulator. It's unclear if this is the exact method used by  `xcrun simctl` to determine which device is \"booted\".\n *\n * @returns EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE\n */\nexport async function getBootedDeviceAsync(): Promise<{ UDID: string } | null> {\n  const devicesDirectory = getDevicesDirectory();\n  const devices = await getDirectoriesAsync(devicesDirectory);\n\n  // parallelize searching for the matching app\n  return new Promise<{ UDID: string } | null>(async (resolve, reject) => {\n    let complete: boolean = false;\n    try {\n      await Promise.all(\n        devices.map(async device => {\n          if (complete) return;\n          const plistPath = path.join(devicesDirectory, device, 'device.plist');\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          // Compare state stored under `state` to 3 (booted)\n          if (data.state === DeviceState.BOOTED) {\n            complete = true;\n            resolve(data);\n          }\n        })\n      );\n      if (!complete) {\n        resolve(null);\n      }\n    } catch (error: any) {\n      if (!complete) {\n        reject(error);\n      }\n    }\n  });\n}\n\n/**\n * Returns the local path for the installed binary.app on a given Apple simulator. Returns null when the app isn't installed.\n *\n * This can be used as a replacement for `xcrun simctl get_app_container <udid> <bundleIdentifier>` but it's over 200x faster.\n *\n * @param props.udid device udid.\n * @param props.bundleIdentifier bundle identifier for app\n * @returns local file path to installed app binary, e.g. '/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF/Exponent-2.21.3.tar.app'\n */\nexport async function getContainerPathAsync({\n  udid,\n  bundleIdentifier,\n}: {\n  udid: string;\n  bundleIdentifier: string;\n}): Promise<string | null> {\n  udid = await resolveUdidAsync(udid);\n  // Like: `/Users/evanbacon/Library/Developer/CoreSimulator/Devices/EFEEA6EF-E3F5-4EDE-9B72-29EAFA7514AE/data/Containers/Bundle/Application/`\n  // TODO: Maybe shallow glob for `.com.apple.mobile_container_manager.metadata.plist` to find apps faster\n  const appsFolder = path.join(\n    await getDirectoryForDeviceAsync(udid),\n    'data/Containers/Bundle/Application'\n  );\n\n  // Get all apps for a device\n  // Like: `['FA43A0C6-C2AD-442D-B8B1-EAF3E88CF3BF']`\n  const apps = await getDirectoriesAsync(appsFolder);\n\n  // parallelize searching for the matching app\n  return new Promise<string | null>(async (resolve, reject) => {\n    let complete: boolean = false;\n    try {\n      await Promise.all(\n        apps.map(async app => {\n          if (complete) return;\n          const appFolder = path.join(appsFolder, app);\n          const plistPath = path.join(\n            appFolder,\n            '.com.apple.mobile_container_manager.metadata.plist'\n          );\n          // The plist is stored in binary format\n          const data = await parseBinaryPlistAsync(plistPath);\n          // Compare bundle identifier stored under `MCMMetadataIdentifier`\n          if (data.MCMMetadataIdentifier === bundleIdentifier) {\n            // Find .app file in the app folder\n            const binaryPath = findBinaryFileInDirectory(appFolder);\n            if (!binaryPath) {\n              throw new CoreSimulatorError(\n                `Found matching app container at \"${appFolder}\" but binary (*.app file) is missing.`,\n                'MALFORMED_BINARY'\n              );\n            }\n            complete = true;\n            resolve(binaryPath);\n          }\n        })\n      );\n      if (!complete) {\n        resolve(null);\n      }\n    } catch (error: any) {\n      if (!complete) {\n        reject(error);\n      }\n    }\n  });\n}\n\nfunction findBinaryFileInDirectory(folder: string) {\n  // Find .app file in the app folder\n  const binaryPath = globSync('*.app', {\n    absolute: true,\n    cwd: folder,\n  })[0];\n\n  return binaryPath || null;\n}\n\nasync function getDirectoriesAsync(directory: string) {\n  return (await fs.promises.readdir(directory, { withFileTypes: true }).catch(() => []))\n    .filter(device => device.isDirectory())\n    .map(device => device.name);\n}\n"],"mappings":"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"}