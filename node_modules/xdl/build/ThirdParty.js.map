{"version":3,"file":"ThirdParty.js","names":["getManifest","publicUrl","platform","req","url","method","headers","Accept","exp","resp","axios","request","data","e","XDLError","toString","_extractManifest","expOrArray","Array","isArray","sdkVersions","Versions","versionsAsync","i","length","manifestCandidate","sdkVersion","versionObj","isDeprecated","supportedVersions","Object","keys","JSON","stringify"],"sources":["../src/ThirdParty.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\n\nimport { Versions, XDLError } from './internal';\n\nexport async function getManifest(\n  publicUrl: string,\n  { platform = 'all' }: { platform?: 'android' | 'ios' | 'all' } = {}\n) {\n  const req: AxiosRequestConfig = {\n    url: publicUrl,\n    method: 'get',\n    headers: { Accept: 'application/expo+json,application/json' },\n  };\n\n  let exp;\n  try {\n    const resp = await axios.request(req);\n    exp = resp.data;\n  } catch (e: any) {\n    throw new XDLError(\n      'INVALID_MANIFEST',\n      `Unable to fetch manifest from ${publicUrl}. ` + e.toString()\n    );\n  }\n  exp = await _extractManifest(exp, publicUrl);\n  if (exp.platform !== platform && platform !== 'all') {\n    throw new XDLError(\n      'INVALID_MANIFEST',\n      `Manifest from ${publicUrl} is not compatible with the ${platform} platform`\n    );\n  }\n  return exp;\n}\n\n// Third party publicUrls can return an array of manifests\n// We need to choose the first compatible one\nasync function _extractManifest(expOrArray: any, publicUrl: string) {\n  // if its not an array, assume it was a single manifest obj\n  if (!Array.isArray(expOrArray)) {\n    return expOrArray;\n  }\n\n  const { sdkVersions } = await Versions.versionsAsync();\n  for (let i = 0; i < expOrArray.length; i++) {\n    const manifestCandidate = expOrArray[i];\n    const sdkVersion = manifestCandidate.sdkVersion;\n    if (!sdkVersion) {\n      continue;\n    }\n    const versionObj = sdkVersions[sdkVersion];\n    if (!versionObj) {\n      continue;\n    }\n\n    const isDeprecated = versionObj.isDeprecated || false;\n    if (!isDeprecated) {\n      return manifestCandidate;\n    }\n  }\n  const supportedVersions = Object.keys(sdkVersions);\n  throw new XDLError(\n    'INVALID_MANIFEST',\n    `No compatible manifest found at ${publicUrl}. Please use one of the SDK versions supported: ${JSON.stringify(\n      supportedVersions\n    )}`\n  );\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAEO,eAAeA,WAAf,CACLC,SADK,EAEL;EAAEC,QAAQ,GAAG;AAAb,IAAiE,EAF5D,EAGL;EACA,MAAMC,GAAuB,GAAG;IAC9BC,GAAG,EAAEH,SADyB;IAE9BI,MAAM,EAAE,KAFsB;IAG9BC,OAAO,EAAE;MAAEC,MAAM,EAAE;IAAV;EAHqB,CAAhC;EAMA,IAAIC,GAAJ;;EACA,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMC,gBAAA,CAAMC,OAAN,CAAcR,GAAd,CAAnB;IACAK,GAAG,GAAGC,IAAI,CAACG,IAAX;EACD,CAHD,CAGE,OAAOC,CAAP,EAAe;IACf,MAAM,KAAIC,oBAAJ,EACJ,kBADI,EAEH,iCAAgCb,SAAU,IAA3C,GAAiDY,CAAC,CAACE,QAAF,EAF7C,CAAN;EAID;;EACDP,GAAG,GAAG,MAAMQ,gBAAgB,CAACR,GAAD,EAAMP,SAAN,CAA5B;;EACA,IAAIO,GAAG,CAACN,QAAJ,KAAiBA,QAAjB,IAA6BA,QAAQ,KAAK,KAA9C,EAAqD;IACnD,MAAM,KAAIY,oBAAJ,EACJ,kBADI,EAEH,iBAAgBb,SAAU,+BAA8BC,QAAS,WAF9D,CAAN;EAID;;EACD,OAAOM,GAAP;AACD,C,CAED;AACA;;;AACA,eAAeQ,gBAAf,CAAgCC,UAAhC,EAAiDhB,SAAjD,EAAoE;EAClE;EACA,IAAI,CAACiB,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;IAC9B,OAAOA,UAAP;EACD;;EAED,MAAM;IAAEG;EAAF,IAAkB,MAAMC,oBAAA,CAASC,aAAT,EAA9B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACO,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;IAC1C,MAAME,iBAAiB,GAAGR,UAAU,CAACM,CAAD,CAApC;IACA,MAAMG,UAAU,GAAGD,iBAAiB,CAACC,UAArC;;IACA,IAAI,CAACA,UAAL,EAAiB;MACf;IACD;;IACD,MAAMC,UAAU,GAAGP,WAAW,CAACM,UAAD,CAA9B;;IACA,IAAI,CAACC,UAAL,EAAiB;MACf;IACD;;IAED,MAAMC,YAAY,GAAGD,UAAU,CAACC,YAAX,IAA2B,KAAhD;;IACA,IAAI,CAACA,YAAL,EAAmB;MACjB,OAAOH,iBAAP;IACD;EACF;;EACD,MAAMI,iBAAiB,GAAGC,MAAM,CAACC,IAAP,CAAYX,WAAZ,CAA1B;EACA,MAAM,KAAIN,oBAAJ,EACJ,kBADI,EAEH,mCAAkCb,SAAU,mDAAkD+B,IAAI,CAACC,SAAL,CAC7FJ,iBAD6F,CAE7F,EAJE,CAAN;AAMD"}