{"version":3,"file":"IosCodeSigning.js","names":["validateProvisioningProfile","plistData","distCertFingerprint","bundleIdentifier","_ensureDeveloperCertificateIsValid","_ensureBundleIdentifierIsValid","devCertBase64","DeveloperCertificates","devCertFingerprint","_genDerCertFingerprint","Error","certBase64","certBuffer","Buffer","from","crypto","createHash","update","digest","toUpperCase","expectedBundleIdentifier","actualApplicationIdentifier","Entitlements","actualBundleIdentifier","exec","minimatch"],"sources":["../../src/detach/IosCodeSigning.ts"],"sourcesContent":["import { PlistObject } from '@expo/plist';\nimport crypto from 'crypto';\nimport minimatch from 'minimatch';\n\nexport type IPABuilderParams = {\n  provisioningProfilePath: string;\n  certPath: string;\n  certPassword?: string;\n  appUUID: string;\n  keychainPath: string;\n  bundleIdentifier: string;\n  teamID: string;\n  manifest: any;\n  workspacePath: string;\n  clientBuild?: boolean;\n};\n\nexport function validateProvisioningProfile(\n  plistData: PlistObject,\n  {\n    distCertFingerprint,\n    bundleIdentifier,\n  }: { distCertFingerprint: string; bundleIdentifier: string }\n) {\n  _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint);\n  _ensureBundleIdentifierIsValid(plistData, bundleIdentifier);\n}\n\nfunction _ensureDeveloperCertificateIsValid(plistData: any, distCertFingerprint: string) {\n  const devCertBase64 = plistData.DeveloperCertificates[0];\n  const devCertFingerprint = _genDerCertFingerprint(devCertBase64);\n  if (devCertFingerprint !== distCertFingerprint) {\n    throw new Error(\n      'validateProvisioningProfile: provisioning profile is not associated with uploaded distribution certificate'\n    );\n  }\n}\n\nfunction _genDerCertFingerprint(certBase64: string) {\n  const certBuffer = Buffer.from(certBase64, 'base64');\n  return crypto.createHash('sha1').update(certBuffer).digest('hex').toUpperCase();\n}\n\nfunction _ensureBundleIdentifierIsValid(plistData: any, expectedBundleIdentifier: string) {\n  const actualApplicationIdentifier = plistData.Entitlements['application-identifier'];\n  const actualBundleIdentifier = /\\.(.+)/.exec(actualApplicationIdentifier)?.[1];\n\n  if (!actualBundleIdentifier || !minimatch(expectedBundleIdentifier, actualBundleIdentifier)) {\n    throw new Error(\n      `validateProvisioningProfile: wrong bundleIdentifier found in provisioning profile; expected: ${expectedBundleIdentifier}, found (in provisioning profile): ${actualBundleIdentifier}`\n    );\n  }\n}\n"],"mappings":";;;;;;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAeO,SAASA,2BAAT,CACLC,SADK,EAEL;EACEC,mBADF;EAEEC;AAFF,CAFK,EAML;EACAC,kCAAkC,CAACH,SAAD,EAAYC,mBAAZ,CAAlC;;EACAG,8BAA8B,CAACJ,SAAD,EAAYE,gBAAZ,CAA9B;AACD;;AAED,SAASC,kCAAT,CAA4CH,SAA5C,EAA4DC,mBAA5D,EAAyF;EACvF,MAAMI,aAAa,GAAGL,SAAS,CAACM,qBAAV,CAAgC,CAAhC,CAAtB;;EACA,MAAMC,kBAAkB,GAAGC,sBAAsB,CAACH,aAAD,CAAjD;;EACA,IAAIE,kBAAkB,KAAKN,mBAA3B,EAAgD;IAC9C,MAAM,IAAIQ,KAAJ,CACJ,4GADI,CAAN;EAGD;AACF;;AAED,SAASD,sBAAT,CAAgCE,UAAhC,EAAoD;EAClD,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwB,QAAxB,CAAnB;EACA,OAAOI,iBAAA,CAAOC,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCL,UAAjC,EAA6CM,MAA7C,CAAoD,KAApD,EAA2DC,WAA3D,EAAP;AACD;;AAED,SAASd,8BAAT,CAAwCJ,SAAxC,EAAwDmB,wBAAxD,EAA0F;EAAA;;EACxF,MAAMC,2BAA2B,GAAGpB,SAAS,CAACqB,YAAV,CAAuB,wBAAvB,CAApC;EACA,MAAMC,sBAAsB,YAAG,SAASC,IAAT,CAAcH,2BAAd,CAAH,0CAAG,MAA6C,CAA7C,CAA/B;;EAEA,IAAI,CAACE,sBAAD,IAA2B,CAAC,IAAAE,oBAAA,EAAUL,wBAAV,EAAoCG,sBAApC,CAAhC,EAA6F;IAC3F,MAAM,IAAIb,KAAJ,CACH,gGAA+FU,wBAAyB,sCAAqCG,sBAAuB,EADjL,CAAN;EAGD;AACF"}