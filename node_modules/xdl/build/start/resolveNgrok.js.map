{"version":3,"file":"resolveNgrok.js","names":["NGROK_REQUIRED_VERSION","EXPO_DEBUG","getenv","boolish","_ngrokInstance","resolveNgrokAsync","projectRoot","shouldPrompt","autoInstall","ngrok","findNgrokBinAsync","packageName","delayAsync","answer","Prompts","confirmAsync","message","initial","Logger","global","info","chalk","bold","packageManager","PackageManager","createForProject","silent","addGlobalAsync","e","Error","resolvePackageFromProjectAsync","ngrokPackagePath","resolveFrom","pkg","require","semver","satisfies","version","ngrokPath","debug","resolveGlobalPackageAsync","requireg","resolve","localInstance","globalInstance"],"sources":["../../src/start/resolveNgrok.ts"],"sourcesContent":["import * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport getenv from 'getenv';\n// @ts-ignore\nimport requireg from 'requireg';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { delayAsync, Logger, Prompts } from '../internal';\n\nconst NGROK_REQUIRED_VERSION = '^4.1.0';\nconst EXPO_DEBUG = getenv.boolish('EXPO_DEBUG', false);\nlet _ngrokInstance: any | null = null;\n\nexport interface NgrokOptions {\n  authtoken?: string;\n  port?: string | number | null;\n  host?: string;\n  httpauth?: string;\n  region?: string;\n  configPath?: string;\n\n  proto?: 'http' | 'tcp' | 'tls';\n  addr?: string;\n  inspect?: boolean;\n  auth?: string;\n  host_header?: string;\n  bind_tls?: true | false | 'both';\n  subdomain?: string;\n  hostname?: string;\n  crt?: string;\n  key?: string;\n  client_cas?: string;\n  remote_addr?: string;\n}\n\nexport async function resolveNgrokAsync(\n  projectRoot: string,\n  {\n    shouldPrompt = true,\n    autoInstall = false,\n  }: { shouldPrompt?: boolean; autoInstall?: boolean } = {}\n): Promise<any> {\n  const ngrok = await findNgrokBinAsync(projectRoot);\n\n  if (!ngrok) {\n    const packageName = `@expo/ngrok@${NGROK_REQUIRED_VERSION}`;\n    if (shouldPrompt) {\n      if (!autoInstall) {\n        // Delay the prompt so it doesn't conflict with other dev tool logs\n        await delayAsync(100);\n      }\n      const answer =\n        autoInstall ||\n        (await Prompts.confirmAsync({\n          message: `The package ${packageName} is required to use tunnels, would you like to install it globally?`,\n          initial: true,\n        }));\n      if (answer) {\n        Logger.global.info(`Installing ${packageName} for ${chalk.bold`tunnel`} support...`);\n\n        const packageManager = PackageManager.createForProject(projectRoot, {\n          silent: !EXPO_DEBUG,\n        });\n\n        try {\n          await packageManager.addGlobalAsync(packageName);\n          Logger.global.info(`Successfully installed ${packageName}`);\n        } catch (e: any) {\n          e.message = `Failed to install ${packageName} globally: ${e.message}`;\n          throw e;\n        }\n        return await resolveNgrokAsync(projectRoot, { shouldPrompt: false });\n      }\n    }\n    throw new Error(\n      `Please install ${packageName} and try again, or try using another hosting method like lan or localhost`\n    );\n  }\n  return ngrok;\n}\n\n// Resolve a copy that's installed in the project.\nasync function resolvePackageFromProjectAsync(projectRoot: string) {\n  try {\n    const ngrokPackagePath = resolveFrom(projectRoot, '@expo/ngrok/package.json');\n    const pkg = require(ngrokPackagePath);\n    if (pkg && semver.satisfies(pkg.version, NGROK_REQUIRED_VERSION)) {\n      const ngrokPath = resolveFrom(projectRoot, '@expo/ngrok');\n      Logger.global.debug(`Resolving @expo/ngrok from project: \"${ngrokPath}\"`);\n      return require(ngrokPath);\n    }\n  } catch {}\n  return null;\n}\n\n// Resolve a copy that's installed globally.\nasync function resolveGlobalPackageAsync() {\n  try {\n    // use true to disable the use of local packages.\n    const pkg = requireg('@expo/ngrok/package.json', true);\n    if (semver.satisfies(pkg.version, NGROK_REQUIRED_VERSION)) {\n      Logger.global.debug(\n        `Resolving global @expo/ngrok from: \"${requireg.resolve('@expo/ngrok')}\"`\n      );\n      return requireg('@expo/ngrok', true);\n    }\n  } catch {}\n\n  return null;\n}\n\nasync function findNgrokBinAsync(projectRoot: string): Promise<any> {\n  if (_ngrokInstance) {\n    return _ngrokInstance;\n  }\n\n  const localInstance = await resolvePackageFromProjectAsync(projectRoot);\n  if (localInstance) {\n    _ngrokInstance = localInstance;\n    return _ngrokInstance;\n  }\n\n  const globalInstance = await resolveGlobalPackageAsync();\n  if (globalInstance) {\n    _ngrokInstance = globalInstance;\n    return _ngrokInstance;\n  }\n\n  return null;\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;AALA;AAOA,MAAMA,sBAAsB,GAAG,QAA/B;;AACA,MAAMC,UAAU,GAAGC,iBAAA,CAAOC,OAAP,CAAe,YAAf,EAA6B,KAA7B,CAAnB;;AACA,IAAIC,cAA0B,GAAG,IAAjC;;AAwBO,eAAeC,iBAAf,CACLC,WADK,EAEL;EACEC,YAAY,GAAG,IADjB;EAEEC,WAAW,GAAG;AAFhB,IAGuD,EALlD,EAMS;EACd,MAAMC,KAAK,GAAG,MAAMC,iBAAiB,CAACJ,WAAD,CAArC;;EAEA,IAAI,CAACG,KAAL,EAAY;IACV,MAAME,WAAW,GAAI,eAAcX,sBAAuB,EAA1D;;IACA,IAAIO,YAAJ,EAAkB;MAChB,IAAI,CAACC,WAAL,EAAkB;QAChB;QACA,MAAM,IAAAI,sBAAA,EAAW,GAAX,CAAN;MACD;;MACD,MAAMC,MAAM,GACVL,WAAW,KACV,MAAMM,mBAAA,CAAQC,YAAR,CAAqB;QAC1BC,OAAO,EAAG,eAAcL,WAAY,qEADV;QAE1BM,OAAO,EAAE;MAFiB,CAArB,CADI,CADb;;MAMA,IAAIJ,MAAJ,EAAY;QACVK,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAoB,cAAaT,WAAY,QAAOU,gBAAA,CAAMC,IAAK,QAAQ,aAAvE;;QAEA,MAAMC,cAAc,GAAGC,cAAc,GAACC,gBAAf,CAAgCnB,WAAhC,EAA6C;UAClEoB,MAAM,EAAE,CAACzB;QADyD,CAA7C,CAAvB;;QAIA,IAAI;UACF,MAAMsB,cAAc,CAACI,cAAf,CAA8BhB,WAA9B,CAAN;;UACAO,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAoB,0BAAyBT,WAAY,EAAzD;QACD,CAHD,CAGE,OAAOiB,CAAP,EAAe;UACfA,CAAC,CAACZ,OAAF,GAAa,qBAAoBL,WAAY,cAAaiB,CAAC,CAACZ,OAAQ,EAApE;UACA,MAAMY,CAAN;QACD;;QACD,OAAO,MAAMvB,iBAAiB,CAACC,WAAD,EAAc;UAAEC,YAAY,EAAE;QAAhB,CAAd,CAA9B;MACD;IACF;;IACD,MAAM,IAAIsB,KAAJ,CACH,kBAAiBlB,WAAY,2EAD1B,CAAN;EAGD;;EACD,OAAOF,KAAP;AACD,C,CAED;;;AACA,eAAeqB,8BAAf,CAA8CxB,WAA9C,EAAmE;EACjE,IAAI;IACF,MAAMyB,gBAAgB,GAAG,IAAAC,sBAAA,EAAY1B,WAAZ,EAAyB,0BAAzB,CAAzB;;IACA,MAAM2B,GAAG,GAAGC,OAAO,CAACH,gBAAD,CAAnB;;IACA,IAAIE,GAAG,IAAIE,iBAAA,CAAOC,SAAP,CAAiBH,GAAG,CAACI,OAArB,EAA8BrC,sBAA9B,CAAX,EAAkE;MAChE,MAAMsC,SAAS,GAAG,IAAAN,sBAAA,EAAY1B,WAAZ,EAAyB,aAAzB,CAAlB;;MACAY,kBAAA,CAAOC,MAAP,CAAcoB,KAAd,CAAqB,wCAAuCD,SAAU,GAAtE;;MACA,OAAOJ,OAAO,CAACI,SAAD,CAAd;IACD;EACF,CARD,CAQE,MAAM,CAAE;;EACV,OAAO,IAAP;AACD,C,CAED;;;AACA,eAAeE,yBAAf,GAA2C;EACzC,IAAI;IACF;IACA,MAAMP,GAAG,GAAG,IAAAQ,mBAAA,EAAS,0BAAT,EAAqC,IAArC,CAAZ;;IACA,IAAIN,iBAAA,CAAOC,SAAP,CAAiBH,GAAG,CAACI,OAArB,EAA8BrC,sBAA9B,CAAJ,EAA2D;MACzDkB,kBAAA,CAAOC,MAAP,CAAcoB,KAAd,CACG,uCAAsCE,mBAAA,CAASC,OAAT,CAAiB,aAAjB,CAAgC,GADzE;;MAGA,OAAO,IAAAD,mBAAA,EAAS,aAAT,EAAwB,IAAxB,CAAP;IACD;EACF,CATD,CASE,MAAM,CAAE;;EAEV,OAAO,IAAP;AACD;;AAED,eAAe/B,iBAAf,CAAiCJ,WAAjC,EAAoE;EAClE,IAAIF,cAAJ,EAAoB;IAClB,OAAOA,cAAP;EACD;;EAED,MAAMuC,aAAa,GAAG,MAAMb,8BAA8B,CAACxB,WAAD,CAA1D;;EACA,IAAIqC,aAAJ,EAAmB;IACjBvC,cAAc,GAAGuC,aAAjB;IACA,OAAOvC,cAAP;EACD;;EAED,MAAMwC,cAAc,GAAG,MAAMJ,yBAAyB,EAAtD;;EACA,IAAII,cAAJ,EAAoB;IAClBxC,cAAc,GAAGwC,cAAjB;IACA,OAAOxC,cAAP;EACD;;EAED,OAAO,IAAP;AACD"}