{"version":3,"file":"startAsync.js","names":["serverInstance","messageSocket","broadcastMessage","method","params","broadcast","startAsync","projectRoot","exp","getConfig","skipSDKVersionRequirement","options","verbose","assertValidProjectRoot","Analytics","logEvent","developerTool","Config","sdkVersion","watchBabelConfigForProject","webOnly","Webpack","port","webpackPort","Env","shouldUseDevServer","devClient","startDevServerAsync","startExpoServerAsync","startReactNativeServerAsync","hostType","ProjectSettings","readAsync","ConnectionStatus","isOffline","startTunnelsAsync","e","ProjectUtils","logError","message","target","isTargetingNative","DevSession","startSession","stopDevServerAsync","Promise","resolve","reject","closeJsInspector","close","error","stopInternalAsync","stopSession","all","stopAsync","stopExpoServerAsync","stopReactNativeServerAsync","stopTunnelsAsync","Android","maybeStopAdbDaemonAsync","forceQuitAsync","packagerPid","ngrokPid","readPackagerInfoAsync","process","kill","setPackagerInfoAsync","expoServerPort","packagerPort","expoServerNgrokUrl","packagerNgrokUrl","webpackServerPort","result","race","setTimeout"],"sources":["../../src/start/startAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { closeJsInspector, MessageSocket } from '@expo/dev-server';\nimport { Server } from 'http';\n\nimport {\n  Analytics,\n  Android,\n  assertValidProjectRoot,\n  Config,\n  ConnectionStatus,\n  DevSession,\n  Env,\n  ProjectSettings,\n  ProjectUtils,\n  startDevServerAsync,\n  StartDevServerOptions,\n  startExpoServerAsync,\n  startReactNativeServerAsync,\n  startTunnelsAsync,\n  stopExpoServerAsync,\n  stopReactNativeServerAsync,\n  stopTunnelsAsync,\n  Webpack,\n} from '../internal';\nimport { watchBabelConfigForProject } from './watchBabelConfig';\n\nlet serverInstance: Server | null = null;\nlet messageSocket: MessageSocket | null = null;\n\n/**\n * Sends a message over web sockets to any connected device,\n * does nothing when the dev server is not running.\n *\n * @param method name of the command. In RN projects `reload`, and `devMenu` are available. In Expo Go, `sendDevCommand` is available.\n * @param params\n */\nexport function broadcastMessage(\n  method: 'reload' | 'devMenu' | 'sendDevCommand',\n  params?: Record<string, any> | undefined\n) {\n  if (messageSocket) {\n    messageSocket.broadcast(method, params);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n    ...options\n  }: StartDevServerOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Start Project', {\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  watchBabelConfigForProject(projectRoot);\n\n  if (options.webOnly) {\n    await Webpack.startAsync(projectRoot, {\n      ...options,\n      port: options.webpackPort,\n    });\n  } else if (Env.shouldUseDevServer(exp) || options.devClient) {\n    [serverInstance, , messageSocket] = await startDevServerAsync(projectRoot, options);\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!ConnectionStatus.isOffline() && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e: any) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error starting ngrok: ${e.message}`);\n    }\n  }\n\n  const target = !options.webOnly || Webpack.isTargetingNative() ? 'native' : 'web';\n  // This is used to make Expo Go open the project in either Expo Go, or the web browser.\n  // Must come after ngrok (`startTunnelsAsync`) setup.\n  DevSession.startSession(projectRoot, exp, target);\n  return exp;\n}\n\nasync function stopDevServerAsync() {\n  return new Promise<void>((resolve, reject) => {\n    if (serverInstance) {\n      closeJsInspector();\n      serverInstance.close(error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }\n  });\n}\n\nasync function stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n\n  await Promise.all([\n    Webpack.stopAsync(projectRoot),\n    stopDevServerAsync(),\n    stopExpoServerAsync(projectRoot),\n    stopReactNativeServerAsync(projectRoot),\n    async () => {\n      if (!ConnectionStatus.isOffline()) {\n        try {\n          await stopTunnelsAsync(projectRoot);\n        } catch (e: any) {\n          ProjectUtils.logError(projectRoot, 'expo', `Error stopping ngrok: ${e.message}`);\n        }\n      }\n    },\n    await Android.maybeStopAdbDaemonAsync(),\n  ]);\n}\n\nasync function forceQuitAsync(projectRoot: string) {\n  // find RN packager and ngrok pids, attempt to kill them manually\n  const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerPid) {\n    try {\n      process.kill(packagerPid);\n    } catch {}\n  }\n  if (ngrokPid) {\n    try {\n      process.kill(ngrokPid);\n    } catch {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n    packagerPort: null,\n    packagerPid: null,\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n    webpackServerPort: null,\n  });\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  try {\n    const result = await Promise.race([\n      stopInternalAsync(projectRoot),\n      new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n    ]);\n    if (result === 'stopFailed') {\n      await forceQuitAsync(projectRoot);\n    }\n  } catch (error: any) {\n    await forceQuitAsync(projectRoot);\n    throw error;\n  }\n}\n"],"mappings":"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"}