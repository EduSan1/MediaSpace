{"version":3,"file":"ExpoUpdatesManifestHandler.js","names":["getPlatformFromRequest","req","url","parse","platform","query","headers","Error","stringifiedPlatform","String","includes","shouldUseAnonymousManifestAsync","easProjectId","ConnectionStatus","isOffline","currentSession","UserManager","getSessionAsync","getScopeKeyForProjectIdAsync","projectId","user","ensureLoggedInAsync","project","ApiV2","clientForUser","getAsync","encodeURIComponent","scopeKey","signManifestAsync","manifest","signature","postAsync","getManifestResponseAsync","projectRoot","host","acceptSignature","Map","set","hostname","stripPort","projectSettings","bundleUrlPackagerOpts","getPackagerOptionsAsync","projectConfig","getConfig","entryPoint","resolveEntryPoint","mainModuleName","UrlUtils","stripJSExtension","expoConfig","exp","expoGoConfig","getExpoGoConfig","hostUri","constructHostUriAsync","runtimeVersion","Updates","getRuntimeVersion","policy","bundleUrl","getBundleUrlAsync","ProjectAssets","resolveManifestAssets","resolver","path","match","extra","eas","shouldUseAnonymousManifest","userAnonymousIdentifier","UserSettings","getAnonymousIdentifierAsync","ANONYMOUS_USERNAME","slug","nullthrows","expoUpdatesManifest","id","uuidv4","createdAt","Date","toISOString","launchAsset","key","contentType","assets","metadata","undefined","expoClient","expoGo","manifestSignature","body","getManifestHandler","res","next","pathname","Env","isDebug","console","log","chalk","gray","JSON","stringify","headerName","headerValue","setHeader","end","Analytics","logEvent","developerTool","Config","e","ProjectUtils","logError","stack","statusCode","error","toString"],"sources":["../../src/start/ExpoUpdatesManifestHandler.ts"],"sourcesContent":["import { ExpoUpdatesManifest, getConfig } from '@expo/config';\nimport { Updates } from '@expo/config-plugins';\nimport { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport express from 'express';\nimport http from 'http';\nimport nullthrows from 'nullthrows';\nimport { parse } from 'url';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  Analytics,\n  ANONYMOUS_USERNAME,\n  ApiV2,\n  Config,\n  ConnectionStatus,\n  Env,\n  ProjectAssets,\n  ProjectUtils,\n  resolveEntryPoint,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n} from '../internal';\nimport {\n  getBundleUrlAsync,\n  getExpoGoConfig,\n  getPackagerOptionsAsync,\n  stripPort,\n} from './ManifestHandler';\n\nfunction getPlatformFromRequest(req: express.Request | http.IncomingMessage): 'android' | 'ios' {\n  const url = req.url ? parse(req.url, /* parseQueryString */ true) : null;\n  const platform = url?.query.platform || req.headers['expo-platform'];\n  if (!platform) {\n    throw new Error('Must specify expo-platform header or query parameter');\n  }\n\n  const stringifiedPlatform = String(platform);\n  if (!['android', 'ios'].includes(stringifiedPlatform)) {\n    throw new Error(`platform must be \"android\" or \"ios\". Recieved: \"${platform}\"`);\n  }\n  return stringifiedPlatform as 'android' | 'ios';\n}\n\n/**\n * Whether an anonymous scope key should be used. It should be used when:\n * 1. Offline\n * 2. Not logged-in\n * 3. No EAS project ID in config\n */\nasync function shouldUseAnonymousManifestAsync(\n  easProjectId: string | undefined | null\n): Promise<boolean> {\n  if (!easProjectId || ConnectionStatus.isOffline()) {\n    return true;\n  }\n\n  const currentSession = await UserManager.getSessionAsync();\n  if (!currentSession) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function getScopeKeyForProjectIdAsync(projectId: string): Promise<string> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const project = await ApiV2.clientForUser(user).getAsync(\n    `projects/${encodeURIComponent(projectId)}`\n  );\n  return project.scopeKey;\n}\n\nasync function signManifestAsync(manifest: ExpoUpdatesManifest): Promise<string> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const { signature } = await ApiV2.clientForUser(user).postAsync('manifest/eas/sign', {\n    manifest: (manifest as any) as JSONObject,\n  });\n  return signature;\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  platform,\n  host,\n  acceptSignature,\n}: {\n  projectRoot: string;\n  platform: 'android' | 'ios';\n  host?: string;\n  acceptSignature: boolean;\n}): Promise<{\n  body: ExpoUpdatesManifest;\n  headers: Map<string, number | string | readonly string[]>;\n}> {\n  const headers = new Map<string, any>();\n  // set required headers for Expo Updates manifest specification\n  headers.set('expo-protocol-version', 0);\n  headers.set('expo-sfv-version', 0);\n  headers.set('cache-control', 'private, max-age=0');\n  headers.set('content-type', 'application/json');\n\n  const hostname = stripPort(host);\n  const [projectSettings, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n  const projectConfig = getConfig(projectRoot);\n  const entryPoint = resolveEntryPoint(projectRoot, platform, projectConfig);\n  const mainModuleName = UrlUtils.stripJSExtension(entryPoint);\n  const expoConfig = projectConfig.exp;\n  const expoGoConfig = await getExpoGoConfig({\n    projectRoot,\n    projectSettings,\n    mainModuleName,\n    hostname,\n  });\n\n  const hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n\n  const runtimeVersion = Updates.getRuntimeVersion(\n    { ...expoConfig, runtimeVersion: expoConfig.runtimeVersion ?? { policy: 'sdkVersion' } },\n    platform\n  );\n\n  if (!runtimeVersion) {\n    throw new Error(`Unable to determine runtime version for ${platform}`);\n  }\n\n  const bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    projectSettings,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n\n  await ProjectAssets.resolveManifestAssets({\n    projectRoot,\n    manifest: expoConfig,\n    async resolver(path) {\n      return bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n    },\n  });\n\n  const easProjectId = expoConfig.extra?.eas?.projectId;\n  const shouldUseAnonymousManifest = await shouldUseAnonymousManifestAsync(easProjectId);\n  const userAnonymousIdentifier = await UserSettings.getAnonymousIdentifierAsync();\n  const scopeKey = shouldUseAnonymousManifest\n    ? `@${ANONYMOUS_USERNAME}/${expoConfig.slug}-${userAnonymousIdentifier}`\n    : await getScopeKeyForProjectIdAsync(nullthrows(easProjectId));\n\n  const expoUpdatesManifest = {\n    id: uuidv4(),\n    createdAt: new Date().toISOString(),\n    runtimeVersion,\n    launchAsset: {\n      key: 'bundle',\n      contentType: 'application/javascript',\n      url: bundleUrl,\n    },\n    assets: [], // assets are not used in development\n    metadata: {}, // required for the client to detect that this is an expo-updates manifest\n    extra: {\n      eas: {\n        projectId: easProjectId ?? undefined,\n      },\n      expoClient: {\n        ...expoConfig,\n        hostUri,\n      },\n      expoGo: expoGoConfig,\n      scopeKey,\n    },\n  };\n\n  if (acceptSignature && !shouldUseAnonymousManifest) {\n    const manifestSignature = await signManifestAsync(expoUpdatesManifest);\n    headers.set('expo-manifest-signature', manifestSignature);\n  }\n\n  return {\n    body: expoUpdatesManifest,\n    headers,\n  };\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse,\n    next: (err?: Error) => void\n  ) => {\n    // Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n    if (\n      !req.url ||\n      !['/', '/manifest', '/index.exp'].includes(\n        // Strip the query params\n        parse(req.url).pathname || req.url\n      )\n    ) {\n      next();\n      return;\n    }\n\n    if (Env.isDebug()) {\n      console.log(\n        chalk.gray(`Manifest request: URL \"${req.url}\", Headers ${JSON.stringify(req.headers)}`)\n      );\n    }\n\n    try {\n      const { body, headers } = await getManifestResponseAsync({\n        projectRoot,\n        host: req.headers.host,\n        platform: getPlatformFromRequest(req),\n        acceptSignature: !!req.headers['expo-accept-signature'],\n      });\n      for (const [headerName, headerValue] of headers) {\n        res.setHeader(headerName, headerValue);\n      }\n      res.end(JSON.stringify(body));\n\n      Analytics.logEvent('Serve Expo Updates Manifest', {\n        developerTool: Config.developerTool,\n        runtimeVersion: (body as any).runtimeVersion,\n      });\n    } catch (e: any) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n"],"mappings":"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"}