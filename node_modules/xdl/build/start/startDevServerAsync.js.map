{"version":3,"file":"startDevServerAsync.js","names":["startDevServerAsync","projectRoot","startOptions","assertValidProjectRoot","port","metroPort","devClient","Number","process","env","RCT_METRO_PORT","getFreePortAsync","ProjectSettings","setPackagerInfoAsync","expoServerPort","packagerPort","options","logger","ProjectUtils","getLogger","target","reset","resetCache","maxWorkers","projectConfig","getConfig","skipSDKVersionRequirement","unversioned","exp","sdkVersion","server","middleware","messageSocket","runMetroDevServerAsync","useExpoUpdatesManifest","forceManifestType","prependMiddleware","ExpoUpdatesManifestHandler","getManifestHandler","ManifestHandler","use","LoadingPageHandler","getLoadingPageHandler"],"sources":["../../src/start/startDevServerAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig, ProjectTarget } from '@expo/config';\nimport {\n  MessageSocket,\n  MetroDevServerOptions,\n  prependMiddleware,\n  runMetroDevServerAsync,\n} from '@expo/dev-server';\nimport http from 'http';\n\nimport {\n  assertValidProjectRoot,\n  ExpoUpdatesManifestHandler,\n  getFreePortAsync,\n  LoadingPageHandler,\n  ManifestHandler,\n  ProjectSettings,\n  ProjectUtils,\n} from '../internal';\n\nexport type StartOptions = {\n  metroPort?: number;\n  webpackPort?: number;\n  isWebSocketsEnabled?: boolean;\n  isRemoteReloadingEnabled?: boolean;\n  devClient?: boolean;\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n  platforms?: ExpoConfig['platforms'];\n  forceManifestType?: 'expo-updates' | 'classic';\n};\n\nexport async function startDevServerAsync(\n  projectRoot: string,\n  startOptions: StartOptions\n): Promise<[http.Server, any, MessageSocket]> {\n  assertValidProjectRoot(projectRoot);\n\n  let port: number;\n\n  if (startOptions.metroPort != null) {\n    // If the manually defined port is busy then an error should be thrown\n    port = startOptions.metroPort;\n  } else {\n    port = startOptions.devClient\n      ? Number(process.env.RCT_METRO_PORT) || 8081\n      : await getFreePortAsync(startOptions.metroPort || 19000);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: port,\n    packagerPort: port,\n  });\n\n  const options: MetroDevServerOptions = {\n    port,\n    logger: ProjectUtils.getLogger(projectRoot),\n    // @deprecated\n    target: startOptions.target,\n  };\n  if (startOptions.reset) {\n    options.resetCache = true;\n  }\n  if (startOptions.maxWorkers != null) {\n    options.maxWorkers = startOptions.maxWorkers;\n  }\n\n  // TODO: reduce getConfig calls\n  const projectConfig = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // Use the unversioned metro config.\n  options.unversioned =\n    !projectConfig.exp.sdkVersion || projectConfig.exp.sdkVersion === 'UNVERSIONED';\n\n  const { server, middleware, messageSocket } = await runMetroDevServerAsync(projectRoot, options);\n\n  const useExpoUpdatesManifest = startOptions.forceManifestType === 'expo-updates';\n  // We need the manifest handler to be the first middleware to run so our\n  // routes take precedence over static files. For example, the manifest is\n  // served from '/' and if the user has an index.html file in their project\n  // then the manifest handler will never run, the static middleware will run\n  // and serve index.html instead of the manifest.\n  // https://github.com/expo/expo/issues/13114\n  prependMiddleware(\n    middleware,\n    useExpoUpdatesManifest\n      ? ExpoUpdatesManifestHandler.getManifestHandler(projectRoot)\n      : ManifestHandler.getManifestHandler(projectRoot)\n  );\n\n  middleware.use(LoadingPageHandler.getLoadingPageHandler(projectRoot));\n\n  return [server, middleware, messageSocket];\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAQA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AA0BO,eAAeA,mBAAf,CACLC,WADK,EAELC,YAFK,EAGuC;EAC5C,IAAAC,kCAAA,EAAuBF,WAAvB;EAEA,IAAIG,IAAJ;;EAEA,IAAIF,YAAY,CAACG,SAAb,IAA0B,IAA9B,EAAoC;IAClC;IACAD,IAAI,GAAGF,YAAY,CAACG,SAApB;EACD,CAHD,MAGO;IACLD,IAAI,GAAGF,YAAY,CAACI,SAAb,GACHC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAb,CAAN,IAAsC,IADnC,GAEH,MAAM,IAAAC,4BAAA,EAAiBT,YAAY,CAACG,SAAb,IAA0B,KAA3C,CAFV;EAGD;;EACD,MAAMO,2BAAA,CAAgBC,oBAAhB,CAAqCZ,WAArC,EAAkD;IACtDa,cAAc,EAAEV,IADsC;IAEtDW,YAAY,EAAEX;EAFwC,CAAlD,CAAN;EAKA,MAAMY,OAA8B,GAAG;IACrCZ,IADqC;IAErCa,MAAM,EAAEC,wBAAA,CAAaC,SAAb,CAAuBlB,WAAvB,CAF6B;IAGrC;IACAmB,MAAM,EAAElB,YAAY,CAACkB;EAJgB,CAAvC;;EAMA,IAAIlB,YAAY,CAACmB,KAAjB,EAAwB;IACtBL,OAAO,CAACM,UAAR,GAAqB,IAArB;EACD;;EACD,IAAIpB,YAAY,CAACqB,UAAb,IAA2B,IAA/B,EAAqC;IACnCP,OAAO,CAACO,UAAR,GAAqBrB,YAAY,CAACqB,UAAlC;EACD,CA7B2C,CA+B5C;;;EACA,MAAMC,aAAa,GAAG,IAAAC,mBAAA,EAAUxB,WAAV,EAAuB;IAAEyB,yBAAyB,EAAE;EAA7B,CAAvB,CAAtB,CAhC4C,CAkC5C;;EACAV,OAAO,CAACW,WAAR,GACE,CAACH,aAAa,CAACI,GAAd,CAAkBC,UAAnB,IAAiCL,aAAa,CAACI,GAAd,CAAkBC,UAAlB,KAAiC,aADpE;EAGA,MAAM;IAAEC,MAAF;IAAUC,UAAV;IAAsBC;EAAtB,IAAwC,MAAM,IAAAC,mCAAA,EAAuBhC,WAAvB,EAAoCe,OAApC,CAApD;EAEA,MAAMkB,sBAAsB,GAAGhC,YAAY,CAACiC,iBAAb,KAAmC,cAAlE,CAxC4C,CAyC5C;EACA;EACA;EACA;EACA;EACA;;EACA,IAAAC,8BAAA,EACEL,UADF,EAEEG,sBAAsB,GAClBG,sCAAA,CAA2BC,kBAA3B,CAA8CrC,WAA9C,CADkB,GAElBsC,2BAAA,CAAgBD,kBAAhB,CAAmCrC,WAAnC,CAJN;EAOA8B,UAAU,CAACS,GAAX,CAAeC,8BAAA,CAAmBC,qBAAnB,CAAyCzC,WAAzC,CAAf;EAEA,OAAO,CAAC6B,MAAD,EAASC,UAAT,EAAqBC,aAArB,CAAP;AACD"}