{"version":3,"file":"ngrok.js","names":["NGROK_CONFIG","authToken","authTokenPublicId","domain","getNgrokConfigPath","path","join","UserSettings","dotExpoHomeDirectory","getProjectRandomnessAsync","projectRoot","ps","ProjectSettings","readAsync","randomness","urlRandomness","resetProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","connectToNgrokAsync","ngrok","args","hostnameAsync","ngrokPid","attempts","configPath","hostname","url","connect","onStatusChange","handleStatusChange","bind","e","message","XDLError","toString","JSON","stringify","error_code","process","kill","ProjectUtils","logDebug","delayAsync","TUNNEL_TIMEOUT","startTunnelsAsync","options","resolveNgrokAsync","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","assertValidProjectRoot","packagerInfo","readPackagerInfoAsync","packagerPort","expoServerPort","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","parse","base","expRc","readExpRcAsync","startedTunnelsSuccessfully","Promise","race","Error","createResolver","extra","resolveHostnameAsync","manifestTunnelRandomness","domainify","isLegacyDevServer","expoServerNgrokUrl","authtoken","port","proto","packagerNgrokUrl","setPackagerInfoAsync","getActiveProcess","pid","logWithLevel","tag","_expoEventType","shouldPrompt","catch","ngrokProcess","ngrokProcessPid","stopAdbReverseAsync","status","logError"],"sources":["../../src/start/ngrok.ts"],"sourcesContent":["import { readExpRcAsync } from '@expo/config';\nimport * as path from 'path';\n\nimport {\n  Android,\n  ANONYMOUS_USERNAME,\n  assertValidProjectRoot,\n  delayAsync,\n  NgrokOptions,\n  ProjectSettings,\n  ProjectUtils,\n  resolveNgrokAsync,\n  UserManager,\n  UserSettings,\n  XDLError,\n} from '../internal';\nimport * as UrlUtils from './ngrokUrl';\n\nconst NGROK_CONFIG = {\n  authToken: '5W1bR67GNbWcXqmxZzBG1_56GezNeaX6sSRvn8npeQ8',\n  authTokenPublicId: '5W1bR67GNbWcXqmxZzBG1',\n  domain: 'exp.direct',\n};\n\nfunction getNgrokConfigPath() {\n  return path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n}\n\nasync function getProjectRandomnessAsync(projectRoot: string) {\n  const ps = await ProjectSettings.readAsync(projectRoot);\n  const randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nasync function resetProjectRandomnessAsync(projectRoot: string) {\n  const randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nasync function connectToNgrokAsync(\n  projectRoot: string,\n  ngrok: any,\n  args: NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  try {\n    const configPath = getNgrokConfigPath();\n    const hostname = await hostnameAsync();\n    const url = await ngrok.connect({\n      hostname,\n      configPath,\n      onStatusChange: handleStatusChange.bind(null, projectRoot),\n      ...args,\n    });\n    return url;\n  } catch (e: any) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrok.kill();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return connectToNgrokAsync(projectRoot, ngrok, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nexport async function startTunnelsAsync(\n  projectRoot: string,\n  options: { autoInstall?: boolean } = {}\n): Promise<void> {\n  const ngrok = await resolveNgrokAsync(projectRoot, options);\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  const packageShortName = path.parse(projectRoot).base;\n  const expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n\n    (async () => {\n      const createResolver = (extra: string[] = []) =>\n        async function resolveHostnameAsync() {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await getProjectRandomnessAsync(projectRoot);\n          return [\n            ...extra,\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            NGROK_CONFIG.domain,\n          ].join('.');\n        };\n\n      // If both ports are defined and they don't match then we can assume the legacy dev server is being used.\n      const isLegacyDevServer =\n        !!expoServerPort &&\n        !!packagerInfo.packagerPort &&\n        expoServerPort !== packagerInfo.packagerPort;\n\n      ProjectUtils.logInfo(projectRoot, 'expo', `Using legacy dev server: ${isLegacyDevServer}`);\n\n      const expoServerNgrokUrl = await connectToNgrokAsync(\n        projectRoot,\n        ngrok,\n        {\n          authtoken: NGROK_CONFIG.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        createResolver(),\n        packagerInfo.ngrokPid\n      );\n\n      let packagerNgrokUrl: string;\n      if (isLegacyDevServer) {\n        packagerNgrokUrl = await connectToNgrokAsync(\n          projectRoot,\n          ngrok,\n          {\n            authtoken: NGROK_CONFIG.authToken,\n            port: packagerInfo.packagerPort,\n            proto: 'http',\n          },\n          createResolver(['packager']),\n          packagerInfo.ngrokPid\n        );\n      } else {\n        // Custom dev server will share the port across expo and metro dev servers,\n        // this means we only need one ngrok URL.\n        packagerNgrokUrl = expoServerNgrokUrl;\n      }\n\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.getActiveProcess().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  assertValidProjectRoot(projectRoot);\n  const ngrok = await resolveNgrokAsync(projectRoot, { shouldPrompt: false }).catch(() => null);\n  if (!ngrok) {\n    return;\n  }\n\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const ngrokProcess = ngrok.getActiveProcess();\n  const ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrok.kill();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nfunction handleStatusChange(projectRoot: string, status: string) {\n  if (status === 'closed') {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      'We noticed your tunnel is having issues. ' +\n        'This may be due to intermittent problems with our tunnel provider. ' +\n        'If you have trouble connecting to your app, try to Restart the project, ' +\n        'or switch Host to LAN.'\n    );\n  } else if (status === 'connected') {\n    ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n  }\n}\n"],"mappings":"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"}