{"version":3,"file":"Android.js","names":["_lastUrl","_isAdbOwner","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","INSTALL_WARNING_TIMEOUT","EMULATOR_MAX_WAIT_TIMEOUT","whichEmulator","process","env","ANDROID_HOME","whichADB","getEmulatorsAsync","stdout","spawnAsync","split","os","EOL","filter","Boolean","map","name","type","isBooted","isAuthorized","getAbdNameForEmulatorIdAsync","emulatorId","trim","getAdbOutputAsync","shift","getAllAvailableDevicesAsync","bootedDevices","getAttachedDevicesAsync","data","connectedNames","offlineEmulators","includes","allDevices","concat","length","genymotionMessage","Error","isBootAnimationCompleteAsync","pid","props","getPropertyDataForDeviceAsync","PROP_BOOT_ANIMATION_STATE","match","startEmulatorAsync","device","Logger","global","info","chalk","bold","emulatorProcess","child_process","spawn","stdio","detached","unref","Promise","resolve","reject","waitTimer","setInterval","connected","find","stopWaiting","maxTimer","setTimeout","manualCommand","stopWaitingAndReject","clearTimeout","clearInterval","message","on","output","splitItems","replace","attachedDevices","slice","line","devicePromises","deviceInfo","modelItem","all","isPlatformSupported","platform","adbAlreadyRunning","adb","result","lines","stderr","e","errorMessage","startsWith","substring","args","Binaries","addToPathAsync","alreadyRunning","Env","isDebug","join","signal","isAbortError","getAdbFileOutputAsync","encoding","execFileSync","_isDeviceAuthorizedAsync","isInstalledAsync","androidPackage","packages","adbPidArgs","i","_isExpoInstalledAsync","ensureDevClientInstalledAsync","applicationId","learnMore","isDevClientInstalledAsync","getExpoVersionAsync","regex","regexMatch","exec","isClientOutdatedAsync","sdkVersion","versions","Versions","versionsAsync","clientForSdk","getClientForSDK","latestVersionForSdk","version","androidVersion","installedVersion","semver","lt","installExpoAsync","url","warningTimer","setWarningTimer","notifications","code","LoadingEvent","START_PROGRESS_BAR","path","downloadApkAsync","progress","TICK_PROGRESS_BAR","STOP_PROGRESS_BAR","START_LOADING","installOnDeviceAsync","binaryPath","STOP_LOADING","isDeviceBootedAsync","devices","uninstallExpoAsync","isInstalled","error","upgradeExpoAsync","attemptToStartEmulatorOrAssertAsync","_openUrlAsync","openClient","indexOf","openProject","getUnixPID","port","activateEmulatorWindowAsync","androidPid","osascript","execAsync","openAppAsync","launchActivity","XDLError","logUnauthorized","warn","dim","hasPromptedToUpgrade","isManagedProjectAsync","projectRoot","AndroidConfig","Paths","getProjectPathOrThrowAsync","openUrlAsync","isDetached","devClient","exp","bootedDevice","underline","installedExpo","clientApplicationId","installExpoIfNeeded","shouldInstall","promptKey","confirm","Prompts","confirmAsync","initial","androidClient","getClientApplicationId","isManaged","android","package","resolveApplicationIdAsync","getAppBuildGradleFilePath","isInterstitiaLPageEnabled","isDevClientPackageInstalled","isDevClientInstalled","newProjectUrl","constructDeepLinkAsync","undefined","debug","Analytics","logEvent","sdkVersionString","sdkVersionsAsync","androidClientUrl","androidClientVersion","applicationIdFromGradle","Package","getApplicationIdAsync","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","getMainActivityOrThrow","manifest","$","getConfig","skipSDKVersionRequirement","scheme","shouldGenerateInterstitialPage","UrlUtils","constructLoadingUrlAsync","catch","openProjectAsync","shouldPrompt","startAdbReverseAsync","projectUrl","booted","success","promptForDeviceAsync","gray","openWebProjectAsync","Webpack","getUrlAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","readExpRcAsync","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","adbReverse","stopAdbReverseAsync","adbReverseRemove","options","push","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","gteSdkVersion","splashScreenMode","splash","resizeMode","generalSplashImagePath","image","italic","generalSplashImage","ImageUtils","getImageDimensionsAsync","androidSplash","androidSplashImages","imageRelativePath","splashImage","width","height","expectedWidth","expectedHeight","sizeMatches","some","maybeStopAdbDaemonAsync","nameStyleForDevice","isActive","text","pauseInteractions","value","prompts","limit","choices","item","format","title","suggest","input","RegExp","choice","test","resumeInteractions","DeviceABI","deviceProperties","PROP_SDK_VERSION","PROP_API_VERSION","PROP_CPU_NAME","PROP_CPU_ABILIST_NAME","LOWEST_SUPPORTED_EXPO_API_VERSION","getDeviceSDKVersionAsync","getPropertyForDeviceAsync","getDeviceAPIVersionAsync","parseInt","getDeviceABIsAsync","cpuAbilist","abi","shouldRefresh","prop","propCommand","results","toString","parseAdbDeviceProperties","devicePropertiesString","properties","propertyExp","matchAll"],"sources":["../src/Android.ts"],"sourcesContent":["import { ExpoConfig, getConfig, readExpRcAsync } from '@expo/config';\nimport { AndroidConfig } from '@expo/config-plugins';\nimport * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport child_process, { execFileSync } from 'child_process';\nimport trim from 'lodash/trim';\nimport os from 'os';\nimport prompts from 'prompts';\nimport semver from 'semver';\n\nimport {\n  Analytics,\n  Binaries,\n  downloadApkAsync,\n  Env,\n  ImageUtils,\n  isDevClientPackageInstalled,\n  learnMore,\n  LoadingEvent,\n  Logger,\n  ProjectSettings,\n  Prompts,\n  UrlUtils,\n  Versions,\n  Webpack,\n  XDLError,\n} from './internal';\n\nexport type Device = {\n  pid?: string;\n  name: string;\n  type: 'emulator' | 'device';\n  isBooted: boolean;\n  isAuthorized: boolean;\n};\n\nlet _lastUrl: string | null = null;\nlet _isAdbOwner: boolean | null = null;\n\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nconst INSTALL_WARNING_TIMEOUT = 60 * 1000;\n\nconst EMULATOR_MAX_WAIT_TIMEOUT = 60 * 1000 * 3;\n\nfunction whichEmulator(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/emulator/emulator`;\n  }\n  return 'emulator';\n}\n\nfunction whichADB(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/platform-tools/adb`;\n  }\n  return 'adb';\n}\n\n/**\n * Returns a list of emulator names.\n */\nasync function getEmulatorsAsync(): Promise<Device[]> {\n  try {\n    const { stdout } = await spawnAsync(whichEmulator(), ['-list-avds']);\n    return stdout\n      .split(os.EOL)\n      .filter(Boolean)\n      .map(name => ({\n        name,\n        type: 'emulator',\n        // unsure from this\n        isBooted: false,\n        isAuthorized: true,\n      }));\n  } catch {\n    return [];\n  }\n}\n\n/**\n * Return the Emulator name for an emulator ID, this can be used to determine if an emulator is booted.\n *\n * @param emulatorId a value like `emulator-5554` from `abd devices`\n */\nasync function getAbdNameForEmulatorIdAsync(emulatorId: string): Promise<string | null> {\n  return (\n    trim(await getAdbOutputAsync(['-s', emulatorId, 'emu', 'avd', 'name']))\n      .split(/\\r?\\n/)\n      .shift() ?? null\n  );\n}\n\nexport async function getAllAvailableDevicesAsync(): Promise<Device[]> {\n  const bootedDevices = await getAttachedDevicesAsync();\n\n  const data = await getEmulatorsAsync();\n  const connectedNames = bootedDevices.map(({ name }) => name);\n\n  const offlineEmulators = data\n    .filter(({ name }) => !connectedNames.includes(name))\n    .map(({ name, type }) => {\n      return {\n        name,\n        type,\n        isBooted: false,\n        // TODO: Are emulators always authorized?\n        isAuthorized: true,\n      };\n    });\n\n  const allDevices = bootedDevices.concat(offlineEmulators);\n\n  if (!allDevices.length) {\n    const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n    throw new Error(\n      `No Android connected device found, and no emulators could be started automatically.\\nPlease connect a device or create an emulator (https://docs.expo.dev/workflow/android-studio-emulator).\\nThen follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  return allDevices;\n}\n\n/**\n * Returns true when a device's splash screen animation has stopped.\n * This can be used to detect when a device is fully booted and ready to use.\n *\n * @param pid\n */\nasync function isBootAnimationCompleteAsync(pid?: string): Promise<boolean> {\n  try {\n    const props = await getPropertyDataForDeviceAsync({ pid }, PROP_BOOT_ANIMATION_STATE);\n    return !!props[PROP_BOOT_ANIMATION_STATE].match(/stopped/);\n  } catch {\n    return false;\n  }\n}\n\nasync function startEmulatorAsync(device: Pick<Device, 'name'>): Promise<Device> {\n  Logger.global.info(`\\u203A Opening emulator ${chalk.bold(device.name)}`);\n\n  // Start a process to open an emulator\n  const emulatorProcess = child_process.spawn(\n    whichEmulator(),\n    [\n      `@${device.name}`,\n      // disable animation for faster boot -- this might make it harder to detect if it mounted properly tho\n      //'-no-boot-anim'\n      // '-google-maps-key' -- TODO: Use from config\n    ],\n    {\n      stdio: 'ignore',\n      detached: true,\n    }\n  );\n\n  emulatorProcess.unref();\n\n  return new Promise<Device>((resolve, reject) => {\n    const waitTimer = setInterval(async () => {\n      const bootedDevices = await getAttachedDevicesAsync();\n      const connected = bootedDevices.find(({ name }) => name === device.name);\n      if (connected) {\n        const isBooted = await isBootAnimationCompleteAsync(connected.pid);\n        if (isBooted) {\n          stopWaiting();\n          resolve(connected);\n        }\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const maxTimer = setTimeout(() => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `It took too long to start the Android emulator: ${device.name}. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    }, EMULATOR_MAX_WAIT_TIMEOUT);\n\n    const stopWaiting = () => {\n      clearTimeout(maxTimer);\n      clearInterval(waitTimer);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      stopWaiting();\n      reject(new Error(message));\n      clearInterval(waitTimer);\n    };\n\n    emulatorProcess.on('error', ({ message }) => stopWaitingAndReject(message));\n\n    emulatorProcess.on('exit', () => {\n      const manualCommand = `${whichEmulator()} @${device.name}`;\n      stopWaitingAndReject(\n        `The emulator (${device.name}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    });\n  });\n}\n\n// TODO: This is very expensive for some operations.\nexport async function getAttachedDevicesAsync(): Promise<Device[]> {\n  const output = await getAdbOutputAsync(['devices', '-l']);\n\n  const splitItems = output.trim().replace(/\\n$/, '').split(os.EOL);\n  // First line is `\"List of devices attached\"`, remove it\n  // @ts-ignore: todo\n  const attachedDevices: {\n    props: string[];\n    type: Device['type'];\n    isAuthorized: Device['isAuthorized'];\n  }[] = splitItems\n    .slice(1, splitItems.length)\n    .map(line => {\n      // unauthorized: ['FA8251A00719', 'unauthorized', 'usb:338690048X', 'transport_id:5']\n      // authorized: ['FA8251A00719', 'device', 'usb:336592896X', 'product:walleye', 'model:Pixel_2', 'device:walleye', 'transport_id:4']\n      // emulator: ['emulator-5554', 'offline', 'transport_id:1']\n      const props = line.split(' ').filter(Boolean);\n\n      const isAuthorized = props[1] !== 'unauthorized';\n      const type = line.includes('emulator') ? 'emulator' : 'device';\n      return { props, type, isAuthorized };\n    })\n    .filter(({ props: [pid] }) => !!pid);\n\n  const devicePromises = attachedDevices.map<Promise<Device>>(async props => {\n    const {\n      type,\n      props: [pid, ...deviceInfo],\n      isAuthorized,\n    } = props;\n\n    let name: string | null = null;\n\n    if (type === 'device') {\n      if (isAuthorized) {\n        // Possibly formatted like `model:Pixel_2`\n        // Transform to `Pixel_2`\n        const modelItem = deviceInfo.find(info => info.includes('model:'));\n        if (modelItem) {\n          name = modelItem.replace('model:', '');\n        }\n      }\n      // unauthorized devices don't have a name available to read\n      if (!name) {\n        // Device FA8251A00719\n        name = `Device ${pid}`;\n      }\n    } else {\n      // Given an emulator pid, get the emulator name which can be used to start the emulator later.\n      name = (await getAbdNameForEmulatorIdAsync(pid)) ?? '';\n    }\n\n    return {\n      pid,\n      name,\n      type,\n      isAuthorized,\n      isBooted: true,\n    };\n  });\n\n  return Promise.all(devicePromises);\n}\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function adbAlreadyRunning(adb: string): Promise<boolean> {\n  try {\n    const result = await spawnAsync(adb, ['start-server']);\n    const lines = trim(result.stderr).split(/\\r?\\n/);\n    return lines.includes('* daemon started successfully') === false;\n  } catch (e: any) {\n    let errorMessage = trim(e.stderr || e.stdout);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  if (Env.isDebug()) {\n    Logger.global.info([adb, ...args].join(' '));\n  }\n  try {\n    const result = await spawnAsync(adb, args);\n    return result.output.join('\\n');\n  } catch (e: any) {\n    // User pressed ctrl+c to cancel the process...\n    if (e.signal === 'SIGINT') {\n      e.isAbortError = true;\n    }\n    // TODO: Support heap corruption for adb 29 (process exits with code -1073740940) (windows and linux)\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nexport async function getAdbFileOutputAsync(args: string[], encoding?: 'latin1') {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  try {\n    return await execFileSync(adb, args, {\n      encoding,\n      stdio: 'pipe',\n    });\n  } catch (e: any) {\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    e.message = errorMessage;\n    throw e;\n  }\n}\n\nasync function _isDeviceAuthorizedAsync(device: Device): Promise<boolean> {\n  // TODO: Get the latest version of the device in case isAuthorized changes.\n  return device.isAuthorized;\n}\n\nasync function isInstalledAsync(device: Device, androidPackage: string): Promise<boolean> {\n  const packages = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'pm', 'list', 'packages', androidPackage)\n  );\n\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line === `package:${androidPackage}`) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync(device: Device) {\n  return await isInstalledAsync(device, 'host.exp.exponent');\n}\n\nasync function ensureDevClientInstalledAsync(device: Device, applicationId: string): Promise<void> {\n  if (!(await isInstalledAsync(device, applicationId))) {\n    throw new Error(\n      `The development client (${applicationId}) for this project is not installed. ` +\n        `Please build and install the client on the device first.\\n${learnMore(\n          'https://docs.expo.dev/clients/distribution-for-android/'\n        )}`\n    );\n  }\n}\n\nasync function isDevClientInstalledAsync(device: Device, applicationId: string): Promise<boolean> {\n  return await isInstalledAsync(device, applicationId);\n}\n\nasync function getExpoVersionAsync(device: Device): Promise<string | null> {\n  const info = await getAdbOutputAsync(\n    adbPidArgs(device.pid, 'shell', 'dumpsys', 'package', 'host.exp.exponent')\n  );\n\n  const regex = /versionName=([0-9.]+)/;\n  const regexMatch = regex.exec(info);\n  if (!regexMatch || regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function isClientOutdatedAsync(device: Device, sdkVersion?: string): Promise<boolean> {\n  const versions = await Versions.versionsAsync();\n  const clientForSdk = await getClientForSDK(sdkVersion);\n  const latestVersionForSdk = clientForSdk?.version ?? versions.androidVersion;\n  const installedVersion = await getExpoVersionAsync(device);\n  return !installedVersion || semver.lt(installedVersion, latestVersionForSdk);\n}\n\nexport async function installExpoAsync({\n  device,\n  url,\n  version,\n}: {\n  device: Device;\n  url?: string;\n  version?: string;\n}) {\n  let warningTimer: NodeJS.Timeout;\n  const setWarningTimer = () => {\n    if (warningTimer) {\n      clearTimeout(warningTimer);\n    }\n    return setTimeout(() => {\n      Logger.global.info('');\n      Logger.global.info(\n        'This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.dev/tools'\n      );\n    }, INSTALL_WARNING_TIMEOUT);\n  };\n\n  Logger.notifications.info(\n    { code: LoadingEvent.START_PROGRESS_BAR },\n    'Downloading the Expo Go app [:bar] :percent :etas'\n  );\n\n  warningTimer = setWarningTimer();\n  const path = await downloadApkAsync(url, progress => {\n    Logger.notifications.info({ code: LoadingEvent.TICK_PROGRESS_BAR }, progress);\n  });\n\n  Logger.notifications.info({ code: LoadingEvent.STOP_PROGRESS_BAR });\n\n  const message = version\n    ? `Installing Expo Go ${version} on ${device.name}`\n    : `Installing Expo Go on ${device.name}`;\n\n  Logger.notifications.info({ code: LoadingEvent.START_LOADING }, message);\n  warningTimer = setWarningTimer();\n  const result = await installOnDeviceAsync(device, { binaryPath: path });\n  Logger.notifications.info({ code: LoadingEvent.STOP_LOADING });\n\n  clearTimeout(warningTimer);\n  return result;\n}\n\nexport async function installOnDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  { binaryPath }: { binaryPath: string }\n) {\n  return await getAdbOutputAsync(adbPidArgs(device.pid, 'install', '-r', '-d', binaryPath));\n}\n\nexport async function isDeviceBootedAsync({\n  name,\n}: { name?: string } = {}): Promise<Device | null> {\n  const devices = await getAttachedDevicesAsync();\n\n  if (!name) {\n    return devices[0] ?? null;\n  }\n\n  return devices.find(device => device.name === name) ?? null;\n}\n\nexport async function uninstallExpoAsync(device: Device): Promise<string | undefined> {\n  Logger.global.info('Uninstalling Expo Go from Android device.');\n\n  // we need to check if its installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n  const isInstalled = await _isExpoInstalledAsync(device);\n  if (!isInstalled) {\n    return;\n  }\n\n  try {\n    return await getAdbOutputAsync(adbPidArgs(device.pid, 'uninstall', 'host.exp.exponent'));\n  } catch (e: any) {\n    Logger.global.error(\n      'Could not uninstall Expo Go from your device, please uninstall Expo Go manually and try again.'\n    );\n    throw e;\n  }\n}\n\nexport async function upgradeExpoAsync({\n  url,\n  version,\n  device,\n}: {\n  url?: string;\n  version?: string;\n  device?: Device | null;\n} = {}): Promise<boolean> {\n  try {\n    if (!device) {\n      device = (await getAttachedDevicesAsync())[0];\n      if (!device) {\n        throw new Error('no devices connected');\n      }\n    }\n    device = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!device) {\n      return false;\n    }\n\n    await uninstallExpoAsync(device);\n    await installExpoAsync({ device, url, version });\n    if (_lastUrl) {\n      Logger.global.info(`\\u203A Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e: any) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\nasync function _openUrlAsync({\n  pid,\n  url,\n  applicationId,\n}: {\n  pid: string;\n  url: string;\n  applicationId: string;\n}) {\n  // NOTE(brentvatne): temporary workaround! launch Expo Go first, then\n  // launch the project!\n  // https://github.com/expo/expo/issues/7772\n  // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n  // Note: this is not needed in Expo Development Client, it only applies to Expo Go\n  if (applicationId === 'host.exp.exponent') {\n    const openClient = await getAdbOutputAsync(\n      adbPidArgs(\n        pid,\n        'shell',\n        'monkey',\n        '-p',\n        applicationId,\n        '-c',\n        'android.intent.category.LAUNCHER',\n        '1'\n      )\n    );\n    if (openClient.includes(CANT_START_ACTIVITY_ERROR)) {\n      throw new Error(openClient.substring(openClient.indexOf('Error: ')));\n    }\n  }\n\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(pid, 'shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url)\n  );\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  return openProject;\n}\n\nfunction getUnixPID(port: number | string) {\n  return execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], {\n    encoding: 'utf8',\n    stdio: ['pipe', 'pipe', 'ignore'],\n  })\n    .split('\\n')[0]\n    .trim();\n}\n\nexport async function activateEmulatorWindowAsync(device: Pick<Device, 'type' | 'pid'>) {\n  if (\n    // only mac is supported for now.\n    process.platform !== 'darwin' ||\n    // can only focus emulators\n    device.type !== 'emulator'\n  ) {\n    return;\n  }\n\n  // Google Emulator ID: `emulator-5554` -> `5554`\n  const androidPid = device.pid!.match(/-(\\d+)/)?.[1];\n  if (!androidPid) {\n    return;\n  }\n  // Unix PID\n  const pid = getUnixPID(androidPid);\n\n  try {\n    await osascript.execAsync(`\n  tell application \"System Events\"\n    set frontmost of the first process whose unix id is ${pid} to true\n  end tell`);\n  } catch {\n    // noop -- this feature is very specific and subject to failure.\n  }\n}\n\n/**\n * @param device Android device to open on\n * @param props.launchActivity Activity to launch `[application identifier]/.[main activity name]`, ex: `com.bacon.app/.MainActivity`\n */\nexport async function openAppAsync(\n  device: Pick<Device, 'pid' | 'type'>,\n  {\n    launchActivity,\n  }: {\n    launchActivity: string;\n  }\n) {\n  const openProject = await getAdbOutputAsync(\n    adbPidArgs(\n      device.pid,\n      'shell',\n      'am',\n      'start',\n      '-a',\n      'android.intent.action.RUN',\n      // FLAG_ACTIVITY_SINGLE_TOP -- If set, the activity will not be launched if it is already running at the top of the history stack.\n      '-f',\n      '0x20000000',\n      // Activity to open first: com.bacon.app/.MainActivity\n      '-n',\n      launchActivity\n    )\n  );\n\n  // App is not installed or main activity cannot be found\n  if (openProject.match(/Error: Activity class .* does not exist./g)) {\n    throw new XDLError('APP_NOT_INSTALLED', openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  await activateEmulatorWindowAsync(device);\n\n  return openProject;\n}\n\nexport async function attemptToStartEmulatorOrAssertAsync(device: Device): Promise<Device | null> {\n  // TODO: Add a light-weight method for checking since a device could disconnect.\n\n  if (!(await isDeviceBootedAsync(device))) {\n    device = await startEmulatorAsync(device);\n  }\n\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nfunction logUnauthorized(device: Device) {\n  Logger.global.warn(\n    `\\nThis computer is not authorized for developing on ${chalk.bold(device.name)}. ${chalk.dim(\n      learnMore('https://expo.fyi/authorize-android-device')\n    )}`\n  );\n}\n\n// Keep a list of simulator UDIDs so we can prevent asking multiple times if a user wants to upgrade.\n// This can prevent annoying interactions when they don't want to upgrade for whatever reason.\nconst hasPromptedToUpgrade: Record<string, boolean> = {};\n\nasync function isManagedProjectAsync(projectRoot: string) {\n  try {\n    await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n    return false;\n  } catch {\n    return true;\n  }\n}\n\nasync function openUrlAsync({\n  url,\n  device,\n  isDetached = false,\n  sdkVersion,\n  devClient = false,\n  exp,\n  projectRoot,\n}: {\n  url: string;\n  isDetached?: boolean;\n  device: Device;\n  sdkVersion?: string;\n  devClient?: boolean;\n  exp?: ExpoConfig;\n  projectRoot: string;\n}): Promise<void> {\n  const bootedDevice = await attemptToStartEmulatorOrAssertAsync(device);\n  if (!bootedDevice) {\n    return;\n  }\n  Logger.global.info(`\\u203A Opening ${chalk.underline(url)} on ${chalk.bold(bootedDevice.name)}`);\n\n  await activateEmulatorWindowAsync(bootedDevice);\n\n  device = bootedDevice;\n  let installedExpo = false;\n  let clientApplicationId = 'host.exp.exponent';\n\n  const installExpoIfNeeded = async (device: Device) => {\n    let shouldInstall = !(await _isExpoInstalledAsync(device));\n    const promptKey = device.pid ?? 'unknown';\n    if (\n      !shouldInstall &&\n      !hasPromptedToUpgrade[promptKey] &&\n      (await isClientOutdatedAsync(device, sdkVersion))\n    ) {\n      // Only prompt once per device, per run.\n      hasPromptedToUpgrade[promptKey] = true;\n      const confirm = await Prompts.confirmAsync({\n        initial: true,\n        message: `Expo Go on ${device.name} (${device.type}) is outdated, would you like to upgrade?`,\n      });\n      if (confirm) {\n        await uninstallExpoAsync(device);\n        shouldInstall = true;\n      }\n    }\n\n    if (shouldInstall) {\n      const androidClient = await getClientForSDK(sdkVersion);\n      await installExpoAsync({ device, ...androidClient });\n      installedExpo = true;\n    }\n  };\n\n  const getClientApplicationId = async () => {\n    let applicationId;\n    const isManaged = await isManagedProjectAsync(projectRoot);\n    if (isManaged) {\n      applicationId = exp?.android?.package;\n      if (!applicationId) {\n        throw new Error(\n          `Could not find property android.package in app.config.js/app.json. This setting is required to launch the app.`\n        );\n      }\n    } else {\n      applicationId = await resolveApplicationIdAsync(projectRoot);\n      if (!applicationId) {\n        throw new Error(\n          `Could not find applicationId in ${AndroidConfig.Paths.getAppBuildGradleFilePath(\n            projectRoot\n          )}`\n        );\n      }\n    }\n    return applicationId;\n  };\n\n  try {\n    if (devClient) {\n      clientApplicationId = await getClientApplicationId();\n      await ensureDevClientInstalledAsync(device, clientApplicationId);\n    } else if (\n      Env.isInterstitiaLPageEnabled() &&\n      !devClient &&\n      isDevClientPackageInstalled(projectRoot)\n    ) {\n      await installExpoIfNeeded(device);\n\n      let applicationId: string | undefined;\n      try {\n        applicationId = await getClientApplicationId();\n      } catch (e: any) {\n        Logger.global.warn(e);\n      }\n\n      const isDevClientInstalled = applicationId\n        ? await isDevClientInstalledAsync(device, applicationId)\n        : false;\n\n      if (isDevClientInstalled) {\n        // Everything is installed, we can present the interstitial page.\n        clientApplicationId = ''; // it will open browser\n      } else {\n        // The development build isn't available. So let's fall back to Expo Go.\n        Logger.global.warn(\n          `\\u203A The 'expo-dev-client' package is installed, but a development build isn't available.\\nYour app will open in Expo Go instead. If you want to use the development build, please install it on the simulator first.\\n${learnMore(\n            'https://docs.expo.dev/development/build/'\n          )}`\n        );\n\n        const newProjectUrl = await constructDeepLinkAsync(projectRoot, undefined, false, false);\n        if (!newProjectUrl) {\n          // This shouldn't happen.\n          throw Error('Could not generate a deep link for your project.');\n        }\n        url = newProjectUrl;\n        Logger.global.debug(`iOS project url: ${url}`);\n        _lastUrl = url;\n      }\n    } else if (!isDetached) {\n      await installExpoIfNeeded(device);\n      _lastUrl = url;\n      // _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    try {\n      await _openUrlAsync({ pid: device.pid!, url, applicationId: clientApplicationId });\n    } catch (e: any) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    if (device.type === 'emulator') {\n      // TODO: Bring the emulator window to the front.\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e: any) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nasync function getClientForSDK(sdkVersionString?: string) {\n  if (!sdkVersionString) {\n    return null;\n  }\n\n  const sdkVersion = (await Versions.sdkVersionsAsync())[sdkVersionString];\n  if (!sdkVersion) {\n    return null;\n  }\n\n  return {\n    url: sdkVersion.androidClientUrl,\n    version: sdkVersion.androidClientVersion,\n  };\n}\n\nexport async function resolveApplicationIdAsync(projectRoot: string): Promise<string | null> {\n  try {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(projectRoot);\n    if (applicationIdFromGradle) {\n      return applicationIdFromGradle;\n    }\n  } catch {}\n\n  try {\n    const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n    const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n    // Assert MainActivity defined.\n    await AndroidConfig.Manifest.getMainActivityOrThrow(androidManifest);\n    if (androidManifest.manifest?.$?.package) {\n      return androidManifest.manifest.$.package;\n    }\n  } catch {}\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  return exp.android?.package ?? null;\n}\n\nasync function constructDeepLinkAsync(\n  projectRoot: string,\n  scheme?: string,\n  devClient?: boolean,\n  shouldGenerateInterstitialPage: boolean = true\n): Promise<string | null> {\n  if (\n    Env.isInterstitiaLPageEnabled() &&\n    !devClient &&\n    isDevClientPackageInstalled(projectRoot) &&\n    shouldGenerateInterstitialPage\n  ) {\n    return UrlUtils.constructLoadingUrlAsync(projectRoot, 'android');\n  } else {\n    return await UrlUtils.constructDeepLinkAsync(projectRoot, {\n      scheme,\n    }).catch(e => {\n      if (devClient) {\n        return null;\n      }\n      throw e;\n    });\n  }\n}\n\nexport async function openProjectAsync({\n  projectRoot,\n  shouldPrompt,\n  devClient = false,\n  device,\n  scheme,\n  applicationId,\n  launchActivity,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n  devClient?: boolean;\n  device?: Device;\n  scheme?: string;\n  applicationId?: string | null;\n  launchActivity?: string;\n}): Promise<{ success: true; url: string } | { success: false; error: Error | string }> {\n  await startAdbReverseAsync(projectRoot);\n\n  const projectUrl = await constructDeepLinkAsync(projectRoot, scheme, devClient);\n\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  // Resolve device\n  if (device) {\n    const booted = await attemptToStartEmulatorOrAssertAsync(device);\n    if (!booted) {\n      return { success: false, error: 'escaped' };\n    }\n    device = booted;\n  } else {\n    const devices = await getAllAvailableDevicesAsync();\n    let booted: Device | null = devices[0];\n    if (shouldPrompt) {\n      booted = await promptForDeviceAsync(devices);\n    }\n    if (!booted) {\n      return { success: false, error: 'escaped' };\n    }\n    device = booted;\n  }\n\n  // No URL, and is devClient\n  if (!projectUrl) {\n    if (!launchActivity) {\n      applicationId = applicationId ?? (await resolveApplicationIdAsync(projectRoot));\n      if (!applicationId) {\n        return {\n          success: false,\n          error:\n            'Cannot resolve application identifier or URI scheme to open the native Android app.\\nBuild the native app with `expo run:android` or `eas build -p android`',\n        };\n      }\n      launchActivity = `${applicationId}/.MainActivity`;\n    }\n\n    try {\n      await openAppAsync(device, {\n        launchActivity,\n      });\n    } catch (error: any) {\n      let errorMessage = `Couldn't open Android app with activity \"${launchActivity}\" on device \"${device.name}\".`;\n      if (error instanceof XDLError && error.code === 'APP_NOT_INSTALLED') {\n        errorMessage += `\\nThe app might not be installed, try installing it with: ${chalk.bold(\n          `expo run:android -d ${device.name}`\n        )}`;\n      }\n      errorMessage += chalk.gray(`\\n${error.message}`);\n      error.message = errorMessage;\n      return { success: false, error };\n    }\n    return {\n      success: true,\n      // TODO: Remove this hack\n      url: '',\n    };\n  }\n\n  try {\n    await openUrlAsync({\n      url: projectUrl,\n      device,\n      isDetached: !!exp.isDetached,\n      sdkVersion: exp.sdkVersion,\n      devClient,\n      exp,\n      projectRoot,\n    });\n    return { success: true, url: projectUrl };\n  } catch (e: any) {\n    if (e.isAbortError) {\n      // Don't log anything when the user cancelled the process\n      return { success: false, error: 'escaped' };\n    } else {\n      e.message = `Couldn't start project on Android: ${e.message}`;\n    }\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync({\n  projectRoot,\n  shouldPrompt,\n}: {\n  projectRoot: string;\n  shouldPrompt?: boolean;\n}): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await Webpack.getUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    const devices = await getAllAvailableDevicesAsync();\n    let device: Device | null = devices[0];\n    if (shouldPrompt) {\n      device = await promptForDeviceAsync(devices);\n    }\n    if (!device) {\n      return { success: false, error: 'escaped' };\n    }\n\n    await openUrlAsync({ url: projectUrl, device, isDetached: true, projectRoot });\n    return { success: true, url: projectUrl };\n  } catch (e: any) {\n    return { success: false, error: `Couldn't open the web project on Android: ${e.message}` };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      if (!(await adbReverse({ device, port }))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ].filter(Boolean);\n\n  const devices = await getAttachedDevicesAsync();\n  for (const device of devices) {\n    for (const port of adbReversePorts) {\n      await adbReverseRemove({ device, port });\n    }\n  }\n}\n\nasync function adbReverse({ device, port }: { device: Device; port: number }): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', `tcp:${port}`, `tcp:${port}`));\n    return true;\n  } catch (e: any) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove({\n  device,\n  port,\n}: {\n  device: Device;\n  port: number;\n}): Promise<boolean> {\n  if (!(await _isDeviceAuthorizedAsync(device))) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(adbPidArgs(device.pid, 'reverse', '--remove', `tcp:${port}`));\n    return true;\n  } catch (e: any) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nfunction adbPidArgs(pid: Device['pid'], ...options: string[]): string[] {\n  const args = [];\n  if (pid) {\n    args.push('-s', pid);\n  }\n  return args.concat(options);\n}\n\ntype DPIConstraint = {\n  dpi: 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\n  sizeMultiplier: number;\n};\n\nconst splashScreenDPIConstraints: readonly DPIConstraint[] = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectRoot - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectRoot: string): Promise<void> {\n  const { exp } = getConfig(projectRoot);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode = exp.android?.splash?.resizeMode ?? exp.splash?.resizeMode ?? 'contain';\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = exp.splash?.image;\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await ImageUtils.getImageDimensionsAsync(\n    projectRoot,\n    generalSplashImagePath\n  );\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = exp.android?.splash;\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = androidSplash?.[dpi];\n    if (imageRelativePath) {\n      const splashImage = await ImageUtils.getImageDimensionsAsync(projectRoot, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.dev/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n    return;\n  }\n\n  if (androidSplashImages.some(({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.dev/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n  }\n}\n\nexport async function maybeStopAdbDaemonAsync() {\n  if (_isAdbOwner !== true) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['kill-server']);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction nameStyleForDevice(device: Device) {\n  const isActive = device.isBooted;\n  if (!isActive) {\n    // Use no style changes for a disconnected device that is available to be opened.\n    return (text: string) => text;\n  }\n  // A device that is connected and ready to be used should be bolded to match iOS.\n  if (device.isAuthorized) {\n    return chalk.bold;\n  }\n  // Devices that are unauthorized and connected cannot be used, but they are connected so gray them out.\n  return (text: string) => chalk.bold(chalk.gray(text));\n}\n\nexport async function promptForDeviceAsync(devices: Device[]): Promise<Device | null> {\n  // TODO: provide an option to add or download more simulators\n\n  // Pause interactions on the TerminalUI\n  Prompts.pauseInteractions();\n\n  const { value } = await prompts({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a device/emulator',\n    choices: devices.map(item => {\n      const format = nameStyleForDevice(item);\n      const type = item.isAuthorized ? item.type : 'unauthorized';\n      return {\n        title: `${format(item.name)} ${chalk.dim(`(${type})`)}`,\n        value: item.name,\n      };\n    }),\n    suggest: (input: any, choices: any) => {\n      const regex = new RegExp(input, 'i');\n      return choices.filter((choice: any) => regex.test(choice.title));\n    },\n  });\n\n  // Resume interactions on the TerminalUI\n  Prompts.resumeInteractions();\n\n  const device = value ? devices.find(({ name }) => name === value)! : null;\n\n  if (device?.isAuthorized === false) {\n    logUnauthorized(device);\n    return null;\n  }\n\n  return device;\n}\n\nexport enum DeviceABI {\n  // The arch specific android target platforms are soft-deprecated.\n  // Instead of using TargetPlatform as a combination arch + platform\n  // the code will be updated to carry arch information in [DarwinArch]\n  // and [AndroidArch].\n  arm = 'arm',\n  arm64 = 'arm64',\n  x64 = 'x64',\n  x86 = 'x86',\n  armeabiV7a = 'armeabi-v7a',\n  armeabi = 'armeabi',\n  universal = 'universal',\n}\n\ntype DeviceProperties = Record<string, string>;\nconst deviceProperties: Record<string, DeviceProperties> = {};\n\nconst PROP_SDK_VERSION = 'ro.build.version.release';\n// Can sometimes be null\nconst PROP_API_VERSION = 'ro.build.version.sdk';\n// http://developer.android.com/ndk/guides/abis.html\nconst PROP_CPU_NAME = 'ro.product.cpu.abi';\nconst PROP_CPU_ABILIST_NAME = 'ro.product.cpu.abilist';\nconst PROP_BOOT_ANIMATION_STATE = 'init.svc.bootanim';\n\nconst LOWEST_SUPPORTED_EXPO_API_VERSION = 21;\n\n/**\n * @returns string like '11' (i.e. Android 11)\n */\nexport async function getDeviceSDKVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<string> {\n  return await getPropertyForDeviceAsync(device, PROP_SDK_VERSION);\n}\n\n/**\n * @returns number like `30` (i.e. API 30)\n */\nexport async function getDeviceAPIVersionAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<number> {\n  const sdkVersion =\n    (await getPropertyForDeviceAsync(device, PROP_API_VERSION)) ??\n    LOWEST_SUPPORTED_EXPO_API_VERSION;\n  return parseInt(sdkVersion, 10);\n}\n\nexport async function getDeviceABIsAsync(\n  device: Pick<Device, 'name' | 'pid'>\n): Promise<DeviceABI[]> {\n  const cpuAbilist = await getPropertyForDeviceAsync(device, PROP_CPU_ABILIST_NAME);\n\n  if (cpuAbilist) {\n    return cpuAbilist.trim().split(',') as DeviceABI[];\n  }\n\n  const abi = (await getPropertyForDeviceAsync(device, PROP_CPU_NAME)) as DeviceABI;\n  return [abi];\n}\n\nexport async function getPropertyForDeviceAsync(\n  device: Pick<Device, 'name' | 'pid'>,\n  name: string,\n  shouldRefresh?: boolean\n): Promise<string> {\n  if (shouldRefresh) {\n    delete deviceProperties[device.name];\n  }\n\n  if (deviceProperties[device.name] == null) {\n    try {\n      deviceProperties[device.name] = await getPropertyDataForDeviceAsync(device);\n    } catch (error: any) {\n      // TODO: Ensure error has message and not stderr\n      Logger.global.error(\n        `Failed to get properties for device \"${device.name}\" (${device.pid}): ${error.message}`\n      );\n    }\n  }\n  return deviceProperties[device.name][name];\n}\n\nasync function getPropertyDataForDeviceAsync(\n  device: Pick<Device, 'pid'>,\n  prop?: string\n): Promise<DeviceProperties> {\n  // @ts-ignore\n  const propCommand = adbPidArgs(...[device.pid, 'shell', 'getprop', prop].filter(Boolean));\n  try {\n    // Prevent reading as UTF8.\n    const results = (await getAdbFileOutputAsync(propCommand, 'latin1')).toString('latin1');\n    // Like:\n    // [wifi.direct.interface]: [p2p-dev-wlan0]\n    // [wifi.interface]: [wlan0]\n\n    if (prop) {\n      return {\n        [prop]: results,\n      };\n    }\n    return parseAdbDeviceProperties(results);\n  } catch (error: any) {\n    // TODO: Ensure error has message and not stderr\n    throw new Error(`Failed to get properties for device (${device.pid}): ${error.message}`);\n  }\n}\n\nexport function parseAdbDeviceProperties(devicePropertiesString: string) {\n  const properties: DeviceProperties = {};\n  const propertyExp = /\\[(.*?)\\]: \\[(.*?)\\]/gm;\n  for (const match of devicePropertiesString.matchAll(propertyExp)) {\n    properties[match[1]] = match[2];\n  }\n  return properties;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;AA0BA,IAAIA,QAAuB,GAAG,IAA9B;AACA,IAAIC,WAA2B,GAAG,IAAlC;AAEA,MAAMC,8BAA8B,GAAG,SAAvC;AACA,MAAMC,yBAAyB,GAAG,gDAAlC;AAEA,MAAMC,uBAAuB,GAAG,KAAK,IAArC;AAEA,MAAMC,yBAAyB,GAAG,KAAK,IAAL,GAAY,CAA9C;;AAEA,SAASC,aAAT,GAAiC;EAC/B,IAAIC,OAAO,CAACC,GAAR,CAAYC,YAAhB,EAA8B;IAC5B,OAAQ,GAAEF,OAAO,CAACC,GAAR,CAAYC,YAAa,oBAAnC;EACD;;EACD,OAAO,UAAP;AACD;;AAED,SAASC,QAAT,GAA4B;EAC1B,IAAIH,OAAO,CAACC,GAAR,CAAYC,YAAhB,EAA8B;IAC5B,OAAQ,GAAEF,OAAO,CAACC,GAAR,CAAYC,YAAa,qBAAnC;EACD;;EACD,OAAO,KAAP;AACD;AAED;AACA;AACA;;;AACA,eAAeE,iBAAf,GAAsD;EACpD,IAAI;IACF,MAAM;MAAEC;IAAF,IAAa,MAAM,IAAAC,qBAAA,EAAWP,aAAa,EAAxB,EAA4B,CAAC,YAAD,CAA5B,CAAzB;IACA,OAAOM,MAAM,CACVE,KADI,CACEC,aAAA,CAAGC,GADL,EAEJC,MAFI,CAEGC,OAFH,EAGJC,GAHI,CAGAC,IAAI,KAAK;MACZA,IADY;MAEZC,IAAI,EAAE,UAFM;MAGZ;MACAC,QAAQ,EAAE,KAJE;MAKZC,YAAY,EAAE;IALF,CAAL,CAHJ,CAAP;EAUD,CAZD,CAYE,MAAM;IACN,OAAO,EAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAeC,4BAAf,CAA4CC,UAA5C,EAAwF;EAAA;;EACtF,4BACE,IAAAC,eAAA,EAAK,MAAMC,iBAAiB,CAAC,CAAC,IAAD,EAAOF,UAAP,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,MAAjC,CAAD,CAA5B,EACGX,KADH,CACS,OADT,EAEGc,KAFH,EADF,iEAGgB,IAHhB;AAKD;;AAEM,eAAeC,2BAAf,GAAgE;EACrE,MAAMC,aAAa,GAAG,MAAMC,uBAAuB,EAAnD;EAEA,MAAMC,IAAI,GAAG,MAAMrB,iBAAiB,EAApC;EACA,MAAMsB,cAAc,GAAGH,aAAa,CAACX,GAAd,CAAkB,CAAC;IAAEC;EAAF,CAAD,KAAcA,IAAhC,CAAvB;EAEA,MAAMc,gBAAgB,GAAGF,IAAI,CAC1Bf,MADsB,CACf,CAAC;IAAEG;EAAF,CAAD,KAAc,CAACa,cAAc,CAACE,QAAf,CAAwBf,IAAxB,CADA,EAEtBD,GAFsB,CAElB,CAAC;IAAEC,IAAF;IAAQC;EAAR,CAAD,KAAoB;IACvB,OAAO;MACLD,IADK;MAELC,IAFK;MAGLC,QAAQ,EAAE,KAHL;MAIL;MACAC,YAAY,EAAE;IALT,CAAP;EAOD,CAVsB,CAAzB;EAYA,MAAMa,UAAU,GAAGN,aAAa,CAACO,MAAd,CAAqBH,gBAArB,CAAnB;;EAEA,IAAI,CAACE,UAAU,CAACE,MAAhB,EAAwB;IACtB,MAAMC,iBAAiB,GAAI,sNAA3B;IACA,MAAM,IAAIC,KAAJ,CACH,6PAA4PD,iBAAkB,EAD3Q,CAAN;EAGD;;EAED,OAAOH,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeK,4BAAf,CAA4CC,GAA5C,EAA4E;EAC1E,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMC,6BAA6B,CAAC;MAAEF;IAAF,CAAD,EAAUG,yBAAV,CAAjD;IACA,OAAO,CAAC,CAACF,KAAK,CAACE,yBAAD,CAAL,CAAiCC,KAAjC,CAAuC,SAAvC,CAAT;EACD,CAHD,CAGE,MAAM;IACN,OAAO,KAAP;EACD;AACF;;AAED,eAAeC,kBAAf,CAAkCC,MAAlC,EAAiF;EAC/EC,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAoB,2BAA0BC,gBAAA,CAAMC,IAAN,CAAWL,MAAM,CAAC5B,IAAlB,CAAwB,EAAtE,EAD+E,CAG/E;;;EACA,MAAMkC,eAAe,GAAGC,wBAAA,CAAcC,KAAd,CACtBlD,aAAa,EADS,EAEtB,CACG,IAAG0C,MAAM,CAAC5B,IAAK,EADlB,CAEE;EACA;EACA;EAJF,CAFsB,EAQtB;IACEqC,KAAK,EAAE,QADT;IAEEC,QAAQ,EAAE;EAFZ,CARsB,CAAxB;;EAcAJ,eAAe,CAACK,KAAhB;EAEA,OAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAqB;IAC9C,MAAMC,SAAS,GAAGC,WAAW,CAAC,YAAY;MACxC,MAAMlC,aAAa,GAAG,MAAMC,uBAAuB,EAAnD;MACA,MAAMkC,SAAS,GAAGnC,aAAa,CAACoC,IAAd,CAAmB,CAAC;QAAE9C;MAAF,CAAD,KAAcA,IAAI,KAAK4B,MAAM,CAAC5B,IAAjD,CAAlB;;MACA,IAAI6C,SAAJ,EAAe;QACb,MAAM3C,QAAQ,GAAG,MAAMmB,4BAA4B,CAACwB,SAAS,CAACvB,GAAX,CAAnD;;QACA,IAAIpB,QAAJ,EAAc;UACZ6C,WAAW;UACXN,OAAO,CAACI,SAAD,CAAP;QACD;MACF;IACF,CAV4B,EAU1B,IAV0B,CAA7B,CAD8C,CAa9C;;IACA,MAAMG,QAAQ,GAAGC,UAAU,CAAC,MAAM;MAChC,MAAMC,aAAa,GAAI,GAAEhE,aAAa,EAAG,KAAI0C,MAAM,CAAC5B,IAAK,EAAzD;MACAmD,oBAAoB,CACjB,mDAAkDvB,MAAM,CAAC5B,IAAK,wEAAuEkD,aAAc,EADlI,CAApB;IAGD,CAL0B,EAKxBjE,yBALwB,CAA3B;;IAOA,MAAM8D,WAAW,GAAG,MAAM;MACxBK,YAAY,CAACJ,QAAD,CAAZ;MACAK,aAAa,CAACV,SAAD,CAAb;IACD,CAHD;;IAKA,MAAMQ,oBAAoB,GAAIG,OAAD,IAAqB;MAChDP,WAAW;MACXL,MAAM,CAAC,IAAItB,KAAJ,CAAUkC,OAAV,CAAD,CAAN;MACAD,aAAa,CAACV,SAAD,CAAb;IACD,CAJD;;IAMAT,eAAe,CAACqB,EAAhB,CAAmB,OAAnB,EAA4B,CAAC;MAAED;IAAF,CAAD,KAAiBH,oBAAoB,CAACG,OAAD,CAAjE;IAEApB,eAAe,CAACqB,EAAhB,CAAmB,MAAnB,EAA2B,MAAM;MAC/B,MAAML,aAAa,GAAI,GAAEhE,aAAa,EAAG,KAAI0C,MAAM,CAAC5B,IAAK,EAAzD;MACAmD,oBAAoB,CACjB,iBAAgBvB,MAAM,CAAC5B,IAAK,yGAAwGkD,aAAc,EADjI,CAApB;IAGD,CALD;EAMD,CAxCM,CAAP;AAyCD,C,CAED;;;AACO,eAAevC,uBAAf,GAA4D;EACjE,MAAM6C,MAAM,GAAG,MAAMjD,iBAAiB,CAAC,CAAC,SAAD,EAAY,IAAZ,CAAD,CAAtC;EAEA,MAAMkD,UAAU,GAAGD,MAAM,CAAClD,IAAP,GAAcoD,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,EAAiChE,KAAjC,CAAuCC,aAAA,CAAGC,GAA1C,CAAnB,CAHiE,CAIjE;EACA;;EACA,MAAM+D,eAIH,GAAGF,UAAU,CACbG,KADG,CACG,CADH,EACMH,UAAU,CAACvC,MADjB,EAEHnB,GAFG,CAEC8D,IAAI,IAAI;IACX;IACA;IACA;IACA,MAAMtC,KAAK,GAAGsC,IAAI,CAACnE,KAAL,CAAW,GAAX,EAAgBG,MAAhB,CAAuBC,OAAvB,CAAd;IAEA,MAAMK,YAAY,GAAGoB,KAAK,CAAC,CAAD,CAAL,KAAa,cAAlC;IACA,MAAMtB,IAAI,GAAG4D,IAAI,CAAC9C,QAAL,CAAc,UAAd,IAA4B,UAA5B,GAAyC,QAAtD;IACA,OAAO;MAAEQ,KAAF;MAAStB,IAAT;MAAeE;IAAf,CAAP;EACD,CAXG,EAYHN,MAZG,CAYI,CAAC;IAAE0B,KAAK,EAAE,CAACD,GAAD;EAAT,CAAD,KAAsB,CAAC,CAACA,GAZ5B,CAJN;EAkBA,MAAMwC,cAAc,GAAGH,eAAe,CAAC5D,GAAhB,CAAqC,MAAMwB,KAAN,IAAe;IACzE,MAAM;MACJtB,IADI;MAEJsB,KAAK,EAAE,CAACD,GAAD,EAAM,GAAGyC,UAAT,CAFH;MAGJ5D;IAHI,IAIFoB,KAJJ;IAMA,IAAIvB,IAAmB,GAAG,IAA1B;;IAEA,IAAIC,IAAI,KAAK,QAAb,EAAuB;MACrB,IAAIE,YAAJ,EAAkB;QAChB;QACA;QACA,MAAM6D,SAAS,GAAGD,UAAU,CAACjB,IAAX,CAAgBf,IAAI,IAAIA,IAAI,CAAChB,QAAL,CAAc,QAAd,CAAxB,CAAlB;;QACA,IAAIiD,SAAJ,EAAe;UACbhE,IAAI,GAAGgE,SAAS,CAACN,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,CAAP;QACD;MACF,CARoB,CASrB;;;MACA,IAAI,CAAC1D,IAAL,EAAW;QACT;QACAA,IAAI,GAAI,UAASsB,GAAI,EAArB;MACD;IACF,CAdD,MAcO;MAAA;;MACL;MACAtB,IAAI,4BAAI,MAAMI,4BAA4B,CAACkB,GAAD,CAAtC,yEAAgD,EAApD;IACD;;IAED,OAAO;MACLA,GADK;MAELtB,IAFK;MAGLC,IAHK;MAILE,YAJK;MAKLD,QAAQ,EAAE;IALL,CAAP;EAOD,CAnCsB,CAAvB;EAqCA,OAAOsC,OAAO,CAACyB,GAAR,CAAYH,cAAZ,CAAP;AACD;;AAEM,SAASI,mBAAT,GAAwC;EAC7C,OACE/E,OAAO,CAACgF,QAAR,KAAqB,QAArB,IAAiChF,OAAO,CAACgF,QAAR,KAAqB,OAAtD,IAAiEhF,OAAO,CAACgF,QAAR,KAAqB,OADxF;AAGD;;AAED,eAAeC,iBAAf,CAAiCC,GAAjC,EAAgE;EAC9D,IAAI;IACF,MAAMC,MAAM,GAAG,MAAM,IAAA7E,qBAAA,EAAW4E,GAAX,EAAgB,CAAC,cAAD,CAAhB,CAArB;IACA,MAAME,KAAK,GAAG,IAAAjE,eAAA,EAAKgE,MAAM,CAACE,MAAZ,EAAoB9E,KAApB,CAA0B,OAA1B,CAAd;IACA,OAAO6E,KAAK,CAACxD,QAAN,CAAe,+BAAf,MAAoD,KAA3D;EACD,CAJD,CAIE,OAAO0D,CAAP,EAAe;IACf,IAAIC,YAAY,GAAG,IAAApE,eAAA,EAAKmE,CAAC,CAACD,MAAF,IAAYC,CAAC,CAACjF,MAAnB,CAAnB;;IACA,IAAIkF,YAAY,CAACC,UAAb,CAAwB7F,8BAAxB,CAAJ,EAA6D;MAC3D4F,YAAY,GAAGA,YAAY,CAACE,SAAb,CAAuB9F,8BAA8B,CAACoC,MAAtD,CAAf;IACD;;IACDuD,CAAC,CAACnB,OAAF,GAAYoB,YAAZ;IACA,MAAMD,CAAN;EACD;AACF;;AAEM,eAAelE,iBAAf,CAAiCsE,IAAjC,EAAkE;EACvE,MAAMC,oBAAA,CAASC,cAAT,CAAwB,KAAxB,CAAN;EACA,MAAMV,GAAG,GAAG/E,QAAQ,EAApB;;EAEA,IAAIT,WAAW,KAAK,IAApB,EAA0B;IACxB,MAAMmG,cAAc,GAAG,MAAMZ,iBAAiB,CAACC,GAAD,CAA9C;IACAxF,WAAW,GAAGmG,cAAc,KAAK,KAAjC;EACD;;EAED,IAAIC,eAAA,CAAIC,OAAJ,EAAJ,EAAmB;IACjBrD,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAmB,CAACsC,GAAD,EAAM,GAAGQ,IAAT,EAAeM,IAAf,CAAoB,GAApB,CAAnB;EACD;;EACD,IAAI;IACF,MAAMb,MAAM,GAAG,MAAM,IAAA7E,qBAAA,EAAW4E,GAAX,EAAgBQ,IAAhB,CAArB;IACA,OAAOP,MAAM,CAACd,MAAP,CAAc2B,IAAd,CAAmB,IAAnB,CAAP;EACD,CAHD,CAGE,OAAOV,CAAP,EAAe;IACf;IACA,IAAIA,CAAC,CAACW,MAAF,KAAa,QAAjB,EAA2B;MACzBX,CAAC,CAACY,YAAF,GAAiB,IAAjB;IACD,CAJc,CAKf;;;IACA,IAAIX,YAAY,GAAG,CAACD,CAAC,CAACD,MAAF,IAAYC,CAAC,CAACjF,MAAd,IAAwBiF,CAAC,CAACnB,OAA3B,EAAoChD,IAApC,EAAnB;;IACA,IAAIoE,YAAY,CAACC,UAAb,CAAwB7F,8BAAxB,CAAJ,EAA6D;MAC3D4F,YAAY,GAAGA,YAAY,CAACE,SAAb,CAAuB9F,8BAA8B,CAACoC,MAAtD,CAAf;IACD;;IACDuD,CAAC,CAACnB,OAAF,GAAYoB,YAAZ;IACA,MAAMD,CAAN;EACD;AACF;;AAEM,eAAea,qBAAf,CAAqCT,IAArC,EAAqDU,QAArD,EAA0E;EAC/E,MAAMT,oBAAA,CAASC,cAAT,CAAwB,KAAxB,CAAN;EACA,MAAMV,GAAG,GAAG/E,QAAQ,EAApB;;EAEA,IAAIT,WAAW,KAAK,IAApB,EAA0B;IACxB,MAAMmG,cAAc,GAAG,MAAMZ,iBAAiB,CAACC,GAAD,CAA9C;IACAxF,WAAW,GAAGmG,cAAc,KAAK,KAAjC;EACD;;EAED,IAAI;IACF,OAAO,MAAM,IAAAQ,6BAAA,EAAanB,GAAb,EAAkBQ,IAAlB,EAAwB;MACnCU,QADmC;MAEnClD,KAAK,EAAE;IAF4B,CAAxB,CAAb;EAID,CALD,CAKE,OAAOoC,CAAP,EAAe;IACf,IAAIC,YAAY,GAAG,CAACD,CAAC,CAACD,MAAF,IAAYC,CAAC,CAACjF,MAAd,IAAwBiF,CAAC,CAACnB,OAA3B,EAAoChD,IAApC,EAAnB;;IACA,IAAIoE,YAAY,CAACC,UAAb,CAAwB7F,8BAAxB,CAAJ,EAA6D;MAC3D4F,YAAY,GAAGA,YAAY,CAACE,SAAb,CAAuB9F,8BAA8B,CAACoC,MAAtD,CAAf;IACD;;IACDuD,CAAC,CAACnB,OAAF,GAAYoB,YAAZ;IACA,MAAMD,CAAN;EACD;AACF;;AAED,eAAegB,wBAAf,CAAwC7D,MAAxC,EAA0E;EACxE;EACA,OAAOA,MAAM,CAACzB,YAAd;AACD;;AAED,eAAeuF,gBAAf,CAAgC9D,MAAhC,EAAgD+D,cAAhD,EAA0F;EACxF,MAAMC,QAAQ,GAAG,MAAMrF,iBAAiB,CACtCsF,UAAU,CAACjE,MAAM,CAACN,GAAR,EAAa,OAAb,EAAsB,IAAtB,EAA4B,MAA5B,EAAoC,UAApC,EAAgDqE,cAAhD,CAD4B,CAAxC;EAIA,MAAMpB,KAAK,GAAGqB,QAAQ,CAAClG,KAAT,CAAe,OAAf,CAAd;;EACA,KAAK,IAAIoG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,KAAK,CAACrD,MAA1B,EAAkC4E,CAAC,EAAnC,EAAuC;IACrC,MAAMjC,IAAI,GAAGU,KAAK,CAACuB,CAAD,CAAL,CAASxF,IAAT,EAAb;;IACA,IAAIuD,IAAI,KAAM,WAAU8B,cAAe,EAAvC,EAA0C;MACxC,OAAO,IAAP;IACD;EACF;;EACD,OAAO,KAAP;AACD,C,CAED;;;AACA,eAAeI,qBAAf,CAAqCnE,MAArC,EAAqD;EACnD,OAAO,MAAM8D,gBAAgB,CAAC9D,MAAD,EAAS,mBAAT,CAA7B;AACD;;AAED,eAAeoE,6BAAf,CAA6CpE,MAA7C,EAA6DqE,aAA7D,EAAmG;EACjG,IAAI,EAAE,MAAMP,gBAAgB,CAAC9D,MAAD,EAASqE,aAAT,CAAxB,CAAJ,EAAsD;IACpD,MAAM,IAAI7E,KAAJ,CACH,2BAA0B6E,aAAc,uCAAzC,GACG,6DAA4D,IAAAC,qBAAA,EAC3D,yDAD2D,CAE3D,EAJA,CAAN;EAMD;AACF;;AAED,eAAeC,yBAAf,CAAyCvE,MAAzC,EAAyDqE,aAAzD,EAAkG;EAChG,OAAO,MAAMP,gBAAgB,CAAC9D,MAAD,EAASqE,aAAT,CAA7B;AACD;;AAED,eAAeG,mBAAf,CAAmCxE,MAAnC,EAA2E;EACzE,MAAMG,IAAI,GAAG,MAAMxB,iBAAiB,CAClCsF,UAAU,CAACjE,MAAM,CAACN,GAAR,EAAa,OAAb,EAAsB,SAAtB,EAAiC,SAAjC,EAA4C,mBAA5C,CADwB,CAApC;EAIA,MAAM+E,KAAK,GAAG,uBAAd;EACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,CAAWxE,IAAX,CAAnB;;EACA,IAAI,CAACuE,UAAD,IAAeA,UAAU,CAACpF,MAAX,GAAoB,CAAvC,EAA0C;IACxC,OAAO,IAAP;EACD;;EAED,OAAOoF,UAAU,CAAC,CAAD,CAAjB;AACD;;AAED,eAAeE,qBAAf,CAAqC5E,MAArC,EAAqD6E,UAArD,EAA4F;EAAA;;EAC1F,MAAMC,QAAQ,GAAG,MAAMC,oBAAA,CAASC,aAAT,EAAvB;EACA,MAAMC,YAAY,GAAG,MAAMC,eAAe,CAACL,UAAD,CAA1C;EACA,MAAMM,mBAAmB,4BAAGF,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEG,OAAjB,yEAA4BN,QAAQ,CAACO,cAA9D;EACA,MAAMC,gBAAgB,GAAG,MAAMd,mBAAmB,CAACxE,MAAD,CAAlD;EACA,OAAO,CAACsF,gBAAD,IAAqBC,iBAAA,CAAOC,EAAP,CAAUF,gBAAV,EAA4BH,mBAA5B,CAA5B;AACD;;AAEM,eAAeM,gBAAf,CAAgC;EACrCzF,MADqC;EAErC0F,GAFqC;EAGrCN;AAHqC,CAAhC,EAQJ;EACD,IAAIO,YAAJ;;EACA,MAAMC,eAAe,GAAG,MAAM;IAC5B,IAAID,YAAJ,EAAkB;MAChBnE,YAAY,CAACmE,YAAD,CAAZ;IACD;;IACD,OAAOtE,UAAU,CAAC,MAAM;MACtBpB,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAmB,EAAnB;;MACAF,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CACE,mIADF;IAGD,CALgB,EAKd/C,uBALc,CAAjB;EAMD,CAVD;;EAYA6C,kBAAA,CAAO4F,aAAP,CAAqB1F,IAArB,CACE;IAAE2F,IAAI,EAAEC,wBAAA,CAAaC;EAArB,CADF,EAEE,mDAFF;;EAKAL,YAAY,GAAGC,eAAe,EAA9B;EACA,MAAMK,IAAI,GAAG,MAAM,IAAAC,4BAAA,EAAiBR,GAAjB,EAAsBS,QAAQ,IAAI;IACnDlG,kBAAA,CAAO4F,aAAP,CAAqB1F,IAArB,CAA0B;MAAE2F,IAAI,EAAEC,wBAAA,CAAaK;IAArB,CAA1B,EAAoED,QAApE;EACD,CAFkB,CAAnB;;EAIAlG,kBAAA,CAAO4F,aAAP,CAAqB1F,IAArB,CAA0B;IAAE2F,IAAI,EAAEC,wBAAA,CAAaM;EAArB,CAA1B;;EAEA,MAAM3E,OAAO,GAAG0D,OAAO,GAClB,sBAAqBA,OAAQ,OAAMpF,MAAM,CAAC5B,IAAK,EAD7B,GAElB,yBAAwB4B,MAAM,CAAC5B,IAAK,EAFzC;;EAIA6B,kBAAA,CAAO4F,aAAP,CAAqB1F,IAArB,CAA0B;IAAE2F,IAAI,EAAEC,wBAAA,CAAaO;EAArB,CAA1B,EAAgE5E,OAAhE;;EACAiE,YAAY,GAAGC,eAAe,EAA9B;EACA,MAAMlD,MAAM,GAAG,MAAM6D,oBAAoB,CAACvG,MAAD,EAAS;IAAEwG,UAAU,EAAEP;EAAd,CAAT,CAAzC;;EACAhG,kBAAA,CAAO4F,aAAP,CAAqB1F,IAArB,CAA0B;IAAE2F,IAAI,EAAEC,wBAAA,CAAaU;EAArB,CAA1B;;EAEAjF,YAAY,CAACmE,YAAD,CAAZ;EACA,OAAOjD,MAAP;AACD;;AAEM,eAAe6D,oBAAf,CACLvG,MADK,EAEL;EAAEwG;AAAF,CAFK,EAGL;EACA,OAAO,MAAM7H,iBAAiB,CAACsF,UAAU,CAACjE,MAAM,CAACN,GAAR,EAAa,SAAb,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC8G,UAApC,CAAX,CAA9B;AACD;;AAEM,eAAeE,mBAAf,CAAmC;EACxCtI;AADwC,IAEnB,EAFhB,EAE4C;EAAA;;EACjD,MAAMuI,OAAO,GAAG,MAAM5H,uBAAuB,EAA7C;;EAEA,IAAI,CAACX,IAAL,EAAW;IAAA;;IACT,oBAAOuI,OAAO,CAAC,CAAD,CAAd,iDAAqB,IAArB;EACD;;EAED,wBAAOA,OAAO,CAACzF,IAAR,CAAalB,MAAM,IAAIA,MAAM,CAAC5B,IAAP,KAAgBA,IAAvC,CAAP,yDAAuD,IAAvD;AACD;;AAEM,eAAewI,kBAAf,CAAkC5G,MAAlC,EAA+E;EACpFC,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAmB,2CAAnB,EADoF,CAGpF;;;EACA,MAAM0G,WAAW,GAAG,MAAM1C,qBAAqB,CAACnE,MAAD,CAA/C;;EACA,IAAI,CAAC6G,WAAL,EAAkB;IAChB;EACD;;EAED,IAAI;IACF,OAAO,MAAMlI,iBAAiB,CAACsF,UAAU,CAACjE,MAAM,CAACN,GAAR,EAAa,WAAb,EAA0B,mBAA1B,CAAX,CAA9B;EACD,CAFD,CAEE,OAAOmD,CAAP,EAAe;IACf5C,kBAAA,CAAOC,MAAP,CAAc4G,KAAd,CACE,gGADF;;IAGA,MAAMjE,CAAN;EACD;AACF;;AAEM,eAAekE,gBAAf,CAAgC;EACrCrB,GADqC;EAErCN,OAFqC;EAGrCpF;AAHqC,IAQnC,EARG,EAQmB;EACxB,IAAI;IACF,IAAI,CAACA,MAAL,EAAa;MACXA,MAAM,GAAG,CAAC,MAAMjB,uBAAuB,EAA9B,EAAkC,CAAlC,CAAT;;MACA,IAAI,CAACiB,MAAL,EAAa;QACX,MAAM,IAAIR,KAAJ,CAAU,sBAAV,CAAN;MACD;IACF;;IACDQ,MAAM,GAAG,MAAMgH,mCAAmC,CAAChH,MAAD,CAAlD;;IACA,IAAI,CAACA,MAAL,EAAa;MACX,OAAO,KAAP;IACD;;IAED,MAAM4G,kBAAkB,CAAC5G,MAAD,CAAxB;IACA,MAAMyF,gBAAgB,CAAC;MAAEzF,MAAF;MAAU0F,GAAV;MAAeN;IAAf,CAAD,CAAtB;;IACA,IAAIpI,QAAJ,EAAc;MACZiD,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAoB,kBAAiBnD,QAAS,WAA9C;;MACA,MAAM2B,iBAAiB,CAAC,CACtB,OADsB,EAEtB,IAFsB,EAGtB,OAHsB,EAItB,IAJsB,EAKtB,4BALsB,EAMtB,IANsB,EAOtB3B,QAPsB,CAAD,CAAvB;MASAA,QAAQ,GAAG,IAAX;IACD;;IAED,OAAO,IAAP;EACD,CA7BD,CA6BE,OAAO6F,CAAP,EAAe;IACf5C,kBAAA,CAAOC,MAAP,CAAc4G,KAAd,CAAoBjE,CAAC,CAACnB,OAAtB;;IACA,OAAO,KAAP;EACD;AACF;;AAED,eAAeuF,aAAf,CAA6B;EAC3BvH,GAD2B;EAE3BgG,GAF2B;EAG3BrB;AAH2B,CAA7B,EAQG;EACD;EACA;EACA;EACA;EACA;EACA,IAAIA,aAAa,KAAK,mBAAtB,EAA2C;IACzC,MAAM6C,UAAU,GAAG,MAAMvI,iBAAiB,CACxCsF,UAAU,CACRvE,GADQ,EAER,OAFQ,EAGR,QAHQ,EAIR,IAJQ,EAKR2E,aALQ,EAMR,IANQ,EAOR,kCAPQ,EAQR,GARQ,CAD8B,CAA1C;;IAYA,IAAI6C,UAAU,CAAC/H,QAAX,CAAoBhC,yBAApB,CAAJ,EAAoD;MAClD,MAAM,IAAIqC,KAAJ,CAAU0H,UAAU,CAAClE,SAAX,CAAqBkE,UAAU,CAACC,OAAX,CAAmB,SAAnB,CAArB,CAAV,CAAN;IACD;EACF;;EAED,MAAMC,WAAW,GAAG,MAAMzI,iBAAiB,CACzCsF,UAAU,CAACvE,GAAD,EAAM,OAAN,EAAe,IAAf,EAAqB,OAArB,EAA8B,IAA9B,EAAoC,4BAApC,EAAkE,IAAlE,EAAwEgG,GAAxE,CAD+B,CAA3C;;EAGA,IAAI0B,WAAW,CAACjI,QAAZ,CAAqBhC,yBAArB,CAAJ,EAAqD;IACnD,MAAM,IAAIqC,KAAJ,CAAU4H,WAAW,CAACpE,SAAZ,CAAsBoE,WAAW,CAACD,OAAZ,CAAoB,SAApB,CAAtB,CAAV,CAAN;EACD;;EAED,OAAOC,WAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,IAApB,EAA2C;EACzC,OAAO,IAAA1D,6BAAA,EAAa,MAAb,EAAqB,CAAE,MAAK0D,IAAK,EAAZ,EAAe,IAAf,EAAqB,IAArB,EAA2B,cAA3B,CAArB,EAAiE;IACtE3D,QAAQ,EAAE,MAD4D;IAEtElD,KAAK,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB;EAF+D,CAAjE,EAIJ3C,KAJI,CAIE,IAJF,EAIQ,CAJR,EAKJY,IALI,EAAP;AAMD;;AAEM,eAAe6I,2BAAf,CAA2CvH,MAA3C,EAAiF;EAAA;;EACtF,KACE;EACAzC,OAAO,CAACgF,QAAR,KAAqB,QAArB,IACA;EACAvC,MAAM,CAAC3B,IAAP,KAAgB,UAJlB,EAKE;IACA;EACD,CARqF,CAUtF;;;EACA,MAAMmJ,UAAU,aAAGxH,MAAM,CAACN,GAAP,CAAYI,KAAZ,CAAkB,QAAlB,CAAH,2CAAG,OAA8B,CAA9B,CAAnB;;EACA,IAAI,CAAC0H,UAAL,EAAiB;IACf;EACD,CAdqF,CAetF;;;EACA,MAAM9H,GAAG,GAAG2H,UAAU,CAACG,UAAD,CAAtB;;EAEA,IAAI;IACF,MAAMC,SAAS,GAACC,SAAV,CAAqB;AAC/B;AACA,0DAA0DhI,GAAI;AAC9D,WAHU,CAAN;EAID,CALD,CAKE,MAAM,CACN;EACD;AACF;AAED;AACA;AACA;AACA;;;AACO,eAAeiI,YAAf,CACL3H,MADK,EAEL;EACE4H;AADF,CAFK,EAOL;EACA,MAAMR,WAAW,GAAG,MAAMzI,iBAAiB,CACzCsF,UAAU,CACRjE,MAAM,CAACN,GADC,EAER,OAFQ,EAGR,IAHQ,EAIR,OAJQ,EAKR,IALQ,EAMR,2BANQ,EAOR;EACA,IARQ,EASR,YATQ,EAUR;EACA,IAXQ,EAYRkI,cAZQ,CAD+B,CAA3C,CADA,CAkBA;;EACA,IAAIR,WAAW,CAACtH,KAAZ,CAAkB,2CAAlB,CAAJ,EAAoE;IAClE,MAAM,KAAI+H,oBAAJ,EAAa,mBAAb,EAAkCT,WAAW,CAACpE,SAAZ,CAAsBoE,WAAW,CAACD,OAAZ,CAAoB,SAApB,CAAtB,CAAlC,CAAN;EACD;;EAED,MAAMI,2BAA2B,CAACvH,MAAD,CAAjC;EAEA,OAAOoH,WAAP;AACD;;AAEM,eAAeJ,mCAAf,CAAmDhH,MAAnD,EAA2F;EAChG;EAEA,IAAI,EAAE,MAAM0G,mBAAmB,CAAC1G,MAAD,CAA3B,CAAJ,EAA0C;IACxCA,MAAM,GAAG,MAAMD,kBAAkB,CAACC,MAAD,CAAjC;EACD;;EAED,IAAI,EAAE,MAAM6D,wBAAwB,CAAC7D,MAAD,CAAhC,CAAJ,EAA+C;IAC7C8H,eAAe,CAAC9H,MAAD,CAAf;IACA,OAAO,IAAP;EACD;;EAED,OAAOA,MAAP;AACD;;AAED,SAAS8H,eAAT,CAAyB9H,MAAzB,EAAyC;EACvCC,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CACG,uDAAsD3H,gBAAA,CAAMC,IAAN,CAAWL,MAAM,CAAC5B,IAAlB,CAAwB,KAAIgC,gBAAA,CAAM4H,GAAN,CACjF,IAAA1D,qBAAA,EAAU,2CAAV,CADiF,CAEjF,EAHJ;AAKD,C,CAED;AACA;;;AACA,MAAM2D,oBAA6C,GAAG,EAAtD;;AAEA,eAAeC,qBAAf,CAAqCC,WAArC,EAA0D;EACxD,IAAI;IACF,MAAMC,8BAAA,CAAcC,KAAd,CAAoBC,0BAApB,CAA+CH,WAA/C,CAAN;IACA,OAAO,KAAP;EACD,CAHD,CAGE,MAAM;IACN,OAAO,IAAP;EACD;AACF;;AAED,eAAeI,YAAf,CAA4B;EAC1B7C,GAD0B;EAE1B1F,MAF0B;EAG1BwI,UAAU,GAAG,KAHa;EAI1B3D,UAJ0B;EAK1B4D,SAAS,GAAG,KALc;EAM1BC,GAN0B;EAO1BP;AAP0B,CAA5B,EAgBkB;EAChB,MAAMQ,YAAY,GAAG,MAAM3B,mCAAmC,CAAChH,MAAD,CAA9D;;EACA,IAAI,CAAC2I,YAAL,EAAmB;IACjB;EACD;;EACD1I,kBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAoB,kBAAiBC,gBAAA,CAAMwI,SAAN,CAAgBlD,GAAhB,CAAqB,OAAMtF,gBAAA,CAAMC,IAAN,CAAWsI,YAAY,CAACvK,IAAxB,CAA8B,EAA9F;;EAEA,MAAMmJ,2BAA2B,CAACoB,YAAD,CAAjC;EAEA3I,MAAM,GAAG2I,YAAT;EACA,IAAIE,aAAa,GAAG,KAApB;EACA,IAAIC,mBAAmB,GAAG,mBAA1B;;EAEA,MAAMC,mBAAmB,GAAG,MAAO/I,MAAP,IAA0B;IAAA;;IACpD,IAAIgJ,aAAa,GAAG,EAAE,MAAM7E,qBAAqB,CAACnE,MAAD,CAA7B,CAApB;IACA,MAAMiJ,SAAS,kBAAGjJ,MAAM,CAACN,GAAV,qDAAiB,SAAhC;;IACA,IACE,CAACsJ,aAAD,IACA,CAACf,oBAAoB,CAACgB,SAAD,CADrB,KAEC,MAAMrE,qBAAqB,CAAC5E,MAAD,EAAS6E,UAAT,CAF5B,CADF,EAIE;MACA;MACAoD,oBAAoB,CAACgB,SAAD,CAApB,GAAkC,IAAlC;MACA,MAAMC,OAAO,GAAG,MAAMC,mBAAA,CAAQC,YAAR,CAAqB;QACzCC,OAAO,EAAE,IADgC;QAEzC3H,OAAO,EAAG,cAAa1B,MAAM,CAAC5B,IAAK,KAAI4B,MAAM,CAAC3B,IAAK;MAFV,CAArB,CAAtB;;MAIA,IAAI6K,OAAJ,EAAa;QACX,MAAMtC,kBAAkB,CAAC5G,MAAD,CAAxB;QACAgJ,aAAa,GAAG,IAAhB;MACD;IACF;;IAED,IAAIA,aAAJ,EAAmB;MACjB,MAAMM,aAAa,GAAG,MAAMpE,eAAe,CAACL,UAAD,CAA3C;MACA,MAAMY,gBAAgB,CAAC;QAAEzF,MAAF;QAAU,GAAGsJ;MAAb,CAAD,CAAtB;MACAT,aAAa,GAAG,IAAhB;IACD;EACF,CAzBD;;EA2BA,MAAMU,sBAAsB,GAAG,YAAY;IACzC,IAAIlF,aAAJ;IACA,MAAMmF,SAAS,GAAG,MAAMtB,qBAAqB,CAACC,WAAD,CAA7C;;IACA,IAAIqB,SAAJ,EAAe;MAAA;;MACbnF,aAAa,GAAGqE,GAAH,aAAGA,GAAH,uCAAGA,GAAG,CAAEe,OAAR,iDAAG,aAAcC,OAA9B;;MACA,IAAI,CAACrF,aAAL,EAAoB;QAClB,MAAM,IAAI7E,KAAJ,CACH,gHADG,CAAN;MAGD;IACF,CAPD,MAOO;MACL6E,aAAa,GAAG,MAAMsF,yBAAyB,CAACxB,WAAD,CAA/C;;MACA,IAAI,CAAC9D,aAAL,EAAoB;QAClB,MAAM,IAAI7E,KAAJ,CACH,mCAAkC4I,8BAAA,CAAcC,KAAd,CAAoBuB,yBAApB,CACjCzB,WADiC,CAEjC,EAHE,CAAN;MAKD;IACF;;IACD,OAAO9D,aAAP;EACD,CArBD;;EAuBA,IAAI;IACF,IAAIoE,SAAJ,EAAe;MACbK,mBAAmB,GAAG,MAAMS,sBAAsB,EAAlD;MACA,MAAMnF,6BAA6B,CAACpE,MAAD,EAAS8I,mBAAT,CAAnC;IACD,CAHD,MAGO,IACLzF,eAAA,CAAIwG,yBAAJ,MACA,CAACpB,SADD,IAEA,IAAAqB,uCAAA,EAA4B3B,WAA5B,CAHK,EAIL;MACA,MAAMY,mBAAmB,CAAC/I,MAAD,CAAzB;MAEA,IAAIqE,aAAJ;;MACA,IAAI;QACFA,aAAa,GAAG,MAAMkF,sBAAsB,EAA5C;MACD,CAFD,CAEE,OAAO1G,CAAP,EAAe;QACf5C,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CAAmBlF,CAAnB;MACD;;MAED,MAAMkH,oBAAoB,GAAG1F,aAAa,GACtC,MAAME,yBAAyB,CAACvE,MAAD,EAASqE,aAAT,CADO,GAEtC,KAFJ;;MAIA,IAAI0F,oBAAJ,EAA0B;QACxB;QACAjB,mBAAmB,GAAG,EAAtB,CAFwB,CAEE;MAC3B,CAHD,MAGO;QACL;QACA7I,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CACG,4NAA2N,IAAAzD,qBAAA,EAC1N,0CAD0N,CAE1N,EAHJ;;QAMA,MAAM0F,aAAa,GAAG,MAAMC,sBAAsB,CAAC9B,WAAD,EAAc+B,SAAd,EAAyB,KAAzB,EAAgC,KAAhC,CAAlD;;QACA,IAAI,CAACF,aAAL,EAAoB;UAClB;UACA,MAAMxK,KAAK,CAAC,kDAAD,CAAX;QACD;;QACDkG,GAAG,GAAGsE,aAAN;;QACA/J,kBAAA,CAAOC,MAAP,CAAciK,KAAd,CAAqB,oBAAmBzE,GAAI,EAA5C;;QACA1I,QAAQ,GAAG0I,GAAX;MACD;IACF,CAtCM,MAsCA,IAAI,CAAC8C,UAAL,EAAiB;MACtB,MAAMO,mBAAmB,CAAC/I,MAAD,CAAzB;MACAhD,QAAQ,GAAG0I,GAAX,CAFsB,CAGtB;IACD;;IAED,IAAI;MACF,MAAMuB,aAAa,CAAC;QAAEvH,GAAG,EAAEM,MAAM,CAACN,GAAd;QAAoBgG,GAApB;QAAyBrB,aAAa,EAAEyE;MAAxC,CAAD,CAAnB;IACD,CAFD,CAEE,OAAOjG,CAAP,EAAe;MACf,IAAI2F,UAAJ,EAAgB;QACd3F,CAAC,CAACnB,OAAF,GAAa,+HAA8HmB,CAAC,CAACnB,OAAQ,EAArJ;MACD,CAFD,MAEO;QACLmB,CAAC,CAACnB,OAAF,GAAa,sBAAqBmB,CAAC,CAACnB,OAAQ,EAA5C;MACD;;MAED,MAAMmB,CAAN;IACD;;IAED,IAAI7C,MAAM,CAAC3B,IAAP,KAAgB,UAApB,EAAgC,CAC9B;IACD;;IAED+L,qBAAA,CAAUC,QAAV,CAAmB,oBAAnB,EAAyC;MACvC9H,QAAQ,EAAE,SAD6B;MAEvCsG;IAFuC,CAAzC;EAID,CApED,CAoEE,OAAOhG,CAAP,EAAe;IACfA,CAAC,CAACnB,OAAF,GAAa,sBAAqBmB,CAAC,CAACnB,OAAQ,EAA5C;IACA,MAAMmB,CAAN;EACD;AACF;;AAED,eAAeqC,eAAf,CAA+BoF,gBAA/B,EAA0D;EACxD,IAAI,CAACA,gBAAL,EAAuB;IACrB,OAAO,IAAP;EACD;;EAED,MAAMzF,UAAU,GAAG,CAAC,MAAME,oBAAA,CAASwF,gBAAT,EAAP,EAAoCD,gBAApC,CAAnB;;EACA,IAAI,CAACzF,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,OAAO;IACLa,GAAG,EAAEb,UAAU,CAAC2F,gBADX;IAELpF,OAAO,EAAEP,UAAU,CAAC4F;EAFf,CAAP;AAID;;AAEM,eAAed,yBAAf,CAAyCxB,WAAzC,EAAsF;EAAA;;EAC3F,IAAI;IACF,MAAMuC,uBAAuB,GAAG,MAAMtC,8BAAA,CAAcuC,OAAd,CAAsBC,qBAAtB,CAA4CzC,WAA5C,CAAtC;;IACA,IAAIuC,uBAAJ,EAA6B;MAC3B,OAAOA,uBAAP;IACD;EACF,CALD,CAKE,MAAM,CAAE;;EAEV,IAAI;IAAA;;IACF,MAAMG,QAAQ,GAAG,MAAMzC,8BAAA,CAAcC,KAAd,CAAoByC,uBAApB,CAA4C3C,WAA5C,CAAvB;IACA,MAAM4C,eAAe,GAAG,MAAM3C,8BAAA,CAAc4C,QAAd,CAAuBC,wBAAvB,CAAgDJ,QAAhD,CAA9B,CAFE,CAGF;;IACA,MAAMzC,8BAAA,CAAc4C,QAAd,CAAuBE,sBAAvB,CAA8CH,eAA9C,CAAN;;IACA,6BAAIA,eAAe,CAACI,QAApB,4EAAI,sBAA0BC,CAA9B,mDAAI,uBAA6B1B,OAAjC,EAA0C;MACxC,OAAOqB,eAAe,CAACI,QAAhB,CAAyBC,CAAzB,CAA2B1B,OAAlC;IACD;EACF,CARD,CAQE,MAAM,CAAE;;EAEV,MAAM;IAAEhB;EAAF,IAAU,IAAA2C,mBAAA,EAAUlD,WAAV,EAAuB;IAAEmD,yBAAyB,EAAE;EAA7B,CAAvB,CAAhB;EACA,gDAAO5C,GAAG,CAACe,OAAX,kDAAO,cAAaC,OAApB,uEAA+B,IAA/B;AACD;;AAED,eAAeO,sBAAf,CACE9B,WADF,EAEEoD,MAFF,EAGE9C,SAHF,EAIE+C,8BAAuC,GAAG,IAJ5C,EAK0B;EACxB,IACEnI,eAAA,CAAIwG,yBAAJ,MACA,CAACpB,SADD,IAEA,IAAAqB,uCAAA,EAA4B3B,WAA5B,CAFA,IAGAqD,8BAJF,EAKE;IACA,OAAOC,oBAAA,CAASC,wBAAT,CAAkCvD,WAAlC,EAA+C,SAA/C,CAAP;EACD,CAPD,MAOO;IACL,OAAO,MAAMsD,oBAAA,CAASxB,sBAAT,CAAgC9B,WAAhC,EAA6C;MACxDoD;IADwD,CAA7C,EAEVI,KAFU,CAEJ9I,CAAC,IAAI;MACZ,IAAI4F,SAAJ,EAAe;QACb,OAAO,IAAP;MACD;;MACD,MAAM5F,CAAN;IACD,CAPY,CAAb;EAQD;AACF;;AAEM,eAAe+I,gBAAf,CAAgC;EACrCzD,WADqC;EAErC0D,YAFqC;EAGrCpD,SAAS,GAAG,KAHyB;EAIrCzI,MAJqC;EAKrCuL,MALqC;EAMrClH,aANqC;EAOrCuD;AAPqC,CAAhC,EAgBiF;EACtF,MAAMkE,oBAAoB,CAAC3D,WAAD,CAA1B;EAEA,MAAM4D,UAAU,GAAG,MAAM9B,sBAAsB,CAAC9B,WAAD,EAAcoD,MAAd,EAAsB9C,SAAtB,CAA/C;EAEA,MAAM;IAAEC;EAAF,IAAU,IAAA2C,mBAAA,EAAUlD,WAAV,EAAuB;IACrCmD,yBAAyB,EAAE;EADU,CAAvB,CAAhB,CALsF,CAStF;;EACA,IAAItL,MAAJ,EAAY;IACV,MAAMgM,MAAM,GAAG,MAAMhF,mCAAmC,CAAChH,MAAD,CAAxD;;IACA,IAAI,CAACgM,MAAL,EAAa;MACX,OAAO;QAAEC,OAAO,EAAE,KAAX;QAAkBnF,KAAK,EAAE;MAAzB,CAAP;IACD;;IACD9G,MAAM,GAAGgM,MAAT;EACD,CAND,MAMO;IACL,MAAMrF,OAAO,GAAG,MAAM9H,2BAA2B,EAAjD;IACA,IAAImN,MAAqB,GAAGrF,OAAO,CAAC,CAAD,CAAnC;;IACA,IAAIkF,YAAJ,EAAkB;MAChBG,MAAM,GAAG,MAAME,oBAAoB,CAACvF,OAAD,CAAnC;IACD;;IACD,IAAI,CAACqF,MAAL,EAAa;MACX,OAAO;QAAEC,OAAO,EAAE,KAAX;QAAkBnF,KAAK,EAAE;MAAzB,CAAP;IACD;;IACD9G,MAAM,GAAGgM,MAAT;EACD,CA1BqF,CA4BtF;;;EACA,IAAI,CAACD,UAAL,EAAiB;IACf,IAAI,CAACnE,cAAL,EAAqB;MAAA;;MACnBvD,aAAa,qBAAGA,aAAH,2DAAqB,MAAMsF,yBAAyB,CAACxB,WAAD,CAAjE;;MACA,IAAI,CAAC9D,aAAL,EAAoB;QAClB,OAAO;UACL4H,OAAO,EAAE,KADJ;UAELnF,KAAK,EACH;QAHG,CAAP;MAKD;;MACDc,cAAc,GAAI,GAAEvD,aAAc,gBAAlC;IACD;;IAED,IAAI;MACF,MAAMsD,YAAY,CAAC3H,MAAD,EAAS;QACzB4H;MADyB,CAAT,CAAlB;IAGD,CAJD,CAIE,OAAOd,KAAP,EAAmB;MACnB,IAAIhE,YAAY,GAAI,4CAA2C8E,cAAe,gBAAe5H,MAAM,CAAC5B,IAAK,IAAzG;;MACA,IAAI0I,KAAK,YAAYe,oBAAjB,IAA6Bf,KAAK,CAAChB,IAAN,KAAe,mBAAhD,EAAqE;QACnEhD,YAAY,IAAK,6DAA4D1C,gBAAA,CAAMC,IAAN,CAC1E,uBAAsBL,MAAM,CAAC5B,IAAK,EADwC,CAE3E,EAFF;MAGD;;MACD0E,YAAY,IAAI1C,gBAAA,CAAM+L,IAAN,CAAY,KAAIrF,KAAK,CAACpF,OAAQ,EAA9B,CAAhB;MACAoF,KAAK,CAACpF,OAAN,GAAgBoB,YAAhB;MACA,OAAO;QAAEmJ,OAAO,EAAE,KAAX;QAAkBnF;MAAlB,CAAP;IACD;;IACD,OAAO;MACLmF,OAAO,EAAE,IADJ;MAEL;MACAvG,GAAG,EAAE;IAHA,CAAP;EAKD;;EAED,IAAI;IACF,MAAM6C,YAAY,CAAC;MACjB7C,GAAG,EAAEqG,UADY;MAEjB/L,MAFiB;MAGjBwI,UAAU,EAAE,CAAC,CAACE,GAAG,CAACF,UAHD;MAIjB3D,UAAU,EAAE6D,GAAG,CAAC7D,UAJC;MAKjB4D,SALiB;MAMjBC,GANiB;MAOjBP;IAPiB,CAAD,CAAlB;IASA,OAAO;MAAE8D,OAAO,EAAE,IAAX;MAAiBvG,GAAG,EAAEqG;IAAtB,CAAP;EACD,CAXD,CAWE,OAAOlJ,CAAP,EAAe;IACf,IAAIA,CAAC,CAACY,YAAN,EAAoB;MAClB;MACA,OAAO;QAAEwI,OAAO,EAAE,KAAX;QAAkBnF,KAAK,EAAE;MAAzB,CAAP;IACD,CAHD,MAGO;MACLjE,CAAC,CAACnB,OAAF,GAAa,sCAAqCmB,CAAC,CAACnB,OAAQ,EAA5D;IACD;;IACD,OAAO;MAAEuK,OAAO,EAAE,KAAX;MAAkBnF,KAAK,EAAEjE;IAAzB,CAAP;EACD;AACF;;AAEM,eAAeuJ,mBAAf,CAAmC;EACxCjE,WADwC;EAExC0D;AAFwC,CAAnC,EAMyE;EAC9E,IAAI;IACF,MAAMC,oBAAoB,CAAC3D,WAAD,CAA1B;IAEA,MAAM4D,UAAU,GAAG,MAAMM,mBAAA,CAAQC,WAAR,CAAoBnE,WAApB,CAAzB;;IACA,IAAI4D,UAAU,KAAK,IAAnB,EAAyB;MACvB,OAAO;QACLE,OAAO,EAAE,KADJ;QAELnF,KAAK,EAAG;MAFH,CAAP;IAID;;IACD,MAAMH,OAAO,GAAG,MAAM9H,2BAA2B,EAAjD;IACA,IAAImB,MAAqB,GAAG2G,OAAO,CAAC,CAAD,CAAnC;;IACA,IAAIkF,YAAJ,EAAkB;MAChB7L,MAAM,GAAG,MAAMkM,oBAAoB,CAACvF,OAAD,CAAnC;IACD;;IACD,IAAI,CAAC3G,MAAL,EAAa;MACX,OAAO;QAAEiM,OAAO,EAAE,KAAX;QAAkBnF,KAAK,EAAE;MAAzB,CAAP;IACD;;IAED,MAAMyB,YAAY,CAAC;MAAE7C,GAAG,EAAEqG,UAAP;MAAmB/L,MAAnB;MAA2BwI,UAAU,EAAE,IAAvC;MAA6CL;IAA7C,CAAD,CAAlB;IACA,OAAO;MAAE8D,OAAO,EAAE,IAAX;MAAiBvG,GAAG,EAAEqG;IAAtB,CAAP;EACD,CArBD,CAqBE,OAAOlJ,CAAP,EAAe;IACf,OAAO;MAAEoJ,OAAO,EAAE,KAAX;MAAkBnF,KAAK,EAAG,6CAA4CjE,CAAC,CAACnB,OAAQ;IAAhF,CAAP;EACD;AACF,C,CAED;;;AACO,eAAeoK,oBAAf,CAAoC3D,WAApC,EAA2E;EAChF,MAAMoE,YAAY,GAAG,MAAMC,2BAAA,CAAgBC,qBAAhB,CAAsCtE,WAAtC,CAA3B;EACA,MAAMuE,KAAK,GAAG,MAAM,IAAAC,wBAAA,EAAexE,WAAf,CAApB;EACA,MAAMyE,0BAA0B,GAAGF,KAAK,CAACG,oBAAN,IAA8B,EAAjE;EAEA,MAAMC,eAAe,GAAG,CACtBP,YAAY,CAACQ,YADS,EAEtBR,YAAY,CAACS,cAFS,EAGtB,GAAGJ,0BAHmB,EAItB3O,MAJsB,CAIfC,OAJe,CAAxB;EAMA,MAAMyI,OAAO,GAAG,MAAM5H,uBAAuB,EAA7C;;EACA,KAAK,MAAMiB,MAAX,IAAqB2G,OAArB,EAA8B;IAC5B,KAAK,MAAMW,IAAX,IAAmBwF,eAAnB,EAAoC;MAClC,IAAI,EAAE,MAAMG,UAAU,CAAC;QAAEjN,MAAF;QAAUsH;MAAV,CAAD,CAAlB,CAAJ,EAA2C;QACzC,OAAO,KAAP;MACD;IACF;EACF;;EAED,OAAO,IAAP;AACD;;AAEM,eAAe4F,mBAAf,CAAmC/E,WAAnC,EAAuE;EAC5E,MAAMoE,YAAY,GAAG,MAAMC,2BAAA,CAAgBC,qBAAhB,CAAsCtE,WAAtC,CAA3B;EACA,MAAMuE,KAAK,GAAG,MAAM,IAAAC,wBAAA,EAAexE,WAAf,CAApB;EACA,MAAMyE,0BAA0B,GAAGF,KAAK,CAACG,oBAAN,IAA8B,EAAjE;EAEA,MAAMC,eAAe,GAAG,CACtBP,YAAY,CAACQ,YADS,EAEtBR,YAAY,CAACS,cAFS,EAGtB,GAAGJ,0BAHmB,EAItB3O,MAJsB,CAIfC,OAJe,CAAxB;EAMA,MAAMyI,OAAO,GAAG,MAAM5H,uBAAuB,EAA7C;;EACA,KAAK,MAAMiB,MAAX,IAAqB2G,OAArB,EAA8B;IAC5B,KAAK,MAAMW,IAAX,IAAmBwF,eAAnB,EAAoC;MAClC,MAAMK,gBAAgB,CAAC;QAAEnN,MAAF;QAAUsH;MAAV,CAAD,CAAtB;IACD;EACF;AACF;;AAED,eAAe2F,UAAf,CAA0B;EAAEjN,MAAF;EAAUsH;AAAV,CAA1B,EAAgG;EAC9F,IAAI,EAAE,MAAMzD,wBAAwB,CAAC7D,MAAD,CAAhC,CAAJ,EAA+C;IAC7C,OAAO,KAAP;EACD;;EAED,IAAI;IACF,MAAMrB,iBAAiB,CAACsF,UAAU,CAACjE,MAAM,CAACN,GAAR,EAAa,SAAb,EAAyB,OAAM4H,IAAK,EAApC,EAAwC,OAAMA,IAAK,EAAnD,CAAX,CAAvB;IACA,OAAO,IAAP;EACD,CAHD,CAGE,OAAOzE,CAAP,EAAe;IACf5C,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CAAoB,yBAAwBlF,CAAC,CAACnB,OAAQ,EAAtD;;IACA,OAAO,KAAP;EACD;AACF;;AAED,eAAeyL,gBAAf,CAAgC;EAC9BnN,MAD8B;EAE9BsH;AAF8B,CAAhC,EAMqB;EACnB,IAAI,EAAE,MAAMzD,wBAAwB,CAAC7D,MAAD,CAAhC,CAAJ,EAA+C;IAC7C,OAAO,KAAP;EACD;;EAED,IAAI;IACF,MAAMrB,iBAAiB,CAACsF,UAAU,CAACjE,MAAM,CAACN,GAAR,EAAa,SAAb,EAAwB,UAAxB,EAAqC,OAAM4H,IAAK,EAAhD,CAAX,CAAvB;IACA,OAAO,IAAP;EACD,CAHD,CAGE,OAAOzE,CAAP,EAAe;IACf;IACA5C,kBAAA,CAAOC,MAAP,CAAciK,KAAd,CAAqB,gCAA+BtH,CAAC,CAACnB,OAAQ,EAA9D;;IACA,OAAO,KAAP;EACD;AACF;;AAED,SAASuC,UAAT,CAAoBvE,GAApB,EAAwC,GAAG0N,OAA3C,EAAwE;EACtE,MAAMnK,IAAI,GAAG,EAAb;;EACA,IAAIvD,GAAJ,EAAS;IACPuD,IAAI,CAACoK,IAAL,CAAU,IAAV,EAAgB3N,GAAhB;EACD;;EACD,OAAOuD,IAAI,CAAC5D,MAAL,CAAY+N,OAAZ,CAAP;AACD;;AAOD,MAAME,0BAAoD,GAAG,CAC3D;EACEC,GAAG,EAAE,MADP;EAEEC,cAAc,EAAE;AAFlB,CAD2D,EAK3D;EACED,GAAG,EAAE,MADP;EAEEC,cAAc,EAAE;AAFlB,CAL2D,EAS3D;EACED,GAAG,EAAE,OADP;EAEEC,cAAc,EAAE;AAFlB,CAT2D,EAa3D;EACED,GAAG,EAAE,QADP;EAEEC,cAAc,EAAE;AAFlB,CAb2D,EAiB3D;EACED,GAAG,EAAE,SADP;EAEEC,cAAc,EAAE;AAFlB,CAjB2D,CAA7D;AAuBA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAeC,uBAAf,CAAuCtF,WAAvC,EAA2E;EAAA;;EAChF,MAAM;IAAEO;EAAF,IAAU,IAAA2C,mBAAA,EAAUlD,WAAV,CAAhB,CADgF,CAGhF;;EACA,IAAI,CAACpD,oBAAA,CAAS2I,aAAT,CAAuBhF,GAAvB,EAA4B,QAA5B,CAAL,EAA4C;IAC1C;EACD;;EAED,MAAMiF,gBAAgB,qDAAGjF,GAAG,CAACe,OAAP,0EAAG,cAAamE,MAAhB,yDAAG,qBAAqBC,UAAxB,wFAAsCnF,GAAG,CAACkF,MAA1C,gDAAsC,YAAYC,UAAlD,uCAAgE,SAAtF,CARgF,CAUhF;;EACA,IAAIF,gBAAgB,KAAK,SAArB,IAAkCA,gBAAgB,KAAK,OAA3D,EAAoE;IAClE;EACD;;EAED,MAAMG,sBAAsB,mBAAGpF,GAAG,CAACkF,MAAP,iDAAG,aAAYG,KAA3C;;EACA,IAAI,CAACD,sBAAL,EAA6B;IAC3B7N,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CACG,kBAAiB3H,gBAAA,CAAM4N,MAAN,CAAa,cAAb,CAA6B,UAAS5N,gBAAA,CAAM4N,MAAN,CACtD,UADsD,CAEtD,4DAHJ;;IAKA;EACD;;EACD,MAAMC,kBAAkB,GAAG,MAAMC,sBAAA,CAAWC,uBAAX,CAC/BhG,WAD+B,EAE/B2F,sBAF+B,CAAjC;;EAIA,IAAI,CAACG,kBAAL,EAAyB;IACvBhO,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CACG,sDAAqD3H,gBAAA,CAAM4N,MAAN,CACpDF,sBADoD,CAEpD,yBAHJ;;IAKA;EACD;;EAED,MAAMM,aAAa,oBAAG1F,GAAG,CAACe,OAAP,kDAAG,cAAamE,MAAnC;EACA,MAAMS,mBAAmB,GAAG,EAA5B;;EACA,KAAK,MAAM;IAAEd,GAAF;IAAOC;EAAP,CAAX,IAAsCF,0BAAtC,EAAkE;IAChE,MAAMgB,iBAAiB,GAAGF,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAGb,GAAH,CAAvC;;IACA,IAAIe,iBAAJ,EAAuB;MACrB,MAAMC,WAAW,GAAG,MAAML,sBAAA,CAAWC,uBAAX,CAAmChG,WAAnC,EAAgDmG,iBAAhD,CAA1B;;MACA,IAAI,CAACC,WAAL,EAAkB;QAChBtO,kBAAA,CAAOC,MAAP,CAAc6H,IAAd,CACG,sDAAqD3H,gBAAA,CAAM4N,MAAN,CACpDM,iBADoD,CAEpD,yBAHJ;;QAKA;MACD;;MACD,MAAM;QAAEE,KAAF;QAASC;MAAT,IAAoBF,WAA1B;MACA,MAAMG,aAAa,GAAGlB,cAAc,GAAGS,kBAAkB,CAACO,KAA1D;MACA,MAAMG,cAAc,GAAGnB,cAAc,GAAGS,kBAAkB,CAACQ,MAA3D;MACAJ,mBAAmB,CAAChB,IAApB,CAAyB;QACvBE,GADuB;QAEvBiB,KAFuB;QAGvBC,MAHuB;QAIvBC,aAJuB;QAKvBC,cALuB;QAMvBC,WAAW,EAAEJ,KAAK,KAAKE,aAAV,IAA2BD,MAAM,KAAKE;MAN5B,CAAzB;IAQD;EACF;;EAED,IAAIN,mBAAmB,CAAC/O,MAApB,KAA+B,CAAnC,EAAsC;IACpCW,kBAAA,CAAOC,MAAP,CACG6H,IADH,CACS;AACb,wEAAwE3H,gBAAA,CAAMC,IAAN,CAClE,+BADkE,CAElE;AACN,+GALI;;IAMA;EACD;;EAED,IAAIgO,mBAAmB,CAACQ,IAApB,CAAyB,CAAC;IAAED;EAAF,CAAD,KAAqB,CAACA,WAA/C,CAAJ,EAAiE;IAC/D3O,kBAAA,CAAOC,MAAP,CACG6H,IADH,CACS;AACb,qEAAqEsG,mBAAmB,CACjFlQ,GAD8D,CAE7D,CAAC;MAAEoP,GAAF;MAAOiB,KAAP;MAAcC,MAAd;MAAsBC,aAAtB;MAAqCC;IAArC,CAAD,KACG,GAAEpB,GAAI,KAAIiB,KAAM,IAAGC,MAAO,KAAIC,aAAc,IAAGC,cAAe,GAHJ,EAK9DpL,IAL8D,CAKzD,IALyD,CAKnD;AAClB,+GARI;EASD;AACF;;AAEM,eAAeuL,uBAAf,GAAyC;EAC9C,IAAI7R,WAAW,KAAK,IAApB,EAA0B;IACxB,OAAO,KAAP;EACD;;EAED,IAAI;IACF,MAAM0B,iBAAiB,CAAC,CAAC,aAAD,CAAD,CAAvB;IACA,OAAO,IAAP;EACD,CAHD,CAGE,MAAM;IACN,OAAO,KAAP;EACD;AACF;;AAED,SAASoQ,kBAAT,CAA4B/O,MAA5B,EAA4C;EAC1C,MAAMgP,QAAQ,GAAGhP,MAAM,CAAC1B,QAAxB;;EACA,IAAI,CAAC0Q,QAAL,EAAe;IACb;IACA,OAAQC,IAAD,IAAkBA,IAAzB;EACD,CALyC,CAM1C;;;EACA,IAAIjP,MAAM,CAACzB,YAAX,EAAyB;IACvB,OAAO6B,gBAAA,CAAMC,IAAb;EACD,CATyC,CAU1C;;;EACA,OAAQ4O,IAAD,IAAkB7O,gBAAA,CAAMC,IAAN,CAAWD,gBAAA,CAAM+L,IAAN,CAAW8C,IAAX,CAAX,CAAzB;AACD;;AAEM,eAAe/C,oBAAf,CAAoCvF,OAApC,EAA+E;EACpF;EAEA;EACAwC,mBAAA,CAAQ+F,iBAAR;;EAEA,MAAM;IAAEC;EAAF,IAAY,MAAM,IAAAC,kBAAA,EAAQ;IAC9B/Q,IAAI,EAAE,cADwB;IAE9BD,IAAI,EAAE,OAFwB;IAG9BiR,KAAK,EAAE,EAHuB;IAI9B3N,OAAO,EAAE,0BAJqB;IAK9B4N,OAAO,EAAE3I,OAAO,CAACxI,GAAR,CAAYoR,IAAI,IAAI;MAC3B,MAAMC,MAAM,GAAGT,kBAAkB,CAACQ,IAAD,CAAjC;MACA,MAAMlR,IAAI,GAAGkR,IAAI,CAAChR,YAAL,GAAoBgR,IAAI,CAAClR,IAAzB,GAAgC,cAA7C;MACA,OAAO;QACLoR,KAAK,EAAG,GAAED,MAAM,CAACD,IAAI,CAACnR,IAAN,CAAY,IAAGgC,gBAAA,CAAM4H,GAAN,CAAW,IAAG3J,IAAK,GAAnB,CAAuB,EADjD;QAEL8Q,KAAK,EAAEI,IAAI,CAACnR;MAFP,CAAP;IAID,CAPQ,CALqB;IAa9BsR,OAAO,EAAE,CAACC,KAAD,EAAaL,OAAb,KAA8B;MACrC,MAAM7K,KAAK,GAAG,IAAImL,MAAJ,CAAWD,KAAX,EAAkB,GAAlB,CAAd;MACA,OAAOL,OAAO,CAACrR,MAAR,CAAgB4R,MAAD,IAAiBpL,KAAK,CAACqL,IAAN,CAAWD,MAAM,CAACJ,KAAlB,CAAhC,CAAP;IACD;EAhB6B,CAAR,CAAxB,CANoF,CAyBpF;;EACAtG,mBAAA,CAAQ4G,kBAAR;;EAEA,MAAM/P,MAAM,GAAGmP,KAAK,GAAGxI,OAAO,CAACzF,IAAR,CAAa,CAAC;IAAE9C;EAAF,CAAD,KAAcA,IAAI,KAAK+Q,KAApC,CAAH,GAAiD,IAArE;;EAEA,IAAI,CAAAnP,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEzB,YAAR,MAAyB,KAA7B,EAAoC;IAClCuJ,eAAe,CAAC9H,MAAD,CAAf;IACA,OAAO,IAAP;EACD;;EAED,OAAOA,MAAP;AACD;;IAEWgQ,S;;;WAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,yBAAAA,S;;AAeZ,MAAMC,gBAAkD,GAAG,EAA3D;AAEA,MAAMC,gBAAgB,GAAG,0BAAzB,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,sBAAzB,C,CACA;;AACA,MAAMC,aAAa,GAAG,oBAAtB;AACA,MAAMC,qBAAqB,GAAG,wBAA9B;AACA,MAAMxQ,yBAAyB,GAAG,mBAAlC;AAEA,MAAMyQ,iCAAiC,GAAG,EAA1C;AAEA;AACA;AACA;;AACO,eAAeC,wBAAf,CACLvQ,MADK,EAEY;EACjB,OAAO,MAAMwQ,yBAAyB,CAACxQ,MAAD,EAASkQ,gBAAT,CAAtC;AACD;AAED;AACA;AACA;;;AACO,eAAeO,wBAAf,CACLzQ,MADK,EAEY;EAAA;;EACjB,MAAM6E,UAAU,4BACb,MAAM2L,yBAAyB,CAACxQ,MAAD,EAASmQ,gBAAT,CADlB,yEAEdG,iCAFF;EAGA,OAAOI,QAAQ,CAAC7L,UAAD,EAAa,EAAb,CAAf;AACD;;AAEM,eAAe8L,kBAAf,CACL3Q,MADK,EAEiB;EACtB,MAAM4Q,UAAU,GAAG,MAAMJ,yBAAyB,CAACxQ,MAAD,EAASqQ,qBAAT,CAAlD;;EAEA,IAAIO,UAAJ,EAAgB;IACd,OAAOA,UAAU,CAAClS,IAAX,GAAkBZ,KAAlB,CAAwB,GAAxB,CAAP;EACD;;EAED,MAAM+S,GAAG,GAAI,MAAML,yBAAyB,CAACxQ,MAAD,EAASoQ,aAAT,CAA5C;EACA,OAAO,CAACS,GAAD,CAAP;AACD;;AAEM,eAAeL,yBAAf,CACLxQ,MADK,EAEL5B,IAFK,EAGL0S,aAHK,EAIY;EACjB,IAAIA,aAAJ,EAAmB;IACjB,OAAOb,gBAAgB,CAACjQ,MAAM,CAAC5B,IAAR,CAAvB;EACD;;EAED,IAAI6R,gBAAgB,CAACjQ,MAAM,CAAC5B,IAAR,CAAhB,IAAiC,IAArC,EAA2C;IACzC,IAAI;MACF6R,gBAAgB,CAACjQ,MAAM,CAAC5B,IAAR,CAAhB,GAAgC,MAAMwB,6BAA6B,CAACI,MAAD,CAAnE;IACD,CAFD,CAEE,OAAO8G,KAAP,EAAmB;MACnB;MACA7G,kBAAA,CAAOC,MAAP,CAAc4G,KAAd,CACG,wCAAuC9G,MAAM,CAAC5B,IAAK,MAAK4B,MAAM,CAACN,GAAI,MAAKoH,KAAK,CAACpF,OAAQ,EADzF;IAGD;EACF;;EACD,OAAOuO,gBAAgB,CAACjQ,MAAM,CAAC5B,IAAR,CAAhB,CAA8BA,IAA9B,CAAP;AACD;;AAED,eAAewB,6BAAf,CACEI,MADF,EAEE+Q,IAFF,EAG6B;EAC3B;EACA,MAAMC,WAAW,GAAG/M,UAAU,CAAC,GAAG,CAACjE,MAAM,CAACN,GAAR,EAAa,OAAb,EAAsB,SAAtB,EAAiCqR,IAAjC,EAAuC9S,MAAvC,CAA8CC,OAA9C,CAAJ,CAA9B;;EACA,IAAI;IACF;IACA,MAAM+S,OAAO,GAAG,CAAC,MAAMvN,qBAAqB,CAACsN,WAAD,EAAc,QAAd,CAA5B,EAAqDE,QAArD,CAA8D,QAA9D,CAAhB,CAFE,CAGF;IACA;IACA;;IAEA,IAAIH,IAAJ,EAAU;MACR,OAAO;QACL,CAACA,IAAD,GAAQE;MADH,CAAP;IAGD;;IACD,OAAOE,wBAAwB,CAACF,OAAD,CAA/B;EACD,CAbD,CAaE,OAAOnK,KAAP,EAAmB;IACnB;IACA,MAAM,IAAItH,KAAJ,CAAW,wCAAuCQ,MAAM,CAACN,GAAI,MAAKoH,KAAK,CAACpF,OAAQ,EAAhF,CAAN;EACD;AACF;;AAEM,SAASyP,wBAAT,CAAkCC,sBAAlC,EAAkE;EACvE,MAAMC,UAA4B,GAAG,EAArC;EACA,MAAMC,WAAW,GAAG,wBAApB;;EACA,KAAK,MAAMxR,KAAX,IAAoBsR,sBAAsB,CAACG,QAAvB,CAAgCD,WAAhC,CAApB,EAAkE;IAChED,UAAU,CAACvR,KAAK,CAAC,CAAD,CAAN,CAAV,GAAuBA,KAAK,CAAC,CAAD,CAA5B;EACD;;EACD,OAAOuR,UAAP;AACD"}