{"version":3,"file":"SimControlLogs.js","names":["forks","parseMessageJson","data","stringData","toString","JSON","parse","Logger","global","debug","isNetworkLog","simLog","subsystem","category","source","image","isReactLog","file","isCoreTelephonyLog","isWebKitLog","isRunningBoardServicesLog","formatMessage","chalk","gray","message","eventMessage","wrapAnsi","process","stdout","columns","onMessage","hasLogged","messageType","error","includes","info","isStreamingLogs","udid","streamLogs","pid","childProcess","spawn","on","ensureExitHooksInstalled","detachStream","killProcess","hasInstalledExitHooks","killSignals","signal","Promise","all","Object","keys","map","resolve","kill","getImageNameFromBundleIdentifierAsync","bundleIdentifier","containerPath","SimControl","getContainerPathAsync","getImageNameFromContainerPath","binaryPath","path","basename","split"],"sources":["../src/SimControlLogs.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { ChildProcessWithoutNullStreams, spawn } from 'child_process';\nimport path from 'path';\nimport wrapAnsi from 'wrap-ansi';\n\nimport { Logger, SimControl } from './internal';\n\nconst forks: Record<string, ChildProcessWithoutNullStreams> = {};\n\nexport type SimControlLog = {\n  /**\n   * 258753568922927108\n   */\n  traceID: number;\n  /**\n   *\n   * \"Connection 1: done\",\n   */\n  eventMessage: string;\n  /**\n   * \"logEvent\" | \"activityCreateEvent\",\n   */\n  eventType: 'logEvent' | 'activityCreateEvent';\n  source: null | {\n    /**\n     * 'RCTDefaultLogFunction_block_invoke' | '__TCC_CRASHING_DUE_TO_PRIVACY_VIOLATION__'\n     */\n    symbol: string;\n    line: number;\n    /**\n     * 'TCC' | 'Security' | 'CFNetwork' | 'libnetwork.dylib' | 'myapp'\n     *\n     * TCC is apple sys, it means \"Transparency, Consent, and Control\"\n     */\n    image: string;\n    /**\n     * 'RCTLog.mm' | ''\n     */\n    file: string;\n  };\n  /**\n   * \"Connection %llu: done\"\n   */\n  formatString: string;\n  /**\n   * 0\n   */\n  activityIdentifier: number;\n  subsystem:\n    | ''\n    | 'com.apple.network'\n    | 'com.facebook.react.log'\n    | 'com.apple.TCC'\n    | 'com.apple.CoreTelephony'\n    | 'com.apple.WebKit'\n    | 'com.apple.runningboard'\n    | string;\n  category: '' | 'access' | 'connection' | 'plugin';\n  /**\n   * \"2021-03-15 15:36:28.004331-0700\"\n   */\n  timestamp: string;\n  /**\n   * 706567072091713\n   */\n  machTimestamp: number;\n  /**\n   * \"Default\"\n   */\n  messageType: 'Default' | 'Error';\n  /**\n   * 15192\n   */\n  processID: number;\n};\n\nfunction parseMessageJson(data: Buffer) {\n  const stringData = data.toString();\n  try {\n    return JSON.parse(stringData) as SimControlLog;\n  } catch {\n    Logger.global.debug('Failed to parse simctl JSON message:\\n' + stringData);\n  }\n  return null;\n}\n\n// There are a lot of networking logs in RN that aren't relevant to the user.\nfunction isNetworkLog(simLog: SimControlLog): boolean {\n  return (\n    simLog.subsystem === 'com.apple.network' ||\n    simLog.category === 'connection' ||\n    simLog.source?.image === 'CFNetwork'\n  );\n}\n\nfunction isReactLog(simLog: SimControlLog): boolean {\n  return simLog.subsystem === 'com.facebook.react.log' && simLog.source?.file === 'RCTLog.mm';\n}\n\n// It's not clear what these are but they aren't very useful.\n// (The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated)\n// We can add them later if need.\nfunction isCoreTelephonyLog(simLog: SimControlLog): boolean {\n  // [CoreTelephony] Updating selectors failed with: Error Domain=NSCocoaErrorDomain Code=4099\n  // \"The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.}\n  return simLog.subsystem === 'com.apple.CoreTelephony';\n}\n\n// https://stackoverflow.com/a/65313219/4047926\nfunction isWebKitLog(simLog: SimControlLog): boolean {\n  // [WebKit] 0x1143ca500 - ProcessAssertion: Failed to acquire RBS Background assertion 'WebProcess Background Assertion' for process with PID 27084, error: Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target\n  // entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\" name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}\n  return simLog.subsystem === 'com.apple.WebKit';\n}\n\n// Similar to WebKit logs\nfunction isRunningBoardServicesLog(simLog: SimControlLog): boolean {\n  // [RunningBoardServices] Error acquiring assertion: <Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\"\n  // name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}>\n  return simLog.subsystem === 'com.apple.runningboard';\n}\n\nfunction formatMessage(simLog: SimControlLog): string {\n  // TODO: Maybe change \"TCC\" to \"Consent\" or \"System\".\n  const category = chalk.gray(`[${simLog.source?.image ?? simLog.subsystem}]`);\n  const message = simLog.eventMessage;\n  return wrapAnsi(category + ' ' + message, process.stdout.columns || 80);\n}\n\nexport function onMessage(simLog: SimControlLog) {\n  let hasLogged = false;\n\n  if (simLog.messageType === 'Error') {\n    if (\n      // Hide all networking errors which are mostly useless.\n      !isNetworkLog(simLog) &&\n      // Showing React errors will result in duplicate messages.\n      !isReactLog(simLog) &&\n      !isCoreTelephonyLog(simLog) &&\n      !isWebKitLog(simLog) &&\n      !isRunningBoardServicesLog(simLog)\n    ) {\n      hasLogged = true;\n      // Sim: This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.\n      Logger.global.error(formatMessage(simLog));\n    }\n  } else if (simLog.eventMessage) {\n    // If the source has a file (i.e. not a system log).\n    if (\n      simLog.source?.file ||\n      simLog.eventMessage.includes('Terminating app due to uncaught exception')\n    ) {\n      hasLogged = true;\n      Logger.global.info(formatMessage(simLog));\n    }\n  }\n\n  if (!hasLogged) {\n    Logger.global.debug(formatMessage(simLog));\n  } else {\n    // console.log('DATA:', JSON.stringify(simLog));\n  }\n}\n\nexport function isStreamingLogs(udid: string): boolean {\n  return !!forks[udid];\n}\n\n// The primary purpose of this module is to surface logs related to fatal app crashes.\n// Everything else should come through the native React logger.\nexport function streamLogs({ pid, udid }: { pid: string; udid: string }): void {\n  // Prevent adding a duplicate listener.\n  // This only works because our current usage of SimControlLogs only allows for one possible `pid` to be used.\n  // If in the future, you can attach logs to two different apps from the same process, then this will need to be changed.\n  if (forks[udid]) {\n    return;\n  }\n\n  // xcrun simctl spawn booted log stream --process --style json\n  const childProcess = spawn('xcrun', [\n    'simctl',\n    'spawn',\n    udid,\n    'log',\n    'stream',\n    '--process',\n    pid,\n    // ndjson provides a better format than json.\n    '--style',\n    'ndjson',\n    // Provide the source so we can filter logs better\n    '--source',\n    // log, activity, trace -- activity was related to layouts, trace didn't work, so that leaves log.\n    // Passing nothing combines all three, but we don't use activity.\n    '--type',\n    'log',\n    // backtrace doesn't seem very useful in basic cases.\n    // TODO: Maybe we can format as a stack trace for native errors.\n    '--no-backtrace',\n  ]);\n\n  childProcess.stdout.on('data', (data: Buffer) => {\n    const simLog = parseMessageJson(data);\n    if (!simLog) {\n      return;\n    }\n\n    onMessage(simLog);\n  });\n\n  childProcess.on('error', ({ message }) => {\n    Logger.global.debug('[simctl error]:', message);\n  });\n\n  forks[udid] = childProcess;\n  // Ensure the process is removed.\n  ensureExitHooksInstalled();\n}\n\nexport async function detachStream(udid: string) {\n  if (forks[udid]) {\n    await killProcess(forks[udid]);\n    delete forks[udid];\n  }\n}\n\nlet hasInstalledExitHooks = false;\n\nfunction ensureExitHooksInstalled(): void {\n  if (hasInstalledExitHooks) return;\n  hasInstalledExitHooks = true;\n\n  const killSignals: ['SIGINT', 'SIGTERM'] = ['SIGINT', 'SIGTERM'];\n  for (const signal of killSignals) {\n    process.on(signal, async () => {\n      await Promise.all(Object.keys(forks).map(udid => detachStream(udid)));\n    });\n  }\n}\n\nasync function killProcess(childProcess: ChildProcessWithoutNullStreams): Promise<void> {\n  if (childProcess) {\n    return new Promise<void>(resolve => {\n      childProcess.on('close', resolve);\n      childProcess.kill();\n    });\n  }\n}\n\n/**\n *\n * @param udid\n * @param bundleIdentifier\n * @returns Image name like `Exponent` and `null` when the app is not installed on the provided simulator.\n */\nexport async function getImageNameFromBundleIdentifierAsync(\n  udid: string,\n  bundleIdentifier: string\n): Promise<string | null> {\n  const containerPath = await SimControl.getContainerPathAsync({ udid, bundleIdentifier });\n\n  if (containerPath) {\n    return getImageNameFromContainerPath(containerPath);\n  }\n  return null;\n}\n\nexport function getImageNameFromContainerPath(binaryPath: string): string {\n  return path.basename(binaryPath).split('.')[0];\n}\n"],"mappings":"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"}