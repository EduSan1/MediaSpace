{"version":3,"file":"User.js","names":["ANONYMOUS_USERNAME","UserManagerInstance","Semaphore","_getSessionLock","acquire","currentUser","_currentUser","accessToken","sessionSecret","userData","_readUserData","e","Logger","global","warn","release","getGlobalInstance","__globalInstance","initialize","getProjectOwner","user","exp","kind","owner","XDLError","username","loginAsync","loginType","loginArgs","Error","apiAnonymous","ApiV2Client","clientForUser","loginResp","postAsync","password","otp","error","_getProfileAsync","currentConnection","registerAsync","actor","getCurrentUserAsync","logoutAsync","registeredUser","createOrUpdateUserAsync","connection","email","givenName","familyName","console","message","ensureLoggedInAsync","ConnectionStatus","isOffline","silent","_interactiveAuthenticationCallbackAsync","setInteractiveAuthenticationCallback","callback","auth","UserSettings","getAsync","isEmpty","options","data","code","getCurrentUserOnlyAsync","getCurrentRobotUserOnlyAsync","getCurrentUsernameAsync","token","getSessionAsync","api","updatedUser","_prepareAuth0Profile","_parseAuth0Profile","Analytics","logEvent","userId","deleteKeyAsync","forgotPasswordAsync","usernameOrEmail","user_type","setAsync","UnifiedAnalytics","identifyUser","userType","primaryAccountId","rawProfile","Object","keys","reduce","p","key","camelCase","niceProfile","snakeCase"],"sources":["../src/User.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport camelCase from 'lodash/camelCase';\nimport isEmpty from 'lodash/isEmpty';\nimport snakeCase from 'lodash/snakeCase';\n\nimport {\n  Analytics,\n  ApiV2 as ApiV2Client,\n  ConnectionStatus,\n  Logger,\n  Semaphore,\n  UnifiedAnalytics,\n  UserData,\n  UserSettings,\n  XDLError,\n} from './internal';\n\nexport type User = {\n  kind: 'user';\n  // required\n  username: string;\n  nickname: string;\n  userId: string;\n  picture: string;\n  // optional\n  email?: string;\n  emailVerified?: boolean;\n  givenName?: string;\n  familyName?: string;\n  userMetadata: {\n    onboarded: boolean;\n    legacy?: boolean;\n  };\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: string;\n  accessToken?: string;\n};\n\nexport type RobotUser = {\n  kind: 'robot';\n  // required\n  userId: string;\n  username: string; // backwards compatible to show in current UI -- based on given name or placeholder\n  // optional\n  givenName?: string;\n  // auth methods\n  currentConnection: ConnectionType;\n  sessionSecret?: never; // robot users only use accessToken -- this prevents some extraneous typecasting\n  accessToken?: string;\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser';\n  username: string;\n  userMetadata: {\n    legacy: boolean;\n    needsPasswordMigration: boolean;\n  };\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\nexport type ConnectionType =\n  | 'Access-Token-Authentication'\n  | 'Username-Password-Authentication'\n  | 'facebook'\n  | 'google-oauth2'\n  | 'github';\n\nexport type RegistrationData = {\n  username: string;\n  password: string;\n  email?: string;\n  givenName?: string;\n  familyName?: string;\n};\n\n// note: user-token isn't listed here because it's a non-persistent pre-authenticated method\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  _currentUser: User | RobotUser | null = null;\n  _getSessionLock = new Semaphore();\n  _interactiveAuthenticationCallbackAsync?: () => Promise<User>;\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Get the account and project name using a user and Expo config.\n   * This will validate if the owner field is set when using a robot account.\n   */\n  getProjectOwner(user: User | RobotUser, exp: ExpoConfig): string {\n    if (user.kind === 'robot' && !exp.owner) {\n      throw new XDLError(\n        'ROBOT_OWNER_ERROR',\n        'The \"owner\" manifest property is required when using robot users. See: https://docs.expo.dev/versions/latest/config/app/#owner'\n      );\n    }\n\n    return exp.owner || user.username;\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string; password: string; otp?: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n        otp: loginArgs.otp,\n      });\n      if (loginResp.error) {\n        throw new XDLError('INVALID_USERNAME_PASSWORD', loginResp['error_description']);\n      }\n      const user = await this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n      return user as User;\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(\n    userData: RegistrationData,\n    user: UserOrLegacyUser | null = null\n  ): Promise<User> {\n    let actor: UserOrLegacyUser | RobotUser | null = user;\n\n    if (!actor) {\n      actor = await this.getCurrentUserAsync();\n    }\n\n    if (actor) {\n      await this.logoutAsync();\n      actor = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e: any) {\n      console.error(e);\n      throw new XDLError('REGISTRATION_ERROR', 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<User | RobotUser> {\n    if (ConnectionStatus.isOffline()) {\n      throw new XDLError('NETWORK_REQUIRED', \"Can't verify user without network access\");\n    }\n\n    let user = await this.getCurrentUserAsync({ silent: true });\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError('NOT_LOGGED_IN', 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback: () => Promise<User>) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData(): Promise<UserData | null> {\n    let auth = await UserSettings.getAsync('auth', null);\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', null);\n    }\n    if (typeof auth === 'undefined') {\n      return null;\n    }\n    return auth;\n  }\n\n  /**\n   * Returns cached user data without hitting our backend. Only works for 'Username-Password-Authentication' flow. Does not work with 'Access-Token-Authentication' flow.\n   */\n  getCachedUserDataAsync = async (): Promise<UserData | null> => {\n    await this._getSessionLock.acquire();\n\n    try {\n      const currentUser = this._currentUser;\n      // If user is cached and there is an accessToken or sessionSecret, return the user\n      if (currentUser && (currentUser.accessToken || currentUser.sessionSecret)) {\n        return currentUser;\n      }\n\n      const userData = await this._readUserData();\n\n      // // No token, no session, no current user. Need to login\n      if (!userData?.sessionSecret) {\n        return null;\n      }\n\n      return userData;\n    } catch (e: any) {\n      Logger.global.warn(e);\n      return null;\n    } finally {\n      this._getSessionLock.release();\n    }\n  };\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(options?: { silent?: boolean }): Promise<User | RobotUser | null> {\n    await this._getSessionLock.acquire();\n\n    try {\n      const currentUser = this._currentUser;\n\n      // If user is cached and there is an accessToken or sessionSecret, return the user\n      if (currentUser && (currentUser.accessToken || currentUser.sessionSecret)) {\n        return currentUser;\n      }\n\n      if (ConnectionStatus.isOffline()) {\n        return null;\n      }\n\n      const data = await this._readUserData();\n      const accessToken = UserSettings.accessToken();\n\n      // No token, no session, no current user. Need to login\n      if (!accessToken && !data?.sessionSecret) {\n        return null;\n      }\n\n      try {\n        if (accessToken) {\n          return await this._getProfileAsync({\n            accessToken,\n            currentConnection: 'Access-Token-Authentication',\n          });\n        }\n\n        return await this._getProfileAsync({\n          currentConnection: data?.currentConnection,\n          sessionSecret: data?.sessionSecret,\n        });\n      } catch (e: any) {\n        if (!(options && options.silent)) {\n          Logger.global.warn('Fetching the user profile failed');\n          Logger.global.warn(e);\n        }\n        if (e.code === 'UNAUTHORIZED_ERROR') {\n          return null;\n        }\n        throw e;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentUserOnlyAsync(): Promise<User | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'user') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not supported for robot users.');\n    }\n    return user;\n  }\n\n  /**\n   * Get the current user and check if it's a robot.\n   * If the user is not a robot, it will throw an error.\n   */\n  async getCurrentRobotUserOnlyAsync(): Promise<RobotUser | null> {\n    const user = await this.getCurrentUserAsync();\n    if (user && user.kind !== 'robot') {\n      throw new XDLError('USER_ACCOUNT_ERROR', 'This action is not supported for normal users.');\n    }\n    return user;\n  }\n\n  async getCurrentUsernameAsync(): Promise<string | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      const user = await this.getCurrentUserAsync();\n      if (user?.username) {\n        return user.username;\n      }\n    }\n    const data = await this._readUserData();\n    if (data?.username) {\n      return data.username;\n    }\n    return null;\n  }\n\n  async getSessionAsync(): Promise<{ sessionSecret?: string; accessToken?: string } | null> {\n    const token = UserSettings.accessToken();\n    if (token) {\n      return { accessToken: token };\n    }\n    const data = await this._readUserData();\n    if (data?.sessionSecret) {\n      return { sessionSecret: data.sessionSecret };\n    }\n    return null;\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: object): Promise<User | null> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    if (currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    const api = ApiV2Client.clientForUser(currentUser);\n\n    const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n      userData: _prepareAuth0Profile(userData),\n    });\n\n    this._currentUser = {\n      ...this._currentUser,\n      ..._parseAuth0Profile(updatedUser),\n      kind: 'user',\n    } as User;\n\n    return this._currentUser;\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser?.kind === 'robot') {\n      throw new XDLError('ROBOT_ACCOUNT_ERROR', 'This action is not available for robot users');\n    }\n\n    // Only send logout events events for users without access tokens\n    if (this._currentUser && !this._currentUser?.accessToken) {\n      Analytics.logEvent('Logout', {\n        userId: this._currentUser.userId,\n        currentConnection: this._currentUser.currentConnection,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n    accessToken,\n  }: {\n    currentConnection?: ConnectionType;\n    sessionSecret?: string;\n    accessToken?: string;\n  }): Promise<User | RobotUser> {\n    let user;\n    const api = ApiV2Client.clientForUser({\n      sessionSecret,\n      accessToken,\n    });\n\n    user = await api.getAsync('auth/userInfo');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      // We need to inherit the \"robot\" type only, the rest is considered \"user\" but returned as \"person\".\n      kind: user.user_type === 'robot' ? 'robot' : 'user',\n      currentConnection,\n      sessionSecret,\n      accessToken,\n    };\n\n    // Create a \"username\" to use in current terminal UI (e.g. expo whoami)\n    if (user.kind === 'robot') {\n      user.username = user.givenName ? `${user.givenName} (robot)` : 'robot';\n    }\n\n    // note: do not persist the authorization token, must be env-var only\n    if (!accessToken) {\n      await UserSettings.setAsync('auth', {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        sessionSecret,\n      });\n    }\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      if (!accessToken) {\n        // Only send login events for users without access tokens\n        Analytics.logEvent('Login', {\n          userId: user.userId,\n          currentConnection: user.currentConnection,\n        });\n      }\n\n      UnifiedAnalytics.identifyUser(user.userId, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n        userType: user.kind,\n        primaryAccountId: user.primaryAccountId,\n      });\n\n      Analytics.identifyUser(user.userId, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n        userType: user.kind,\n        primaryAccountId: user.primaryAccountId,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance: UserManagerInstance | undefined;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any) {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return Object.keys(rawProfile).reduce((p, key) => {\n    p[camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {} as any);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any) {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return Object.keys(niceProfile).reduce((p, key) => {\n    p[snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {} as any);\n}\n"],"mappings":"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"}