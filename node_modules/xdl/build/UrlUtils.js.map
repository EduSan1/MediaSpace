{"version":3,"file":"UrlUtils.js","names":["constructBundleUrlAsync","projectRoot","opts","requestHostname","constructUrlAsync","constructDeepLinkAsync","devClient","ProjectSettings","readAsync","constructDevClientUrlAsync","constructManifestUrlAsync","_scheme","scheme","XDLError","protocol","resolveProtocol","urlType","manifestUrl","encodeURIComponent","constructHostUriAsync","urlString","urlObj","url","parse","slashes","format","constructLogUrlAsync","baseUrl","constructLoadingUrlAsync","platform","query","constructUrlWithExtensionAsync","entryPoint","ext","metroQueryOptions","defaultOpts","dev","minify","bundleUrl","hostType","mainModulePath","stripJSExtension","queryParams","constructBundleQueryParams","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","exp","getConfig","skipSDKVersionRequirement","constructBundleQueryParamsWithConfig","hot","strict","Versions","lteSdkVersion","includeAssetFileHashes","pluginModule","resolveFrom","assetPlugin","QueryString","stringify","constructWebAppUrlAsync","options","packagerInfo","readPackagerInfoAsync","webpackServerPort","https","host","ip","address","assertValidOptions","undefined","includes","lanType","urlRandomness","Object","keys","forEach","key","ensureOptionsAsync","optionsWithDefaults","detach","sdkVersion","schemes","Array","isArray","filter","firstScheme","incomingOpts","isPackager","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","ConnectionStatus","isOffline","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","ProjectUtils","logWarning","clearNotification","pnu","url_","joinURLComponents","createRedirectURL","assert","validPort","validProtocol","replace","isHttps","isURL","protocols","requireProtocol","URL","parsed","map","x","toLowerCase"],"sources":["../src/UrlUtils.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport assert from 'assert';\nimport os from 'os';\nimport QueryString from 'querystring';\nimport resolveFrom from 'resolve-from';\nimport url from 'url';\n\nimport {\n  ConnectionStatus,\n  ip,\n  ProjectSettings,\n  ProjectUtils,\n  Versions,\n  XDLError,\n} from './internal';\n\ninterface URLOptions extends ProjectSettings.ProjectSettings {\n  urlType: null | 'exp' | 'http' | 'no-protocol' | 'redirect' | 'custom';\n}\n\ninterface MetroQueryOptions {\n  dev?: boolean;\n  strict?: boolean;\n  minify?: boolean;\n}\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructDeepLinkAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n): Promise<string> {\n  const { devClient } = await ProjectSettings.readAsync(projectRoot);\n  if (devClient) {\n    return constructDevClientUrlAsync(projectRoot, opts, requestHostname);\n  } else {\n    return constructManifestUrlAsync(projectRoot, opts, requestHostname);\n  }\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  return await constructUrlAsync(projectRoot, opts ?? null, false, requestHostname);\n}\n\nexport async function constructDevClientUrlAsync(\n  projectRoot: string,\n  opts?: Partial<URLOptions>,\n  requestHostname?: string\n) {\n  let _scheme: string;\n  if (opts?.scheme) {\n    _scheme = opts?.scheme;\n  } else {\n    const { scheme } = await ProjectSettings.readAsync(projectRoot);\n    if (!scheme || typeof scheme !== 'string') {\n      throw new XDLError('NO_DEV_CLIENT_SCHEME', 'No scheme specified for development client');\n    }\n    _scheme = scheme;\n  }\n  const protocol = resolveProtocol(projectRoot, { scheme: _scheme, urlType: 'custom' });\n  const manifestUrl = await constructManifestUrlAsync(\n    projectRoot,\n    { ...opts, urlType: 'http' },\n    requestHostname\n  );\n  return `${protocol}://expo-development-client/?url=${encodeURIComponent(manifestUrl)}`;\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  const urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructLoadingUrlAsync(\n  projectRoot: string,\n  platform: 'ios' | 'android' | null,\n  requestHostname?: string\n): Promise<string> {\n  const baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  const query = platform ? `?platform=${platform}` : '';\n  return `${baseUrl}/_expo/loading${query}`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  metroQueryOptions = metroQueryOptions || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  const mainModulePath = stripJSExtension(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  const queryParams = constructBundleQueryParams(projectRoot, metroQueryOptions);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  metroQueryOptions?: MetroQueryOptions\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    metroQueryOptions\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(\n  projectRoot: string,\n  requestHostname?: string\n): Promise<string> {\n  return await constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport function constructBundleQueryParams(projectRoot: string, opts: MetroQueryOptions): string {\n  // No SDK Version will assume the latest requirements\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  return constructBundleQueryParamsWithConfig(projectRoot, opts, exp);\n}\n\nexport function constructBundleQueryParamsWithConfig(\n  projectRoot: string,\n  opts: MetroQueryOptions,\n  exp: Pick<ExpoConfig, 'sdkVersion'>\n): string {\n  const queryParams: Record<string, boolean | string> = {\n    dev: !!opts.dev,\n    hot: false,\n  };\n\n  if ('strict' in opts) {\n    queryParams.strict = !!opts.strict;\n  }\n\n  if ('minify' in opts) {\n    // TODO: Maybe default this to true if dev is false\n    queryParams.minify = !!opts.minify;\n  }\n\n  // TODO: Remove this ...\n\n  // SDK11 to SDK32 require us to inject hashAssetFiles through the params, but this is not\n  // needed with SDK33+\n  if (Versions.lteSdkVersion(exp, '10.0.0')) {\n    // SDK <=10\n    // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n    // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n    queryParams.includeAssetFileHashes = true;\n  } else if (Versions.lteSdkVersion(exp, '32.0.0')) {\n    // SDK 11-32\n    // Use an absolute path here so that we can not worry about symlinks/relative requires\n    const pluginModule = resolveFrom(projectRoot, 'expo/tools/hashAssetFiles');\n    queryParams.assetPlugin = encodeURIComponent(pluginModule);\n  }\n  // Special requirements aren't needed after SDK 33 (Jun 5 2019)\n\n  return QueryString.stringify(queryParams);\n}\n\nexport async function constructWebAppUrlAsync(\n  projectRoot: string,\n  options: { hostType?: 'localhost' | 'lan' | 'tunnel' } = {}\n): Promise<string | null> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n\n  const { https, hostType } = await ProjectSettings.readAsync(projectRoot);\n  const host = (options.hostType ?? hostType) === 'localhost' ? 'localhost' : ip.address();\n\n  let urlType = 'http';\n  if (https === true) {\n    urlType = 'https';\n  }\n\n  return `${urlType}://${host}:${packagerInfo.webpackServerPort}`;\n}\n\nfunction assertValidOptions(opts: Partial<URLOptions>): URLOptions {\n  if (opts.devClient && typeof opts.devClient !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"devClient\" must be a boolean if specified`);\n  }\n\n  if (opts.scheme && typeof opts.scheme !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', `\"scheme\" must be a string if specified`);\n  }\n\n  if (![undefined, null, 'exp', 'http', 'redirect', 'no-protocol'].includes(opts.urlType)) {\n    throw new XDLError(\n      'INVALID_OPTIONS',\n      `\"urlType\" must be one of: \"exp\", \"http\", \"redirect\", \"no-protocol\" if specified`\n    );\n  }\n\n  if (![undefined, 'ip', 'hostname'].includes(opts.lanType)) {\n    throw new XDLError(\n      'INVALID_OPTIONS',\n      `\"lanType\" must be one of: \"ip\", \"hostname\" if specified`\n    );\n  }\n\n  if (![undefined, 'localhost', 'lan', 'tunnel'].includes(opts.hostType)) {\n    throw new XDLError(\n      'INVALID_OPTIONS',\n      `\"hostType\" must be one of: \"localhost\", \"lan\", \"tunnel\" if specified`\n    );\n  }\n\n  if (opts.dev && typeof opts.dev !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"dev\" must be a boolean if specified`);\n  }\n\n  if (opts.strict && typeof opts.strict !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"strict\" must be a boolean if specified`);\n  }\n\n  if (opts.minify && typeof opts.minify !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"minify\" must be a boolean if specified`);\n  }\n\n  if (opts.https && typeof opts.https !== 'boolean') {\n    throw new XDLError('INVALID_OPTIONS', `\"https\" must be a boolean if specified`);\n  }\n\n  if (opts.urlRandomness && typeof opts.urlRandomness !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', `\"urlRandomness\" must be a string if specified`);\n  }\n\n  Object.keys(opts).forEach(key => {\n    if (\n      ![\n        'devClient',\n        'scheme',\n        'urlType',\n        'lanType',\n        'hostType',\n        'dev',\n        'strict',\n        'minify',\n        'https',\n        'urlRandomness',\n      ].includes(key)\n    ) {\n      throw new XDLError('INVALID_OPTIONS', `\"${key}\" is not a valid option`);\n    }\n  });\n\n  return opts as URLOptions;\n}\n\nasync function ensureOptionsAsync(\n  projectRoot: string,\n  opts: Partial<URLOptions> | null\n): Promise<URLOptions> {\n  if (opts) {\n    assertValidOptions(opts);\n  }\n\n  const defaultOpts = await ProjectSettings.readAsync(projectRoot);\n  if (!opts) {\n    return { urlType: null, ...defaultOpts };\n  }\n  const optionsWithDefaults = { ...defaultOpts, ...opts };\n  return assertValidOptions(optionsWithDefaults);\n}\n\nfunction resolveProtocol(\n  projectRoot: string,\n  { urlType, ...options }: Pick<URLOptions, 'urlType' | 'scheme'>\n): string | null {\n  if (urlType === 'http') {\n    return 'http';\n  } else if (urlType === 'no-protocol') {\n    return null;\n  } else if (urlType === 'custom') {\n    return options.scheme;\n  }\n  let protocol = 'exp';\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // We only use these values from the config\n  const { scheme, detach, sdkVersion } = exp;\n\n  if (detach) {\n    // Normalize schemes and filter invalid schemes.\n    const schemes = (Array.isArray(scheme) ? scheme : [scheme]).filter(\n      (scheme: any) => typeof scheme === 'string' && !!scheme\n    );\n    // Get the first valid scheme.\n    const firstScheme = schemes[0];\n    if (firstScheme && !Versions.lteSdkVersion({ sdkVersion }, '26.0.0')) {\n      protocol = firstScheme;\n    } else if (detach.scheme) {\n      // must keep this fallback in place for older projects\n      // and those detached with an older version of xdl\n      protocol = detach.scheme;\n    }\n  }\n\n  return protocol;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  incomingOpts: Partial<URLOptions> | null,\n  isPackager: boolean,\n  requestHostname?: string\n): Promise<string> {\n  const opts = await ensureOptionsAsync(projectRoot, incomingOpts);\n\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol = resolveProtocol(projectRoot, opts);\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || ConnectionStatus.isOffline()) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    const ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl || typeof ngrokUrl !== 'string') {\n      // TODO: if you start with --tunnel flag then this warning will always\n      // show up right before the tunnel starts...\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found (it might not be ready yet), falling back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      const pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  const url_ = joinURLComponents({ protocol, hostname, port });\n\n  if (opts.urlType === 'redirect') {\n    return createRedirectURL(url_);\n  }\n\n  return url_;\n}\n\nfunction createRedirectURL(url: string): string {\n  return `https://exp.host/--/to-exp/${encodeURIComponent(url)}`;\n}\n\nfunction joinURLComponents({\n  protocol,\n  hostname,\n  port,\n}: {\n  protocol?: string | null;\n  hostname?: string | null;\n  port?: string | number | null;\n}): string {\n  assert(hostname, 'hostname cannot be inferred.');\n  // Android HMR breaks without this port 80.\n  // This is because Android React Native WebSocket implementation is not spec compliant and fails without a port:\n  // `E unknown:ReactNative: java.lang.IllegalArgumentException: Invalid URL port: \"-1\"`\n  // Invoked first in `metro-runtime/src/modules/HMRClient.js`\n  const validPort = port ?? '80';\n  const validProtocol = protocol ? `${protocol}://` : '';\n\n  return `${validProtocol}${hostname}:${validPort}`;\n}\n\nexport function stripJSExtension(entryPoint: string): string {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function isHttps(urlString: string): boolean {\n  return isURL(urlString, { protocols: ['https'] });\n}\n\nexport function isURL(\n  urlString: string,\n  { protocols, requireProtocol }: { protocols?: string[]; requireProtocol?: boolean }\n) {\n  try {\n    // eslint-disable-next-line\n    new url.URL(urlString);\n    const parsed = url.parse(urlString);\n    if (!parsed.protocol && !requireProtocol) {\n      return true;\n    }\n    return protocols\n      ? parsed.protocol\n        ? protocols.map(x => `${x.toLowerCase()}:`).includes(parsed.protocol)\n        : false\n      : true;\n  } catch {\n    return false;\n  }\n}\n"],"mappings":"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"}