{"version":3,"file":"ProjectAssets.js","names":["EXPO_CDN","resolveGoogleServicesFile","projectRoot","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","getAssetFieldPathsForManifestAsync","sdkAssetFieldPaths","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","get","resolveManifestAssets","resolver","strict","assetSchemas","urls","Promise","all","map","manifestField","pathOrURL","test","existsSync","err","Error","localAssetPath","forEach","index","set","e","logMethod","ProjectUtils","logWarning","logError","message","_configureExpForAssets","exp","assets","assetBundlePatterns","fullPatterns","p","join","logger","global","info","bundledAssets","Set","asset","file","files","shouldBundle","__packager_asset","some","minimatch","logDebug","fileHashes","hash","add","type","publishAssetsAsync","options","exportAssetsAsync","hostedUrl","assetPath","outputDir","bundles","experimentalBundle","assert","uniqBy","Object","values","flatMap","bundle","assetCdnPath","urljoin","collectAssets","length","saveAssetsAsync","uploadAssetsAsync","quiet","fetchMissingAssetsAsync","paths","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","result","postAsync","keys","metas","metadata","missing","key","exists","logAssetTask","action","pathName","relativePath","replace","collectAssetPaths","keyChunks","chunk","formData","FormData","append","createReadStream","uploadFormDataAsync","promises","push","copy","hostedAssetPrefix","manifestAssets","absolutePath","md5hex"],"sources":["../src/ProjectAssets.ts"],"sourcesContent":["import { ExpoAppManifest, ExpoConfig } from '@expo/config';\nimport { BundleAssetWithFileHashes, BundleOutput } from '@expo/dev-server';\nimport assert from 'assert';\nimport FormData from 'form-data';\nimport fs from 'fs-extra';\nimport chunk from 'lodash/chunk';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport uniqBy from 'lodash/uniqBy';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport path from 'path';\nimport urljoin from 'url-join';\n\nimport { ApiV2, ExpSchema, Logger as logger, ProjectUtils, UserManager } from './internal';\n\nconst EXPO_CDN = 'https://classic-assets.eascdn.net';\n\ntype ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype BundlesByPlatform = { android?: BundleOutput; ios?: BundleOutput };\n\ntype ExportAssetsOptions = {\n  projectRoot: string;\n  exp: ExpoAppManifest;\n  hostedUrl: string;\n  assetPath: string;\n  bundles: BundlesByPlatform;\n  outputDir?: string;\n  experimentalBundle?: boolean;\n};\n\nexport async function resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\n/**\n * Get all fields in the manifest that match assets, then filter the ones that aren't set.\n *\n * @param manifest\n * @returns Asset fields that the user has set like [\"icon\", \"splash.image\", ...]\n */\nasync function getAssetFieldPathsForManifestAsync(manifest: ExpoConfig): Promise<string[]> {\n  // String array like [\"icon\", \"notification.icon\", \"loading.icon\", \"loading.backgroundImage\", \"ios.icon\", ...]\n  const sdkAssetFieldPaths = await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion);\n  return sdkAssetFieldPaths.filter(assetSchema => get(manifest, assetSchema));\n}\n\nexport async function resolveManifestAssets({\n  projectRoot,\n  manifest,\n  resolver,\n  strict = false,\n}: {\n  projectRoot: string;\n  manifest: ExpoConfig;\n  resolver: (assetPath: string) => Promise<string>;\n  strict?: boolean;\n}) {\n  try {\n    // Asset fields that the user has set like [\"icon\", \"splash.image\"]\n    const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async manifestField => {\n        const pathOrURL = get(manifest, manifestField);\n        if (/^https?:\\/\\//.test(pathOrURL)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = manifestField;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((manifestField, index: number) =>\n      set(manifest, `${manifestField}Url`, urls[index])\n    );\n  } catch (e: any) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoAppManifest, assets: Asset[]) {\n  // Add google services file if it exists\n  await resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    // Only log the patterns in debug mode, if they aren't already defined in the app.json, then all files will be targeted.\n    logger.global.info('\\nProcessing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set<string>();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nexport async function publishAssetsAsync(\n  options: Pick<ExportAssetsOptions, 'projectRoot' | 'exp' | 'bundles'>\n) {\n  return exportAssetsAsync({\n    ...options,\n    hostedUrl: EXPO_CDN,\n    assetPath: '~assets',\n  });\n}\n\nexport async function exportAssetsAsync({\n  projectRoot,\n  exp,\n  hostedUrl,\n  assetPath,\n  outputDir,\n  bundles,\n  experimentalBundle,\n}: ExportAssetsOptions) {\n  logger.global.info('Analyzing assets');\n\n  let assets: Asset[];\n  if (experimentalBundle) {\n    assert(outputDir, 'outputDir must be specified when exporting to EAS');\n    assets = uniqBy(\n      Object.values(bundles).flatMap(bundle => bundle!.assets),\n      asset => asset.hash\n    );\n  } else {\n    const assetCdnPath = urljoin(hostedUrl, assetPath);\n    assets = await collectAssets(projectRoot, exp, assetCdnPath, bundles);\n  }\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    if (outputDir) {\n      await saveAssetsAsync(projectRoot, assets, outputDir);\n    } else {\n      // No output directory defined, use remote url.\n      await uploadAssetsAsync(projectRoot, assets);\n    }\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\n/**\n * Collect list of assets missing on host\n *\n * @param paths asset paths found locally that need to be uploaded.\n */\nasync function fetchMissingAssetsAsync(paths: string[]): Promise<string[]> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('assets/metadata', { keys: paths });\n\n  const metas = result.metadata;\n  const missing = paths.filter(key => !metas[key].exists);\n  return missing;\n}\n\nfunction logAssetTask(projectRoot: string, action: 'uploading' | 'saving', pathName: string) {\n  ProjectUtils.logDebug(projectRoot, 'expo', `${action} ${pathName}`);\n\n  const relativePath = pathName.replace(projectRoot, '');\n  logger.global.info({ quiet: true }, `${action} ${relativePath}`);\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  const missing = await fetchMissingAssetsAsync(Object.keys(paths));\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n    return;\n  }\n\n  const keyChunks = chunk(missing, 5);\n\n  // Upload them in chunks of 5 to prevent network and system issues.\n  for (const keys of keyChunks) {\n    const formData = new FormData();\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'uploading', pathName);\n\n      formData.append(key, fs.createReadStream(pathName), pathName);\n    }\n\n    // TODO: Document what's going on\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    await api.uploadFormDataAsync('assets/upload', formData);\n  }\n}\n\nfunction collectAssetPaths(assets: Asset[]): Record<string, string> {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\n\nasync function saveAssetsAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'saving', pathName);\n\n      const assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      promises.push(fs.copy(pathName, assetPath));\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function collectAssets(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  hostedAssetPrefix: string,\n  bundles: BundlesByPlatform\n): Promise<Asset[]> {\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: exp,\n    async resolver(assetPath) {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    strict: true,\n  });\n\n  return [...Object.values(bundles).flatMap(bundle => bundle!.assets), ...manifestAssets];\n}\n"],"mappings":"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"}