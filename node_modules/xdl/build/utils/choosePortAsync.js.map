{"version":3,"file":"choosePortAsync.js","names":["choosePortAsync","projectRoot","defaultPort","host","reuseExistingPort","port","freeportAsync","hostnames","isRestricted","process","platform","isRoot","message","chalk","bold","runningProcess","getRunningProcess","pidTag","gray","pid","directory","cyan","command","Logger","global","info","change","confirmAsync","initial","error","code","warn"],"sources":["../../src/utils/choosePortAsync.ts"],"sourcesContent":["import chalk from 'chalk';\nimport freeportAsync from 'freeport-async';\nimport isRoot from 'is-root';\n\nimport Logger from '../Logger';\nimport { confirmAsync } from '../Prompts';\nimport { getRunningProcess } from './getRunningProcess';\n\nexport async function choosePortAsync(\n  projectRoot: string,\n  {\n    defaultPort,\n    host,\n    reuseExistingPort,\n  }: {\n    defaultPort: number;\n    host?: string;\n    reuseExistingPort?: boolean;\n  }\n): Promise<number | null> {\n  try {\n    const port = await freeportAsync(defaultPort, { hostnames: [host ?? null] });\n    if (port === defaultPort) {\n      return port;\n    }\n\n    const isRestricted = process.platform !== 'win32' && defaultPort < 1024 && !isRoot();\n\n    let message = isRestricted\n      ? `Admin permissions are required to run a server on a port below 1024`\n      : `Port ${chalk.bold(defaultPort)} is`;\n\n    const runningProcess = isRestricted ? null : getRunningProcess(defaultPort);\n\n    if (runningProcess) {\n      const pidTag = chalk.gray(`(pid ${runningProcess.pid})`);\n      if (runningProcess.directory === projectRoot) {\n        message += ` running this app in another window`;\n        if (reuseExistingPort) {\n          return null;\n        }\n      } else {\n        message += ` running ${chalk.cyan(runningProcess.command)} in another window`;\n      }\n      message += '\\n' + chalk.gray(`  ${runningProcess.directory} ${pidTag}`);\n    }\n\n    Logger.global.info(`\\u203A ${message}`);\n    const change = await confirmAsync({\n      message: `Use port ${port} instead?`,\n      initial: true,\n    });\n    return change ? port : null;\n  } catch (error: any) {\n    if (error.code === 'ABORTED') {\n      throw error;\n    } else if (error.code === 'NON_INTERACTIVE') {\n      Logger.global.warn(error.message);\n      return null;\n    }\n    throw error;\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAEO,eAAeA,eAAf,CACLC,WADK,EAEL;EACEC,WADF;EAEEC,IAFF;EAGEC;AAHF,CAFK,EAWmB;EACxB,IAAI;IACF,MAAMC,IAAI,GAAG,MAAM,IAAAC,wBAAA,EAAcJ,WAAd,EAA2B;MAAEK,SAAS,EAAE,CAACJ,IAAD,aAACA,IAAD,cAACA,IAAD,GAAS,IAAT;IAAb,CAA3B,CAAnB;;IACA,IAAIE,IAAI,KAAKH,WAAb,EAA0B;MACxB,OAAOG,IAAP;IACD;;IAED,MAAMG,YAAY,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgCR,WAAW,GAAG,IAA9C,IAAsD,CAAC,IAAAS,iBAAA,GAA5E;IAEA,IAAIC,OAAO,GAAGJ,YAAY,GACrB,qEADqB,GAErB,QAAOK,gBAAA,CAAMC,IAAN,CAAWZ,WAAX,CAAwB,KAFpC;IAIA,MAAMa,cAAc,GAAGP,YAAY,GAAG,IAAH,GAAU,IAAAQ,sCAAA,EAAkBd,WAAlB,CAA7C;;IAEA,IAAIa,cAAJ,EAAoB;MAClB,MAAME,MAAM,GAAGJ,gBAAA,CAAMK,IAAN,CAAY,QAAOH,cAAc,CAACI,GAAI,GAAtC,CAAf;;MACA,IAAIJ,cAAc,CAACK,SAAf,KAA6BnB,WAAjC,EAA8C;QAC5CW,OAAO,IAAK,qCAAZ;;QACA,IAAIR,iBAAJ,EAAuB;UACrB,OAAO,IAAP;QACD;MACF,CALD,MAKO;QACLQ,OAAO,IAAK,YAAWC,gBAAA,CAAMQ,IAAN,CAAWN,cAAc,CAACO,OAA1B,CAAmC,oBAA1D;MACD;;MACDV,OAAO,IAAI,OAAOC,gBAAA,CAAMK,IAAN,CAAY,KAAIH,cAAc,CAACK,SAAU,IAAGH,MAAO,EAAnD,CAAlB;IACD;;IAEDM,iBAAA,CAAOC,MAAP,CAAcC,IAAd,CAAoB,UAASb,OAAQ,EAArC;;IACA,MAAMc,MAAM,GAAG,MAAM,IAAAC,uBAAA,EAAa;MAChCf,OAAO,EAAG,YAAWP,IAAK,WADM;MAEhCuB,OAAO,EAAE;IAFuB,CAAb,CAArB;IAIA,OAAOF,MAAM,GAAGrB,IAAH,GAAU,IAAvB;EACD,CAjCD,CAiCE,OAAOwB,KAAP,EAAmB;IACnB,IAAIA,KAAK,CAACC,IAAN,KAAe,SAAnB,EAA8B;MAC5B,MAAMD,KAAN;IACD,CAFD,MAEO,IAAIA,KAAK,CAACC,IAAN,KAAe,iBAAnB,EAAsC;MAC3CP,iBAAA,CAAOC,MAAP,CAAcO,IAAd,CAAmBF,KAAK,CAACjB,OAAzB;;MACA,OAAO,IAAP;IACD;;IACD,MAAMiB,KAAN;EACD;AACF"}