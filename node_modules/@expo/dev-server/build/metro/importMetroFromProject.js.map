{"version":3,"file":"importMetroFromProject.js","sourceRoot":"","sources":["../../src/metro/importMetroFromProject.ts"],"names":[],"mappings":"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","sourcesContent":["import type Metro from 'metro';\nimport type MetroConfig from 'metro-config';\nimport type { composeSourceMaps } from 'metro-source-map';\nimport os from 'os';\nimport resolveFrom from 'resolve-from';\n\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nfunction resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot: string, moduleId: string) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nexport function importMetroSourceMapComposeSourceMapsFromProject(\n  projectRoot: string\n): typeof composeSourceMaps {\n  return importFromProject(projectRoot, 'metro-source-map/src/composeSourceMaps');\n}\n\nexport function importMetroConfigFromProject(projectRoot: string): typeof MetroConfig {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nexport function importMetroFromProject(projectRoot: string): typeof Metro {\n  return importFromProject(projectRoot, 'metro');\n}\n\nexport function importMetroServerFromProject(projectRoot: string): typeof Metro.Server {\n  return importFromProject(projectRoot, 'metro/src/Server');\n}\n\nexport function importCliServerApiFromProject(\n  projectRoot: string\n): typeof import('@react-native-community/cli-server-api') {\n  return importFromProject(projectRoot, '@react-native-community/cli-server-api');\n}\n\nexport function importInspectorProxyServerFromProject(\n  projectRoot: string\n): { InspectorProxy: any } {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\n\nexport function importExpoMetroConfigFromProject(\n  projectRoot: string\n): typeof import('@expo/metro-config') {\n  return importFromProject(projectRoot, '@expo/metro-config');\n}\n\nexport function importHermesCommandFromProject(projectRoot: string): string {\n  const platformExecutable = getHermesCommandPlatform();\n  const hermescLocations = [\n    // Override hermesc dir by environment variables\n    process.env['REACT_NATIVE_OVERRIDE_HERMES_DIR']\n      ? `${process.env['REACT_NATIVE_OVERRIDE_HERMES_DIR']}/build/bin/hermesc`\n      : '',\n\n    // Building hermes from source\n    'react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc',\n\n    // Prebuilt hermesc in official react-native 0.69+\n    `react-native/sdks/hermesc/${platformExecutable}`,\n\n    // Legacy hermes-engine package\n    `hermes-engine/${platformExecutable}`,\n  ];\n\n  for (const location of hermescLocations) {\n    try {\n      return resolveFromProject(projectRoot, location);\n    } catch (e: any) {}\n  }\n  throw new Error('Cannot find the hermesc executable.');\n}\n\nfunction getHermesCommandPlatform(): string {\n  switch (os.platform()) {\n    case 'darwin':\n      return 'osx-bin/hermesc';\n    case 'linux':\n      return 'linux64-bin/hermesc';\n    case 'win32':\n      return 'win64-bin/hermesc.exe';\n    default:\n      throw new Error(`Unsupported host platform for Hermes compiler: ${os.platform()}`);\n  }\n}\n"]}